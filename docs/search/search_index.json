{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":""},{"location":"index.html#bugfish-framework","title":"Bugfish Framework","text":"<p>Powerful, flexible, and secure\u2014elevate your web development with Bugfish PHP Framework. This documentation has been updated with version <code>4.10</code>.</p>"},{"location":"index.html#introduction","title":"Introduction","text":"<p>Introducing the Bugfish PHP Framework: a robust toolkit designed to empower web developers with extensive functionality, flexibility, and top-notch security standards. With Bugfish, you gain access to a suite of classes and functions that not only streamline development but also enhance performance, ensuring your web applications operate at peak efficiency. Join the Bugfish PHP Framework community today and unleash the full potential of your web development projects.</p>"},{"location":"index.html#requirements","title":"Requirements","text":""},{"location":"index.html#php-version","title":"PHP: Version","text":"<ul> <li>PHP 8.4 is recommended.</li> <li>Specific classes/functions requirements are listed in our documentation..</li> </ul>"},{"location":"index.html#php-modules","title":"PHP: Modules","text":"<ul> <li><code>mysqli</code> \u2013 MySQL database connectivity using improved extension.</li> <li><code>gd</code> \u2013 Image processing and manipulation (e.g., thumbnails).</li> <li><code>session</code> \u2013 Manages user sessions across page requests.</li> <li><code>curl</code> \u2013 Allows sending HTTP requests to external servers/APIs.</li> <li><code>sockets</code> \u2013 Enables low-level network communication (TCP/UDP).</li> <li><code>mbstring</code> \u2013 Multibyte string support (for UTF-8 and international text).</li> <li><code>exif</code> \u2013 Reads metadata from images (e.g., orientation, camera info).</li> <li><code>dom</code> \u2013 XML and HTML document parsing using DOM API.</li> <li><code>hash</code> \u2013 Provides hashing algorithms (e.g., SHA, MD5).</li> <li><code>zip</code> \u2013 Read/write ZIP compressed archives.</li> <li><code>openssl</code> \u2013 Secure data encryption, decryption, and SSL/TLS support.</li> <li><code>redis</code> \u2013 Redis client extension for caching and message brokering.</li> <li><code>libxml</code> / <code>simplexml</code> \u2013 Core XML parsing library and simplified interface.</li> <li><code>fileinfo</code> \u2013 Detects file types based on content.</li> <li><code>json</code> \u2013 Parses and encodes JSON data.</li> <li>Specific classes/functions requirements are listed in our documentation..</li> </ul>"},{"location":"index.html#framework","title":"Framework","text":"<p>Below is a list of all files that are included in the framework, along with their corresponding documentation. Each entry provides an overview of the file\u2019s purpose and how it fits into the overall structure of the framework.</p>"},{"location":"index.html#php-functions","title":"PHP: Functions","text":"<p>Discover a collection of indispensable PHP functions crafted for seamless integration across various projects. Witness how these functions expedite and refine coding processes within web development. Comprehensive documentation for each function is provided below. To incorporate these functions seamlessly, include the PHP files within the designated <code>_framework/functions/x_*.php</code> folder.</p> Name Description License x_button.php PHP script providing button UI components or helpers. LGPL-2.1 x_captcha.php PHP implementation of CAPTCHA for spam prevention. LGPL-2.1 x_cookiebanner.php PHP code to display and manage cookie consent banners. LGPL-2.1 x_curl.php PHP wrapper or helper functions for cURL HTTP requests. LGPL-2.1 x_eventbox.php PHP component for displaying or managing event boxes/messages. LGPL-2.1 x_folder.php Collection of utility functions for folder operations in PHP. LGPL-2.1 x_library.php Collection of utility functions for general use in PHP. LGPL-2.1 x_rss.php PHP script to generate or parse RSS feeds. LGPL-2.1 x_table.php PHP helper for generating or manipulating HTML tables. LGPL-2.1 x_thumbnail.php Collection of utility functions for thumbnail operations in PHP. LGPL-2.1 x_search.php PHP functions for search implementation and indexing. LGPL-2.1"},{"location":"index.html#php-classes","title":"PHP: Classes","text":"<p>These classes, located in <code>/_framework/classes/x_*</code>, are crucial for their functionality, efficiency, and thorough testing across various websites. They enhance development and save time. </p> <p>Note: Some classes require a database connection. They will install necessary tables automatically if configured correctly. Not all classes require MySQL; refer to the documentation for specific requirements. If MySQL is needed, provide a valid <code>x_class_mysql</code> object to the class.</p> Name Description License x_class_2fa The TwoFactorAuthenticator class in PHP generates and verifies Time-Based One-Time Password (TOTP) codes for two-factor authentication (2FA). It offers methods for generating random secret keys, creating 2FA codes, and validating them, enhancing security in PHP applications. LGPL-2.1 x_class_api Facilitates the creation of simple and secure API requests. This class needs PHP Module CURL to work properly. It supports token-authentication on API Requests and more. LGPL-2.1 x_class_benchmark Lets you benchmark resource consumption for sites on your website. PHP values related to benchmarking will be saved in a database per URL and overwritten if the URL is refreshed to monitor consumption even after changes. LGPL-2.1 x_class_block Facilitates session-based user counting and block operations. Easily block users from various areas if they make bad decisions and raise their counter. LGPL-2.1 x_class_comment Enables commenting functionality, suitable for guestbooks or website comment sections. Can also act as a simple chat or logging tool. LGPL-2.1 x_class_csrf Provides robust CSRF protection for web forms, supporting external actions. Includes functions to control everything related to CSRF keys, saving you time and adding basic security to your website. LGPL-2.1 x_class_curl Efficiently handles Curl requests and logs them for web operations. This class makes it easier to build PHP Curl requests. PHP Module CURL is needed to run this class. LGPL-2.1 x_class_crypt Provides file and string encryption capabilities. Encrypt and decrypt strings/files using a simple encryption method. LGPL-2.1 x_class_debug Aids in debugging and offers development notifications and functions. Check if PHP modules are enabled or get benchmarks for your website. LGPL-2.1 x_class_eventbox Simplifies the display of user notifications and messages on a web page. LGPL-2.1 x_class_hitcounter Counts website visitors per page URL with configurable options to handle various cases. LGPL-2.1 x_class_ipbl Implements IP blacklisting. Allows you to raise counters for IPs and block certain areas if an IP is acting suspiciously. Can help prevent brute-force attacks if implemented correctly. LGPL-2.1 x_class_log Provides a class for logging operations, allowing you to make log entries for almost every possibility. LGPL-2.1 x_class_lang Manages language translation for multi-language websites with functions and parameters for adding and managing translation keys. LGPL-2.1 x_class_mail Handles mail sending operations with a subclass for sending operation items. Depends on <code>x_class_phpmailer</code>. LGPL-2.1 x_class_mail_item Together with x_class_mail simplifies single object transmissions. Depends on <code>x_class_phpmailer</code>. LGPL-2.1 x_class_mail_template Creates mail templates with substitutions and footer/header options, compatible with <code>x_class_mail</code>. Simplifies the preparation of email templates. LGPL-2.1 x_class_mysql Provides MySQL database handling capabilities with additional features. Most classes need an <code>x_class_mysql</code> object to run properly. Includes a database logging system to store errors and more. LGPL-2.1 x_class_mysql_item Provides MySQL database handling capabilities for single database table elements. LGPL-2.1 x_class_mail_phpmailer Manages email sending operations within the framework. Note: This class is from PHPMailer, not created by Bugfish. LGPL-2.1 x_class_perm Controls user permissions and management functionalities. Ideal for implementing a permission system. LGPL-2.1 x_class_perm_item Controls user permissions, including single-item permission objects. Ideal for implementing a permission system. LGPL-2.1 x_class_referer Logs visitor referrers with configuration functions to control how referrers are saved in the database. LGPL-2.1 x_class_redis Offers control over Redis functionality. Caches content on a Redis server to improve website speed. Requires PHP Module REDIS. LGPL-2.1 x_class_table Simplifies the creation of dynamic HTML tables with PHP editing capabilities. LGPL-2.1 x_class_user Creates various types of user logins with full functionality for password recovery, mail editing, and token operations. A comprehensive login/authentication and token system. LGPL-2.1 x_class_var Controls setup variables for websites and includes a function for creating forms to change these values. Ideal for managing constants. LGPL-2.1 x_class_version Retrieves version and author information about the currently included framework. LGPL-2.1 x_class_zip Enables file compression and decompression, compatible with <code>x_class_crypt</code> for direct encryption and decryption. Requires PHP Module ZIP. LGPL-2.1"},{"location":"index.html#css-classes","title":"CSS: Classes","text":"<p>Introducing the \"Bugfish CSS Framework\" \u2013 a solution for efficient web design. Simplify your development process with a comprehensive collection of pre-built classes designed to expedite the creation of responsive web layouts. To use it, include the CSS files located in the <code>css</code> folder.</p> <p>Find the CSS Classes file in: <code>/_framework/css/xcss_xfpe.css</code></p> Name License CSS Classes Library LGPL-2.1"},{"location":"index.html#javascript-functions","title":"JavaScript: Functions","text":"<p>Access a comprehensive array of JavaScript functions designed for integration across diverse projects, enhancing coding speed and efficiency in web development. Detailed documentation for each function is provided below. To incorporate these functions, include the JavaScript file in the <code>_javascript</code> subfolder within the central <code>_framework</code> folder. This implementation optimizes your coding process and elevates your web project's performance.</p> <p>Find the JavaScript function file in: <code>/_framework/javascript/xjs_library.js</code></p> Name License JavaScript Function Library LGPL-2.1"},{"location":"index.html#downloads","title":"Downloads","text":"<p>The Downloads Section provides all the necessary files to get started with the project, including the latest software versions and any related resources.</p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Find out how you can contribute to the project by visiting the Contributing Page. Whether you want to report bugs, suggest features, or submit improvements, we welcome your involvement.</p>"},{"location":"index.html#warranty","title":"Warranty","text":"<p>Review the terms of our warranty on the Warranty Information Page. This page outlines the scope of support and any applicable guarantees.</p>"},{"location":"index.html#support","title":"Support","text":"<p>If you need assistance, visit the Support Page to find the available channels for getting help with any issues or questions you might have.</p>"},{"location":"index.html#license","title":"License","text":"<p>Get the full details on licensing by checking out the License Information Page. This section includes the terms and conditions under which the project is distributed.</p>"},{"location":"contributing.html","title":"Contributing","text":""},{"location":"contributing.html#contributing","title":"Contributing","text":"<p>I am excited that you're considering contributing to our project! Here are some guidelines to help you get started.</p> <p>If you encounter a bug or have an enhancement suggestion, please check the \"Issues\" section of our GitHub repository or visit our official website for guidance before beginning any work on it.</p> <p>I am excited that you're considering contributing to our project! Here are some guidelines to help you get started.</p> <p>We primarily accept security fixes and critical patches to maintain project stability and coherence. Feature updates are not accepted to preserve our backend architecture and overall project integrity.</p> <p>Below is an example of how to contribute to this GitHub project. Please follow this guideline and all other contribution rules carefully; otherwise, your request may be denied.</p> <ul> <li>Fork the repository to create your own copy.</li> <li>Create a new branch for your changes (e.g., feature/my-feature).</li> <li>Make your changes and verify everything works correctly.</li> <li>Commit your changes with clear and concise messages.</li> <li>Push your branch to your forked repository.</li> <li>Open a pull request to the main repository\u2019s main branch with a detailed description of your changes.</li> <li>Reference any related issues or discussions in your pull request.</li> </ul> <p>To ensure your implementation is effective and maintainable by other developers, please follow the code quality guidelines outlined below.</p> <ul> <li>Keep your code clean and well-organized.</li> <li>Add comments to explain complex logic or functions.</li> <li>Use meaningful and consistent variable and function names.</li> <li>Break down code into smaller, reusable functions and components.</li> <li>Follow proper indentation and formatting practices.</li> <li>Avoid code duplication by reusing existing functions or modules.</li> <li>Ensure your code is easily readable and maintainable by others.</li> </ul> <p>If you encounter a bug or have an enhancement suggestion, please check the \"Issues\" section of our GitHub repository or visit our official website for guidance before beginning any work on it.</p>"},{"location":"download.html","title":"Download","text":""},{"location":"download.html#download","title":"Download","text":"<p>Here, you can easily access the latest version of the software, including all relevant files and resources.</p> <p>You can explore the complete codebase, documentation, and all the associated files in the GitHub repository. By clicking the link below, you'll be directed to the repository where you can review the project's source code, contribute to its development, report issues, and more.</p> <p>GitHub</p> <p>To download the latest version of the project, simply click the link below. This will allow you to get the most up-to-date version of the repository, including all files and resources in a zip format.</p> <p>Download</p>"},{"location":"license.html","title":"License","text":""},{"location":"license.html#license","title":"License","text":"<p>This section contains the licensing information for the project. Please review the terms carefully before using or modifying the software.</p> <pre><code>            GNU LESSER GENERAL PUBLIC LICENSE\n                   Version 2.1, February 1999\n</code></pre> <p>Copyright (C) 1991, 1999 Free Software Foundation, Inc.  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <p>[This is the first released version of the Lesser GPL.  It also counts  as the successor of the GNU Library Public License, version 2, hence  the version number 2.1.]</p> <pre><code>                        Preamble\n</code></pre> <p>The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.</p> <p>This license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it.  You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.</p> <p>When we speak of free software, we are referring to freedom of use, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights.  These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.</p> <p>For example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you.  You must make sure that they, too, receive or can get the source code.  If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it.  And you must show them these terms so they know their rights.</p> <p>We protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.</p> <p>To protect each distributor, we want to make it very clear that there is no warranty for the free library.  Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.    Finally, software patents pose a constant threat to the existence of any free program.  We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder.  Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.</p> <p>Most GNU software, including some libraries, is covered by the ordinary GNU General Public License.  This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License.  We use this license for certain libraries in order to permit linking those libraries into non-free programs.</p> <p>When a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library.  The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom.  The Lesser General Public License permits more lax criteria for linking other code with the library.</p> <p>We call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License.  It also provides other free software developers Less of an advantage over competing non-free programs.  These disadvantages are the reason we use the ordinary General Public License for many libraries.  However, the Lesser license provides advantages in certain special circumstances.</p> <p>For example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard.  To achieve this, non-free programs must be allowed to use the library.  A more frequent case is that a free library does the same job as widely used non-free libraries.  In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.</p> <p>In other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software.  For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.</p> <p>Although the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.</p> <p>The precise terms and conditions for copying, distribution and modification follow.  Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\".  The former contains code derived from the library, whereas the latter must be combined with the library in order to run.                    GNU LESSER GENERAL PUBLIC LICENSE    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</p> <ol> <li>This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".</li> </ol> <p>A \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.</p> <p>The \"Library\", below, refers to any such software library or work which has been distributed under these terms.  A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language.  (Hereinafter, translation is included without limitation in the term \"modification\".)</p> <p>\"Source code\" for a work means the preferred form of the work for making modifications to it.  For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.</p> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it).  Whether that is true depends on what the Library does and what the program that uses the Library does.</p> <ol> <li>You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.</li> </ol> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.    2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p> <pre><code>a) The modified work must itself be a software library.\n\nb) You must cause the files modified to carry prominent notices\nstating that you changed the files and the date of any change.\n\nc) You must cause the whole of the work to be licensed at no\ncharge to all third parties under the terms of this License.\n\nd) If a facility in the modified Library refers to a function or a\ntable of data to be supplied by an application program that uses\nthe facility, other than as an argument passed when the facility\nis invoked, then you must make a good faith effort to ensure that,\nin the event an application does not supply such function or\ntable, the facility still operates, and performs whatever part of\nits purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has\na purpose that is entirely well-defined independent of the\napplication.  Therefore, Subsection 2d requires that any\napplication-supplied function or table used by this function must\nbe optional: if the application does not supply it, the square\nroot function must still compute square roots.)\n</code></pre> <p>These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.</p> <p>In addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <ol> <li>You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library.  To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License.  (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.)  Do not make any other change in these notices.    Once this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.</li> </ol> <p>This option is useful when you wish to copy part of the code of the Library into a program that is not a library.</p> <ol> <li>You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.</li> </ol> <p>If distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.</p> <ol> <li>A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\".  Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.</li> </ol> <p>However, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\".  The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.</p> <p>When a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library.  The threshold for this to be true is not precisely defined by law.</p> <p>If such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work.  (Executables containing this object code plus portions of the Library will still fall under Section 6.)</p> <p>Otherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.    6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.</p> <p>You must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License.  You must supply a copy of this License.  If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License.  Also, you must do one of these things:</p> <pre><code>a) Accompany the work with the complete corresponding\nmachine-readable source code for the Library including whatever\nchanges were used in the work (which must be distributed under\nSections 1 and 2 above); and, if the work is an executable linked\nwith the Library, with the complete machine-readable \"work that\nuses the Library\", as object code and/or source code, so that the\nuser can modify the Library and then relink to produce a modified\nexecutable containing the modified Library.  (It is understood\nthat the user who changes the contents of definitions files in the\nLibrary will not necessarily be able to recompile the application\nto use the modified definitions.)\n\nb) Use a suitable shared library mechanism for linking with the\nLibrary.  A suitable mechanism is one that (1) uses at run time a\ncopy of the library already present on the user's computer system,\nrather than copying library functions into the executable, and (2)\nwill operate properly with a modified version of the library, if\nthe user installs one, as long as the modified version is\ninterface-compatible with the version that the work was made with.\n\nc) Accompany the work with a written offer, valid for at\nleast three years, to give the same user the materials\nspecified in Subsection 6a, above, for a charge no more\nthan the cost of performing this distribution.\n\nd) If distribution of the work is made by offering access to copy\nfrom a designated place, offer equivalent access to copy the above\nspecified materials from the same place.\n\ne) Verify that the user has already received a copy of these\nmaterials or that you have already sent this user a copy.\n</code></pre> <p>For an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it.  However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system.  Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.    7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:</p> <pre><code>a) Accompany the combined library with a copy of the same work\nbased on the Library, uncombined with any other library\nfacilities.  This must be distributed under the terms of the\nSections above.\n\nb) Give prominent notice with the combined library of the fact\nthat part of it is a work based on the Library, and explaining\nwhere to find the accompanying uncombined form of the same work.\n</code></pre> <ol> <li> <p>You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License.  Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License.  However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p> </li> <li> <p>You are not required to accept this License, since you have not signed it.  However, nothing else grants you permission to modify or distribute the Library or its derivative works.  These actions are prohibited by law if you do not accept this License.  Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.</p> </li> <li> <p>Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions.  You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License. </p> </li> <li>If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all.  For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.</li> </ol> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <ol> <li> <p>If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the body of this License.</p> </li> <li> <p>The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> </li> </ol> <p>Each version is given a distinguishing version number.  If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.    14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission.  For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this.  Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p> <pre><code>                        NO WARRANTY\n</code></pre> <ol> <li> <p>BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> </li> <li> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <pre><code>             END OF TERMS AND CONDITIONS\n\n   How to Apply These Terms to Your New Libraries\n</code></pre> </li> </ol> <p>If you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change.  You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).</p> <p>To apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the library's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:</p> <p>Yoyodyne, Inc., hereby disclaims all copyright interest in the   library `Frob' (a library for tweaking knobs) written by James Random Hacker.</p> <p>, 1 April 1990   Ty Coon, President of Vice</p>"},{"location":"support.html","title":"Support","text":""},{"location":"support.html#support","title":"Support","text":"<p>If you experience any issues or have questions while using this software, don't hesitate to reach out. We're here to help!</p> <p>For general inquiries, bug reports, questions, or feature requests, please use GitHub Issues as the primary platform:</p> <p>GitHub Issues</p> <p>For urgent security-related matters, email support is available. Please reach out to us directly at:</p> <p>security@bugfish.eu</p>"},{"location":"warranty.html","title":"Warranty","text":""},{"location":"warranty.html#warranty","title":"Warranty","text":"<p>This section provides important warranty information for the project. Please read carefully to understand the terms before using the software.</p> <p>This software is provided as-is, without any guarantees of security, reliability, or fitness for any particular purpose. We do not take responsibility for any damage, data loss, security breaches, or other issues that may arise from using this software. By using this software, you agree that We are not liable for any direct, indirect, incidental, or consequential damages. Use it at your own risk.</p>"},{"location":"classes/x_class_2fa.html","title":"x_class_2fa","text":""},{"location":"classes/x_class_2fa.html#php-class-x_class_2fa","title":"PHP Class: <code>x_class_2fa</code>","text":""},{"location":"classes/x_class_2fa.html#introduction","title":"Introduction","text":"<p>The <code>x_class_2fa</code> class enables secure two-factor authentication (2FA) using time-based one-time passwords (TOTPs). It relies on a Base32-encoded secret key (RFC 4648, no padding) to generate and verify short-lived codes, typically valid for 30 seconds. The default code length is 6 digits but can be customized via the <code>$codeLength</code> parameter. Accurate server time is crucial for successful code validation.</p> <p>Use the class by including <code>/_framework/classes/x_class_2fa.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1\u20137.4</li> <li>PHP 8.0\u20138.4</li> </ul> <p>PHP Modules</p> <ul> <li><code>session</code>: Required if you intend to associate 2FA codes with session data. Typically bundled in PHP by default.</li> <li><code>hashing</code>: Required for HMAC-SHA1 operations used in generating and verifying codes. Included by default in standard PHP installations.</li> </ul>"},{"location":"classes/x_class_2fa.html#methods","title":"Methods","text":""},{"location":"classes/x_class_2fa.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes the 2FA class with a Base32-encoded secret key and an optional code length.</p> Parameter Type Description Default <code>$secretKey</code> string The Base32-encoded secret key used for generating and verifying 2FA codes. None <code>$codeLength</code> int The length of the 2FA code to be generated. 6 Return Value When does this return value occur? <code>void</code> Always. This is a constructor and returns nothing."},{"location":"classes/x_class_2fa.html#generatesecretkey","title":"<code>generateSecretKey</code>","text":"<p>Generates a cryptographically secure Base32-encoded secret key for 2FA.</p> Parameter Type Description Default <code>$length</code> int Number of random bytes to generate before encoding. 16 Return Value When does this return value occur? <code>string</code> (Base32-encoded) Always returns a Base32-encoded string representing the key."},{"location":"classes/x_class_2fa.html#generatecode","title":"<code>generateCode</code>","text":"<p>Generates a time-based one-time password (TOTP) using the secret key.</p> Parameter Type Description Default <code>$forTime</code> int Optional Unix timestamp to generate the code for (for testing/debugging). <code>null</code> Return Value When does this return value occur? <code>string</code> Returns a numeric code that is valid for a 30-second time window."},{"location":"classes/x_class_2fa.html#verifycode","title":"<code>verifyCode</code>","text":"<p>Verifies whether the provided code is valid for the current or nearby time windows.</p> Parameter Type Description Default <code>$code</code> string The 2FA code to verify. None <code>$window</code> int Number of 30-second intervals to allow as drift (e.g. 1 = \u00b130s). 1 Return Value When does this return value occur? <code>true</code> If the provided code is valid within the allowed time window. <code>false</code> If the code does not match or is outside the acceptable time drift."},{"location":"classes/x_class_2fa.html#example","title":"Example","text":"<pre><code>&lt;?php\n// Example: Using the x_class_2fa class for generating and verifying 2FA codes\n\n// Step 1: Generate a new Base32 secret key\n$secretKey = x_class_2fa::generateSecretKey();\n\n// Step 2: Initialize the 2FA class\n$twofa = new x_class_2fa($secretKey);\n\n// Step 3: Generate a 2FA code\n$generatedCode = $twofa-&gt;generateCode();\necho \"Generated 2FA Code: \" . $generatedCode . \"\\n\";\n\n// Step 4: Verify the 2FA code\n$isCodeValid = $twofa-&gt;verifyCode($generatedCode);\nif ($isCodeValid) {\n    echo \"The 2FA code is valid.\\n\";\n} else {\n    echo \"The 2FA code is invalid.\\n\";\n}\n\n// Step 5: Simulate code expiration\nsleep(30);\n$newCode = $twofa-&gt;generateCode();\necho \"New 2FA Code after 30 seconds: \" . $newCode . \"\\n\";\n?&gt;\n</code></pre>"},{"location":"classes/x_class_api.html","title":"x_class_api","text":""},{"location":"classes/x_class_api.html#php-class-x_class_api","title":"PHP Class: <code>x_class_api</code>","text":""},{"location":"classes/x_class_api.html#introduction","title":"Introduction","text":"<p>The <code>x_class_api</code> class provides a structured way to manage API keys stored in a MySQL database. It supports creation, validation, revocation, expiration, refreshing, referencing, and deletion of API keys while maintaining related metadata such as key status, expiration dates, and usage tracking. The class automatically ensures the table for storing API keys exists.</p> <p>Use this class by including <code>/_framework/classes/x_class_api.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.</li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_api.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the structure of the table used for storing API keys and their metadata. The table will be created automatically by the class constructor if it does not already exist.</p> Column Name Data Type Attributes Description <code>id</code> <code>INT UNSIGNED</code> <code>NOT NULL AUTO_INCREMENT PRIMARY KEY</code> Unique identifier for each API key entry. <code>api_key</code> <code>VARCHAR(128)</code> <code>NOT NULL UNIQUE</code> The generated API key (unique). <code>reference</code> <code>VARCHAR(128)</code> <code>NULL</code> Optional reference or label for the API key. <code>section</code> <code>VARCHAR(128)</code> <code>NOT NULL</code> Section or scope for which the API key is valid. <code>api_note</code> <code>TEXT</code> <code>NOT NULL</code> User-defined note describing the API key purpose or comments. <code>status</code> <code>ENUM</code> <code>'active','revoked','expired'</code>Default: <code>active</code> Current status of the API key. <code>created_at</code> <code>DATETIME</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Timestamp when the API key was created. <code>expires_at</code> <code>DATETIME</code> <code>NULL</code> Optional expiration date for the API key. <code>last_used_at</code> <code>DATETIME</code> <code>NULL</code> Timestamp of the last time the API key was used. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Uniquely identifies each entry. <code>{$table}_unique</code> Unique <code>api_key</code> Ensures unique API keys."},{"location":"classes/x_class_api.html#methods","title":"Methods","text":""},{"location":"classes/x_class_api.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes the class with the database connection, table name, and optionally a section/scope name.</p> Parameter Type Description Default <code>$mysql</code> object MySQL-like DB handler instance None <code>$table</code> string Name of the table for API key storage None <code>$section</code> string Optional API section/scope for keys <code>\"\"</code> (empty) Return Value Description <code>void</code> Constructor does not return"},{"location":"classes/x_class_api.html#addkey","title":"<code>addKey</code>","text":"<p>Generates a new API key and stores it, optionally with expiration, note, and reference.</p> Parameter Type Description Default <code>$expires_in_days</code> integer/boolean Number of days until expiration or false for none <code>false</code> <code>$note</code> string/boolean Optional note for the API key <code>false</code> <code>$api_reference</code> string/boolean Optional reference label for the key <code>false</code> Return Value Description <code>string</code> The newly created API key"},{"location":"classes/x_class_api.html#validatekey","title":"<code>validateKey</code>","text":"<p>Checks if a given API key and reference are valid and active, with expiration enforcement. Updates last used timestamp on success.</p> Parameter Type Description Default <code>$api_key</code> string API key to validate None <code>$api_reference</code> string Reference to match None Return Value Description <code>int|false</code> Returns the database record ID on success, or <code>false</code> if invalid"},{"location":"classes/x_class_api.html#referencekey","title":"<code>referenceKey</code>","text":"<p>Sets or updates the reference (label) for a specified API key.</p> Parameter Type Description Default <code>$api_key</code> string The API key to update None <code>$reference</code> string The new reference to assign None Return Value Description <code>boolean</code> Always returns <code>true</code>"},{"location":"classes/x_class_api.html#refreshkey","title":"<code>refreshKey</code>","text":"<p>Generates a new unique API key to replace an existing one.</p> Parameter Type Description Default <code>$api_key</code> string The current API key to refresh None Return Value Description <code>string</code> The newly generated API key"},{"location":"classes/x_class_api.html#revokekey","title":"<code>revokeKey</code>","text":"<p>Marks an API key as revoked, disabling its usage.</p> Parameter Type Description Default <code>$api_key</code> string The API key to revoke None Return Value Description <code>boolean</code> Always returns <code>true</code>"},{"location":"classes/x_class_api.html#expirekey","title":"<code>expireKey</code>","text":"<p>Marks an API key as expired, disabling its usage.</p> Parameter Type Description Default <code>$api_key</code> string The API key to expire None Return Value Description <code>boolean</code> Always returns <code>true</code>"},{"location":"classes/x_class_api.html#deletekey","title":"<code>deleteKey</code>","text":"<p>Deletes an API key and its record from the database entirely.</p> Parameter Type Description Default <code>$api_key</code> string The API key to delete None Return Value Description <code>boolean</code> Always returns <code>true</code>"},{"location":"classes/x_class_api.html#example","title":"Example","text":"<pre><code>&lt;?php\n// Instantiate DB handler\n$db = new x_class_mysql(...);\n$apiManager = new x_class_api($db, 'api_keys', 'my_section');\n\n// Create a new API key valid for 30 days with a note\n$newKey = $apiManager-&gt;addKey(30, 'Key for project X');\n\n// Validate the key when received from a client\n$valid = $apiManager-&gt;validateKey($newKey, 'my_section');\nif ($valid !== false) {\n    echo \"API key is valid, id: $valid\";\n} else {\n    echo \"Invalid or expired API key.\";\n}\n\n// Revoke the key later if needed\n$apiManager-&gt;revokeKey($newKey);\n?&gt;\n</code></pre>"},{"location":"classes/x_class_benchmark.html","title":"x_class_benchmark","text":""},{"location":"classes/x_class_benchmark.html#php-class-x_class_benchmark","title":"PHP Class: <code>x_class_benchmark</code>","text":""},{"location":"classes/x_class_benchmark.html#introduction","title":"Introduction","text":"<p>The <code>x_class_benchmark</code> class is designed for benchmarking various aspects of a web application's performance, such as load time, memory usage, and query count. It stores these metrics in a MySQL database for later analysis. The class also allows you to filter records by section and URL path.</p> <ul> <li>Table Initialization: The <code>create_table()</code> method ensures that the necessary table structure is created in the database, with columns for storing performance metrics and other relevant data.</li> <li>URL Preparation: The <code>prepareUrl()</code> method sanitizes and formats the URL path for consistent storage.</li> </ul> <p>The class assumes that the MySQL connection object and <code>x_class_debug</code> instance are correctly implemented. Ensure proper error handling and logging are in place for production environments.</p> <p>Use the class by including <code>/_framework/classes/x_class_benchmark.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> <li><code>x_class_debug</code>: This class should be implemented separately to provide performance metrics.</li> </ul>"},{"location":"classes/x_class_benchmark.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the structure of the database table that the class automatically creates to log benchmarking data. This table tracks various performance metrics such as site loading time, memory usage, and query counts. The table will be automatically installed by the class when required by its functionality.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each record in the table. <code>full_url</code> <code>varchar(512)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code>, <code>UNIQUE KEY</code> The full URL of the related domain or resource being benchmarked. This is the primary reference. <code>value_time</code> <code>varchar(64)</code> <code>DEFAULT '0'</code> The site loading time, representing the duration it took for the site to load during the benchmark. <code>value_memory</code> <code>varchar(64)</code> <code>DEFAULT '0'</code> The amount of memory used during the site loading process, measured during the benchmark. <code>value_load</code> <code>varchar(64)</code> <code>DEFAULT '0'</code> The overall load time for the site, which may include additional performance metrics. <code>value_queries</code> <code>varchar(64)</code> <code>DEFAULT '0'</code> The number of database queries executed during the benchmarked request. <code>section</code> <code>varchar(128)</code> <code>NULL</code>, <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the record was created. Automatically set when a new record is inserted. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification. Automatically updated whenever the record changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures each record is uniquely identifiable. <code>UNIQUE KEY</code> Unique <code>full_url</code> Prevents duplicate entries for the same <code>full_url</code>, ensuring each URL is logged only once."},{"location":"classes/x_class_benchmark.html#methods","title":"Methods","text":"Method Description <code>__construct($x_class_mysql, $table, $section = \"\")</code> Initializes the class with a x_class_mysql object, table name, and optional section filter. <code>only200($bool = true)</code> Sets whether to only log metrics for successful HTTP 200 responses. <code>get_array_full()</code> Retrieves all benchmark records from the database. <code>get_array_section($section)</code> Retrieves benchmark records filtered by a specific section. <code>execute($querie_counter = 0)</code> Logs benchmark metrics for the current URL and section."},{"location":"classes/x_class_benchmark.html#__construct","title":"<code>__construct</code>","text":"Parameter Type Default Description <code>$thecon</code> Object MySQLi connection object. <code>$table</code> String The name of the table to store benchmark data. <code>$section</code> String <code>\"\"</code> Optional section name to filter records. <p>Description: Initializes the <code>x_class_benchmark</code> object, sets up the database connection, and creates the benchmark table if it does not exist. It also prepares the current URL path for storage and calculates its MD5 hash.</p>"},{"location":"classes/x_class_benchmark.html#only200","title":"<code>only200</code>","text":"Parameter Type Default Description <code>$bool</code> Boolean <code>true</code> Whether to only log metrics for HTTP 200 responses. <p>Description: Sets the flag to determine if only successful (HTTP 200) responses should be logged.</p>"},{"location":"classes/x_class_benchmark.html#get_array_full","title":"<code>get_array_full</code>","text":"Return Type Description Array Returns an array of all benchmark records. <p>Description: Retrieves all benchmark records from the database table.</p>"},{"location":"classes/x_class_benchmark.html#get_array_section","title":"<code>get_array_section</code>","text":"Parameter Type Description <code>$section</code> String The section to filter the benchmark records by. Return Type Description Array Returns an array of benchmark records for the specified section. <p>Description: Retrieves benchmark records filtered by the specified section from the database table.</p>"},{"location":"classes/x_class_benchmark.html#execute","title":"<code>execute</code>","text":"Parameter Type Default Description <code>$querie_counter</code> Integer <code>0</code> The number of queries executed (for logging). <p>Description: Logs benchmarking metrics for the current URL and section. It inserts a new record or updates an existing one with the current metrics such as load time, memory usage, CPU load, and query count. </p> <p>Special Notes: - Metrics are collected using the <code>x_class_debug</code> class, which must provide methods for <code>timer()</code>, <code>memory_usage()</code>, and <code>cpu_load()</code>. - The class checks if the response code is 200 (if <code>only200</code> is set) before logging metrics.</p>"},{"location":"classes/x_class_block.html","title":"x_class_block","text":""},{"location":"classes/x_class_block.html#php-class-x_class_block","title":"PHP Class: <code>x_class_block</code>","text":""},{"location":"classes/x_class_block.html#introduction","title":"Introduction","text":"<p>The <code>x_class_block</code> class is designed to manage access control based on a counter mechanism. It uses PHP sessions to track and limit actions, blocking further attempts if a predefined limit is exceeded within a specified time frame. This class is useful for implementing rate limiting or blocking mechanisms.</p> <ul> <li>Dummy Mode: When <code>dummy</code> mode is enabled, the class bypasses all blocking logic. This mode is useful for testing purposes or when you want to disable blocking temporarily.  </li> <li>Session Management: The class relies on PHP sessions to store the count and block state. Ensure sessions are properly configured and started to avoid issues with state persistence.  </li> <li>Time Calculation: The <code>block_time</code> is handled in seconds. The block state will be cleared after the specified duration if a time limit is set.  </li> </ul> <p>This class provides functionality to track and block actions based on a counter and a time limit. It uses PHP sessions to store state information, including the current count and block timestamps.</p> <p>Use the class by including <code>/_framework/classes/x_class_block.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>session</code>: PHP sessions must be enabled and started before CSRF protection can function correctly.</li> </ul>"},{"location":"classes/x_class_block.html#properties","title":"Properties","text":""},{"location":"classes/x_class_block.html#key","title":"<code>key</code>","text":"Property Type Description <code>key</code> string A unique session key for tracking block state."},{"location":"classes/x_class_block.html#dummy","title":"<code>dummy</code>","text":"Property Type Description <code>dummy</code> bool A flag indicating if the class is in dummy mode (for testing or bypassing functionality)."},{"location":"classes/x_class_block.html#maxcount","title":"<code>maxcount</code>","text":"Property Type Description <code>maxcount</code> int The maximum number of attempts allowed before blocking occurs."},{"location":"classes/x_class_block.html#block_time","title":"<code>block_time</code>","text":"Property Type Description <code>block_time</code> int The time (in seconds) for which blocking remains active. If <code>false</code>, blocking is permanent until reset."},{"location":"classes/x_class_block.html#blocked","title":"<code>blocked</code>","text":"Property Type Description <code>blocked</code> bool True if currently blocked, false otherwise."},{"location":"classes/x_class_block.html#methods","title":"Methods","text":""},{"location":"classes/x_class_block.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$pre_key</code> string Prefix for session key to avoid conflicts. <code>$maxcount</code> int The maximum number of attempts allowed. <code>$block_time</code> int Optional. The duration (in seconds) to remain blocked. Defaults to <code>false</code> (no time limit). <code>$dummy</code> bool Optional. If <code>true</code>, the class operates in dummy mode (bypassing actual functionality). Defaults to <code>false</code>. <ul> <li>Description: Initializes the <code>x_class_block</code> object, starts a session if necessary, and sets up the session variables for tracking block state.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_block.html#blocked_1","title":"<code>blocked(...)</code>","text":"Parameter Type Description None None Checks if the current state is blocked based on the count and time limit. <ul> <li> <p>Returns: <code>true</code> if blocked; <code>false</code> otherwise.</p> </li> <li> <p>Description: Determines whether the current action is blocked based on the count and the block time. Updates the <code>blocked</code> property accordingly.</p> </li> </ul>"},{"location":"classes/x_class_block.html#increase","title":"<code>increase(...)</code>","text":"Parameter Type Description <code>$int</code> int The number of attempts to increment (default is <code>1</code>). <ul> <li>Description: Increases the attempt count by the specified amount and checks if the block condition is met.</li> <li>Returns: <code>false</code> if in dummy mode; otherwise, <code>true</code>.</li> </ul>"},{"location":"classes/x_class_block.html#decrease","title":"<code>decrease(...)</code>","text":"Parameter Type Description <code>$int</code> int The number of attempts to decrement (default is <code>1</code>). <ul> <li>Description: Decreases the attempt count by the specified amount and checks if the block condition is met.</li> <li>Returns: <code>true</code> if in normal mode; otherwise, <code>false</code>.</li> </ul>"},{"location":"classes/x_class_block.html#reset","title":"<code>reset(...)</code>","text":"Parameter Type Description None None Resets the attempt count and clears the block state. <ul> <li>Description: Resets the attempt count to zero and clears any block timestamp, effectively removing any active block.</li> <li>Returns: <code>true</code> if in normal mode; otherwise, <code>false</code>.</li> </ul>"},{"location":"classes/x_class_comment.html","title":"x_class_comment","text":""},{"location":"classes/x_class_comment.html#php-class-x_class_comment","title":"PHP Class: <code>x_class_comment</code>","text":""},{"location":"classes/x_class_comment.html#introduction","title":"Introduction","text":"<p>The <code>x_class_comment</code> class is designed to manage a commenting system. It allows users to post comments, upvote comments, and manage the display and storage of comments in a MySQL database. This class integrates with a MySQL database and uses sessions to track user votes.</p> <ul> <li>Session Management: Ensure sessions are started before using the class.</li> <li>Database Table Creation: The class automatically creates a table if it does not exist.</li> <li>Captcha Verification: Validates captcha if provided; otherwise, expects no captcha.</li> </ul> <p>The <code>x_class_comment</code> class is designed to be flexible and integrate easily with various MySQL-backed systems. Ensure that all dependencies are met and that the MySQL wrapper class methods (<code>query</code>, <code>update</code>, etc.) are compatible with the usage in this class.</p> <p>Use the class by including <code>/_framework/classes/x_class_comment.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> <li><code>session</code>: PHP sessions must be enabled and started before CSRF protection can function correctly.</li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_comment.html#mysql-table","title":"MySQL Table","text":"<p>This section explains the structure of the database table that will be automatically created by the class to log activities. The table captures information such as the target entity, user details, activity text, and status. Below is a summary of the columns and keys used in the table, along with their purposes.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each record in the table. <code>target</code> <code>varchar(256)</code> <code>DEFAULT NULL</code> The name of the target entity associated with the activity (e.g., post, user, product). <code>targetid</code> <code>varchar(256)</code> <code>DEFAULT NULL</code> The identifier of the target entity, allowing precise tracking of which entity the activity refers to. <code>name</code> <code>varchar(256)</code> <code>NOT NULL</code> The name of the author who performed the activity. <code>text</code> <code>text</code> <code>NOT NULL</code> The description or content of the activity logged. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the activity was created. This value is automatically set when a new record is added. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification. This value is automatically updated whenever the record is changed. <code>status</code> <code>tinyint(1)</code> <code>DEFAULT NULL</code> The status of the activity, represented by numerical codes: 0 for Waiting, 1 for OK, 2 for Internal, 3 for System. <code>upvotes</code> <code>int(9)</code> <code>DEFAULT '0'</code> The number of upvotes received by the activity, useful for assessing its popularity or relevance. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures each record in the table is uniquely identifiable by its <code>id</code>."},{"location":"classes/x_class_comment.html#methods","title":"Methods","text":""},{"location":"classes/x_class_comment.html#__construct","title":"<code>__construct</code>","text":"Parameter Type Description <code>$x_class_mysql</code> object MySQL database connection object. <code>$table</code> string Name of the table to use for storing comments. <code>$precookie</code> string Prefix for session cookies. <code>$module</code> string Identifier for the module (e.g., blog post ID). <code>$target</code> string Target ID for comments (e.g., article ID). <code>$section</code> string Section identifier (optional). <p>Description: Initializes the class, sets up session management, and checks for table existence. Creates the table if it does not exist.</p>"},{"location":"classes/x_class_comment.html#sys_name","title":"<code>sys_name</code>","text":"Parameter Type Description <code>$name</code> string System name for comments. <p>Description: Sets the system name for the comments.</p>"},{"location":"classes/x_class_comment.html#sys_text","title":"<code>sys_text</code>","text":"Parameter Type Description <code>$text</code> string System initialization text. <p>Description: Sets the default system text.</p>"},{"location":"classes/x_class_comment.html#vote_show","title":"<code>vote_show</code>","text":"<p>Description: Displays the upvote button and current upvote count. Shows a message if the user has already voted.</p>"},{"location":"classes/x_class_comment.html#form_show","title":"<code>form_show</code>","text":"Parameter Type Description <code>$captchaurl</code> string URL to the captcha image. <p>Description: Displays the comment form including fields for name, comment, and captcha.</p>"},{"location":"classes/x_class_comment.html#comment_show","title":"<code>comment_show</code>","text":"Parameter Type Description <code>$hide_system_msg</code> boolean Whether to hide system messages (status = 3). <code>$hide_internal_msg</code> boolean Whether to hide internal messages (status = 2). <code>$hide_confirmed</code> boolean Whether to hide confirmed comments (status = 1). <code>$hide_unconfirmed</code> boolean Whether to hide unconfirmed comments (status = 0). <code>$sorting</code> string SQL sorting clause (default: \" ORDER BY id DESC\"). <p>Description: Displays comments based on the provided filter options. Returns an array of comments.</p>"},{"location":"classes/x_class_comment.html#comment_get","title":"<code>comment_get</code>","text":"Parameter Type Description <code>$hide_system_msg</code> boolean Whether to hide system messages (status = 3). <code>$hide_internal_msg</code> boolean Whether to hide internal messages (status = 2). <code>$hide_confirmed</code> boolean Whether to hide confirmed comments (status = 1). <code>$hide_unconfirmed</code> boolean Whether to hide unconfirmed comments (status = 0). <code>$sorting</code> string SQL sorting clause (default: \" ORDER BY id DESC\"). <p>Description: Retrieves comments based on the filter options. Returns an array of comments.</p>"},{"location":"classes/x_class_comment.html#init","title":"<code>init</code>","text":"Parameter Type Description <code>$captcha_code_if_delivered</code> string The expected captcha code for validation. <p>Description: Initializes the commenting system by checking for system entries, handling votes, and processing new comments. Returns different status codes based on the outcome: - <code>1</code>: System message inserted. - <code>2</code>: Vote registered successfully. - <code>3</code>: Missing fields in the comment form.  - <code>4</code>: Captcha validation error. - <code>5</code>: Comment added successfully.  </p>"},{"location":"classes/x_class_crypt.html","title":"x_class_crypt","text":""},{"location":"classes/x_class_crypt.html#php-class-x_class_crypt","title":"PHP Class: <code>x_class_crypt</code>","text":""},{"location":"classes/x_class_crypt.html#introduction","title":"Introduction","text":"<p>The <code>x_class_crypt</code> class provides encryption and decryption methods using the AES-256-CBC algorithm by default. It allows for secure data handling by encrypting and decrypting data with a specified key.</p> <p>Use the class by including <code>/_framework/classes/x_class_crypt.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0\u20137.4  </li> <li>PHP 8.0\u20138.4  </li> </ul> <p>PHP-Modules</p> <ul> <li><code>openssl</code>: Required for encryption and decryption operations.</li> </ul>"},{"location":"classes/x_class_crypt.html#methods","title":"Methods","text":""},{"location":"classes/x_class_crypt.html#__construct","title":"<code>__construct</code>","text":"<p>Contructor for the class.</p> Parameter Type Description Default <code>$algo</code> string The encryption algorithm to use. Must be supported by OpenSSL. <code>'aes-256-cbc'</code> Return Value When does this return value occur? <code>void</code> Always. Constructor initializes the class with selected algorithm."},{"location":"classes/x_class_crypt.html#encrypt","title":"<code>encrypt</code>","text":"<p>Encrypt Data and Return</p> Parameter Type Description Default <code>$data</code> string The plaintext data to encrypt. None <code>$key</code> string Base64-encoded key used for encryption. Must match algorithm requirements. None Return Value When does this return value occur? <code>string</code> Returns base64-encoded encrypted data with IV included."},{"location":"classes/x_class_crypt.html#decrypt","title":"<code>decrypt</code>","text":"<p>Decrypt Data and Return</p> Parameter Type Description Default <code>$data</code> string Base64-encoded string containing the encrypted data and IV. None <code>$key</code> string Base64-encoded key used for decryption. Must match encryption key. None Return Value When does this return value occur? <code>string</code> Returns decrypted plaintext if successful."},{"location":"classes/x_class_crypt.html#example","title":"Example","text":"<pre><code>$key = base64_encode(openssl_random_pseudo_bytes(32)); // generate secure key\n$crypt = new x_class_crypt(); // defaults to aes-256-cbc\n\n$original = \"Secret Message!\";\n$encrypted = $crypt-&gt;encrypt($original, $key);\n$decrypted = $crypt-&gt;decrypt($encrypted, $key);\n\necho \"Original: $original\\n\";\necho \"Encrypted: $encrypted\\n\";\necho \"Decrypted: $decrypted\\n\";\n</code></pre>"},{"location":"classes/x_class_csrf.html","title":"x_class_csrf","text":""},{"location":"classes/x_class_csrf.html#php-class-x_class_csrf","title":"PHP Class: <code>x_class_csrf</code>","text":""},{"location":"classes/x_class_csrf.html#introduction","title":"Introduction","text":"<p>This document provides an in-depth explanation of the <code>x_class_csrf</code> class, which is designed to manage Cross-Site Request Forgery (CSRF) tokens in a PHP application. It explains the class structure, required PHP modules, and provides detailed descriptions of the methods and their parameters. The documentation is aimed at developers who need to integrate this class into their applications and require clear guidance on how to use it effectively.</p> <ul> <li>The <code>norenewal</code> and <code>external_action</code> properties provide flexibility for different use cases, such as handling tokens across external systems or preventing token renewal.</li> <li>The <code>check_lkey</code> method is particularly important when validating tokens from a previous session, useful in scenarios involving persistent tokens.</li> </ul> <p>This documentation ensures that developers can effectively integrate and use the <code>x_class_csrf</code> class in their PHP applications, maintaining security against CSRF attacks.</p> <p>This class manages CSRF tokens, which are crucial for preventing unauthorized actions from being executed in web applications. It handles the generation, validation, and management of CSRF tokens across multiple sessions. Special functionalities include the ability to disable token renewal, handle external actions, and validate tokens with custom validity periods.</p> <p>Use the class by including <code>/_framework/classes/x_class_csrf.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0\u20137.4  </li> <li>PHP 8.0\u20138.4  </li> </ul> <p>PHP-Modules</p> <ul> <li><code>session</code>: PHP sessions must be enabled and started before CSRF protection can function correctly.</li> </ul>"},{"location":"classes/x_class_csrf.html#properties","title":"Properties","text":"Parameter Type Description Default <code>$cookie_extension</code> string A prefix for session keys to allow multiple tokens <code>\"\"</code> <code>$second_valid</code> int Duration in seconds the CSRF token remains valid <code>300</code> <code>$external_action</code> bool If set to true, disables renewal and references last token <code>false</code> <code>$bool</code> bool Used in <code>disableRenewal</code>, <code>norenewal</code>, and <code>external_action</code> to toggle states <code>false</code> <code>$name</code> string Field name for hidden CSRF input <code>$id</code> string ID for the hidden CSRF input <code>\"\"</code> <code>$code</code> string Submitted CSRF token to validate <code>$override_valid_time</code> int/bool Custom validity time override during validation <code>false</code>"},{"location":"classes/x_class_csrf.html#methods","title":"Methods","text":""},{"location":"classes/x_class_csrf.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes session and CSRF state, handles previous tokens, and configures settings.</p> Parameter Type Description Default <code>$cookie_extension</code> string Prefix for session key names <code>\"\"</code> <code>$second_valid</code> int Time (in seconds) for token validity <code>300</code> <code>$external_action</code> bool Use last session key and disable renewal <code>false</code> Return Value When does this return value occur? N/A Constructor does not return a value."},{"location":"classes/x_class_csrf.html#disablerenewal","title":"<code>disableRenewal</code>","text":"<p>Disables automatic renewal of CSRF token at end of lifecycle.</p> Return Value When does this return value occur? <code>void</code> Always \u2013 sets internal flag."},{"location":"classes/x_class_csrf.html#norenewal","title":"<code>norenewal</code>","text":"<p>Alias to <code>disableRenewal</code>, same behavior.</p> Return Value When does this return value occur? <code>void</code> Always."},{"location":"classes/x_class_csrf.html#isdisabled","title":"<code>isDisabled</code>","text":"<p>Checks if renewal has been disabled.</p> Return Value When does this return value occur? <code>true/false</code> Returns true if renewal is disabled."},{"location":"classes/x_class_csrf.html#external_action","title":"<code>external_action</code>","text":"<p>Sets or unsets external action usage.</p> Return Value When does this return value occur? <code>void</code> Always."},{"location":"classes/x_class_csrf.html#get","title":"<code>get</code>","text":"<p>Returns the current session CSRF key.</p> Return Value When does this return value occur? <code>int</code> On call, returns current token."},{"location":"classes/x_class_csrf.html#get_time","title":"<code>get_time</code>","text":"<p>Returns the current session CSRF key's timestamp.</p> Return Value When does this return value occur? <code>int/bool</code> Timestamp or <code>false</code> if not set."},{"location":"classes/x_class_csrf.html#get_lkey","title":"<code>get_lkey</code>","text":"<p>Returns last session's CSRF key.</p> Return Value When does this return value occur? <code>int/bool</code> Previous session token or <code>false</code>."},{"location":"classes/x_class_csrf.html#get_lkey_time","title":"<code>get_lkey_time</code>","text":"<p>Returns last session's CSRF key timestamp.</p> Return Value When does this return value occur? <code>int/bool</code> Previous session time or <code>false</code>."},{"location":"classes/x_class_csrf.html#getfield","title":"<code>getField</code>","text":"<p>Echoes a hidden input field containing the current CSRF key.</p> Return Value When does this return value occur? <code>void</code> Always \u2013 HTML field is printed."},{"location":"classes/x_class_csrf.html#crypto","title":"<code>crypto</code>","text":"<p>Returns the relevant CSRF key based on mode (external/current).</p> Return Value When does this return value occur? <code>int</code> Either current or last token."},{"location":"classes/x_class_csrf.html#time","title":"<code>time</code>","text":"<p>Returns the relevant timestamp based on mode (external/current).</p> Return Value When does this return value occur? <code>int/bool</code> Token timestamp or <code>false</code>."},{"location":"classes/x_class_csrf.html#validate","title":"<code>validate</code>","text":"<p>Validates submitted CSRF token against session values.</p> Return Value When does this return value occur? <code>true</code> When the token matches and is not expired. <code>false</code> Otherwise."},{"location":"classes/x_class_csrf.html#check","title":"<code>check</code>","text":"<p>Validates current session CSRF token.</p> Return Value When does this return value occur? <code>true</code> Token is valid and within time. <code>false</code> Otherwise."},{"location":"classes/x_class_csrf.html#check_lkey","title":"<code>check_lkey</code>","text":"<p>Validates last session CSRF token.</p> Return Value When does this return value occur? <code>true</code> Token is valid and within time. <code>false</code> Otherwise."},{"location":"classes/x_class_csrf.html#example","title":"Example","text":"<pre><code>$csrf = new x_class_csrf(\"user_\", 300, false);\n\n// Include hidden field in form\n$csrf-&gt;getField(\"csrf_token\");\n\n// Validate on POST\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (!$csrf-&gt;validate($_POST['csrf_token'])) {\n        die(\"Invalid CSRF token.\");\n    } else {\n        echo \"Valid request.\";\n    }\n}\n</code></pre>"},{"location":"classes/x_class_curl.html","title":"x_class_curl","text":""},{"location":"classes/x_class_curl.html#php-class-x_class_curl","title":"PHP Class: <code>x_class_curl</code>","text":""},{"location":"classes/x_class_curl.html#introduction","title":"Introduction","text":"<p>The <code>x_class_curl</code> class is designed to facilitate various types of HTTP requests, including file downloads and uploads, while optionally logging requests and responses to a database. It provides a straightforward interface for making <code>GET</code>, <code>POST</code>, or custom requests and converting between XML and JSON formats.</p> <ol> <li>Logging: The class supports logging, which can be enabled using the <code>logging()</code> method. The log data is stored in a specified MySQL table. Ensure the MySQL table exists, or the class will automatically create it.</li> <li>Curl Settings: The <code>settings</code> array passed to the <code>request()</code>, <code>download()</code>, and <code>upload()</code> methods allows customization of the <code>curl</code> request by using <code>CURLOPT_*</code> options.</li> </ol> <p>The <code>x_class_curl</code> class provides several methods to make HTTP requests, log interactions, and convert data formats. Below is a detailed explanation of each method and its parameters.</p> <p>Use the class by including <code>/_framework/classes/x_class_curl.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>Required PHP Modules</p> <ul> <li><code>curl</code> \u2014 Required for <code>curl_init()</code>, <code>curl_setopt()</code>, <code>curl_exec()</code>, and <code>curl_close()</code>.</li> <li><code>mysqli</code> \u2014 Required by the <code>x_class_mysql</code> dependency for database operations.</li> <li><code>json</code> \u2014 For all JSON operations (<code>json_encode</code>, <code>json_decode</code>).</li> <li><code>libxml</code> / <code>simplexml</code> \u2014 For XML to array/JSON conversions via <code>simplexml_load_string</code>.</li> <li><code>fileinfo</code> \u2014 Needed for <code>mime_content_type()</code> in file uploads.</li> <li><code>mbstring</code> \u2014 Recommended for string handling reliability in serialized output/logs (not directly used but can affect behavior in some edge cases).</li> </ul> <p>Required Classes</p> <ul> <li><code>x_class_mysql</code> \u2014 This class is required for all logging operations. </li> </ul>"},{"location":"classes/x_class_curl.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the table structure that the cURL class will automatically create to log HTTP requests made using cURL. The table is designed to store detailed information about each request, such as the URL, request type, and response data. Below is an overview of the columns and keys used in the table, along with their intended purpose.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each logged request. <code>url</code> <code>text</code> The remote URL to which the cURL request was made. <code>request</code> <code>varchar(64)</code> The type of request or function name used (e.g., <code>GET</code>, <code>POST</code>, <code>PUT</code>). <code>filename</code> <code>text</code> The filename involved if the request was related to file uploads. <code>settings</code> <code>text</code> The configuration settings or parameters used for the cURL request. <code>output</code> <code>text</code> The response or output returned by the cURL request. <code>section</code> <code>varchar(128)</code> <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>type</code> <code>varchar(64)</code> The type of cURL request made, providing further context (e.g., <code>API</code>, <code>File Transfer</code>). <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the request was logged, automatically set when the record is created. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each log entry is uniquely identifiable."},{"location":"classes/x_class_curl.html#methods","title":"Methods","text":""},{"location":"classes/x_class_curl.html#logging","title":"<code>logging</code>","text":"<p>Configures logging for the requests made using this class.</p> Parameter Type Description <code>mysql</code> object MySQL connection object. <code>logging</code> bool Enable or disable logging. <code>logging_settings</code> bool Determines if the request settings should be logged. <code>logging_table</code> string Name of the MySQL table where logs are stored. <code>section</code> string Optional. A string identifier for the section of the application related to the request."},{"location":"classes/x_class_curl.html#request","title":"<code>request</code>","text":"<p>Executes an HTTP request and returns the response.</p> Parameter Type Description <code>url</code> string The URL to which the request is made. <code>request</code> string The HTTP request method (default is <code>GET</code>). <code>settings</code> array Optional. An associative array of additional <code>curl</code> options (<code>CURLOPT_*</code>) to customize the request. <p>Returns: The response from the server as a string.</p>"},{"location":"classes/x_class_curl.html#download","title":"<code>download</code>","text":"<p>Downloads a file from a remote server to a local path.</p> Parameter Type Description <code>remote</code> string The URL of the remote file to be downloaded. <code>local</code> string The local path where the file should be saved. <code>request</code> string The HTTP request method (default is <code>GET</code>). <code>settings</code> array Optional. An associative array of additional <code>curl</code> options (<code>CURLOPT_*</code>) to customize the request. <p>Returns: The response from the server as a string.</p>"},{"location":"classes/x_class_curl.html#upload","title":"<code>upload</code>","text":"<p>Uploads a local file to a remote server.</p> Parameter Type Description <code>remote</code> string The URL where the file should be uploaded. <code>local</code> string The local path of the file to be uploaded. <code>request</code> string The HTTP request method (default is <code>POST</code>). <code>settings</code> array Optional. An associative array of additional <code>curl</code> options (<code>CURLOPT_*</code>) to customize the request. <p>Returns: The response from the server as a string.</p>"},{"location":"classes/x_class_curl.html#xml_to_array","title":"<code>xml_to_array</code>","text":"<ul> <li><code>xml_to_array($xml)</code>: Converts XML to an array.</li> </ul>"},{"location":"classes/x_class_curl.html#xml_to_json","title":"<code>xml_to_json</code>","text":"<ul> <li><code>xml_to_json($xml)</code>: Converts XML to JSON.</li> </ul>"},{"location":"classes/x_class_curl.html#json_to_array","title":"<code>json_to_array</code>","text":"<ul> <li><code>json_to_array($json)</code>: Converts JSON to an array.</li> </ul>"},{"location":"classes/x_class_curl.html#json_to_xml","title":"<code>json_to_xml</code>","text":"<ul> <li><code>json_to_xml($json)</code>: Converts JSON to XML.</li> </ul>"},{"location":"classes/x_class_curl.html#array_to_xml","title":"<code>array_to_xml</code>","text":"<ul> <li><code>array_to_xml($array)</code>: Converts an array to XML.</li> </ul>"},{"location":"classes/x_class_curl.html#array_to_json","title":"<code>array_to_json</code>","text":"<ul> <li><code>array_to_json($array)</code>: Converts an array to JSON.</li> </ul>"},{"location":"classes/x_class_debug.html","title":"x_class_debug","text":""},{"location":"classes/x_class_debug.html#php-class-x_class_debug","title":"PHP Class: <code>x_class_debug</code>","text":""},{"location":"classes/x_class_debug.html#introduction","title":"Introduction","text":"<p>The <code>x_class_debug</code> class is designed to aid in debugging and monitoring of PHP applications. It provides functionality to check for required PHP modules, display error screens, log errors, and gather system information. This class is useful for developers who need to ensure that their application has all necessary PHP extensions and to monitor the application\u2019s resource usage and performance.</p> <ul> <li>Error Screen Customization: The <code>error_screen()</code> method provides a basic HTML template for displaying critical errors. Customize the HTML/CSS as needed for your application.</li> <li>Database Logging: The <code>js_error_action()</code> method requires a valid <code>x_class_mysql</code> instance. Ensure that the database connection and table creation logic aligns with your database schema.</li> <li>System Resource Monitoring: Methods like <code>memory_usage()</code>, <code>cpu_load()</code>, and <code>upload_max_filesize()</code> provide insights into system resource usage and configuration settings.</li> </ul> <p>Use the class by including <code>/_framework/classes/x_class_debug.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0\u20137.4  </li> <li>PHP 8.0\u20138.4  </li> </ul> <p>PHP-Modules</p> <ul> <li><code>curl</code> \u2014 Required indirectly if <code>js_error_script()</code> reports to endpoints that might utilize <code>x_class_curl</code>.</li> <li><code>mysqli</code> \u2014 Required by the <code>x_class_mysql</code> dependency used in error logging.</li> <li><code>json</code> \u2014 Needed for JavaScript error reporting in JSON format.</li> <li><code>sysvsem</code> (optional) \u2014 If using process/thread checks, <code>sys_getloadavg()</code> requires this module (usually enabled on Linux).</li> <li><code>mbstring</code> \u2014 Recommended for robust string handling, especially in serialized or POSTed content.</li> <li><code>fileinfo</code> \u2014 Useful if integrated with file-based logging extensions (not used directly but often co-installed with similar utilities).</li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code> \u2014 Required for MySQL Operations.</li> </ul>"},{"location":"classes/x_class_debug.html#mysql-table","title":"MySQL Table","text":"<p>This section explains the table structure that will be automatically created by the debugging class to log JavaScript errors encountered by users. The table captures essential details such as the error message, user information, and the URL where the error occurred. Below is a summary of the columns and keys used in the table, along with their intended usage.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(11)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each error log entry. <code>fk_user</code> <code>int(11)</code> <code>NOT NULL</code>, <code>DEFAULT 0</code> The foreign key referencing the user who encountered the error. Defaults to <code>0</code> if user is unknown. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the error was logged. Automatically set when a new record is inserted. <code>errormsg</code> <code>longtext</code> <code>DEFAULT NULL</code> The full error message captured from the JavaScript error. <code>urlstring</code> <code>varchar(512)</code> <code>DEFAULT NULL</code> The URL where the error occurred, providing context for the source of the error. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each error log entry is uniquely identifiable."},{"location":"classes/x_class_debug.html#properties","title":"Properties","text":"Property Type Description <code>microtime_start</code> float The timestamp when the object was instantiated, used for measuring elapsed time."},{"location":"classes/x_class_debug.html#methods","title":"Methods","text":""},{"location":"classes/x_class_debug.html#__construct","title":"<code>__construct</code>","text":"Parameter Type Description None None Initializes the <code>microtime_start</code> property with the current timestamp. <ul> <li>Description: Sets up the initial state of the object by recording the current time.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_debug.html#error_screen","title":"<code>error_screen</code>","text":"Parameter Type Description <code>$text</code> string The error message to display on the error screen. <ul> <li>Description: Displays a styled error page with a critical error message. This method sets the HTTP response code to 503 (Service Unavailable).</li> <li>Returns: None. Exits the script execution.</li> </ul>"},{"location":"classes/x_class_debug.html#required_php_modules","title":"<code>required_php_modules</code>","text":"Parameter Type Description <code>$array</code> array An array of PHP module names to check. <code>$errorscreen</code> bool Optional. If <code>true</code>, will display an error screen if any module is missing (default is <code>false</code>). <ul> <li>Description: Checks if the specified PHP modules are loaded. If some modules are missing and <code>$errorscreen</code> is <code>true</code>, it will display an error screen.</li> <li>Returns: An array of missing module names if any; otherwise, an empty array.</li> </ul>"},{"location":"classes/x_class_debug.html#required_php_module","title":"<code>required_php_module</code>","text":"Parameter Type Description <code>$name</code> string The name of the PHP module to check. <code>$errorscreen</code> bool Optional. If <code>true</code>, will display an error screen if the module is missing (default is <code>false</code>). <ul> <li>Description: Checks if a specific PHP module is loaded. If the module is missing and <code>$errorscreen</code> is <code>true</code>, it will display an error screen.</li> <li>Returns: <code>true</code> if the module is loaded; <code>false</code> otherwise.</li> </ul>"},{"location":"classes/x_class_debug.html#php_modules","title":"<code>php_modules</code>","text":"Parameter Type Description None None Returns the list of currently loaded PHP extensions. <ul> <li>Description: Retrieves the list of PHP modules currently loaded in the environment.</li> <li>Returns: An array of loaded PHP module names.</li> </ul>"},{"location":"classes/x_class_debug.html#memory_usage","title":"<code>memory_usage</code>","text":"Parameter Type Description None None Returns the current memory usage. <ul> <li>Description: Retrieves the current memory usage of the script.</li> <li>Returns: A string representing the memory usage in kilobytes (e.g., <code>\"1024KB\"</code>).</li> </ul>"},{"location":"classes/x_class_debug.html#memory_limit","title":"<code>memory_limit</code>","text":"Parameter Type Description None None Returns the maximum memory limit. <ul> <li>Description: Retrieves the memory limit set for the PHP script.</li> <li>Returns: A string representing the memory limit (e.g., <code>\"128M\"</code>).</li> </ul>"},{"location":"classes/x_class_debug.html#cpu_load","title":"<code>cpu_load</code>","text":"Parameter Type Description None None Returns the current CPU load average. <ul> <li>Description: Retrieves the system\u2019s average CPU load. Uses <code>sys_getloadavg()</code> if available.</li> <li>Returns: A float representing the average CPU load; <code>\"intl-mod-missing\"</code> if the function is not available.</li> </ul>"},{"location":"classes/x_class_debug.html#upload_max_filesize","title":"<code>upload_max_filesize</code>","text":"Parameter Type Description None None Returns the maximum file upload size. <ul> <li>Description: Retrieves the maximum file upload size allowed by the PHP configuration.</li> <li>Returns: A string representing the maximum upload size (e.g., <code>\"2M\"</code>).</li> </ul>"},{"location":"classes/x_class_debug.html#timer","title":"<code>timer</code>","text":"Parameter Type Description None None Returns the elapsed time. <ul> <li>Description: Calculates and returns the elapsed time since the object was instantiated.</li> <li>Returns: A float representing the elapsed time in seconds, rounded to three decimal places.</li> </ul>"},{"location":"classes/x_class_debug.html#js_error_script","title":"<code>js_error_script</code>","text":"Parameter Type Description <code>$action_url</code> string The URL where JavaScript errors should be sent. <ul> <li>Description: Outputs JavaScript code to capture JavaScript errors and send them to the specified URL via a POST request.</li> <li>Returns: None. The JavaScript code is output directly.</li> </ul>"},{"location":"classes/x_class_debug.html#js_error_action","title":"<code>js_error_action</code>","text":"Parameter Type Description <code>$x_class_mysql</code> object An instance of the <code>x_class_mysql</code> class. <code>$table</code> string The name of the table where errors should be logged. <code>$current_user_id</code> int Optional. The ID of the current user (default is <code>0</code>). <code>$section</code> string Optional. Additional context or section name (default is <code>\"\"</code>). <ul> <li>Description: Logs JavaScript error details into a MySQL database. Creates the error table if it does not exist.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_debug.html#js_error_create_db","title":"<code>js_error_create_db</code>","text":"Parameter Type Description <code>$x_class_mysql</code> object An instance of the <code>x_class_mysql</code> class. <code>$table</code> string The name of the table to create if it does not exist. <ul> <li>Description: Creates a MySQL table for logging JavaScript errors if it does not already exist.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html","title":"x_class_eventbox","text":""},{"location":"classes/x_class_eventbox.html#php-class-x_class_eventbox","title":"PHP Class: <code>x_class_eventbox</code>","text":""},{"location":"classes/x_class_eventbox.html#introduction","title":"Introduction","text":"<p>The <code>x_class_eventbox</code> class provides a mechanism for managing and displaying event messages within a web application. It utilizes PHP sessions to store messages temporarily and allows for various types of messages to be displayed or skipped.</p> <ul> <li>Session Management: The class uses PHP sessions to store and manage messages. Ensure that sessions are properly configured and started.</li> <li>Message Types: The class supports various types of messages such as \"ok\", \"warning\", \"error\", and \"info\". These types are used to style the messages differently when displayed.</li> <li>Message Display: The <code>show()</code> method can include an optional close button and HTML escaping for message text. This allows for customizable display options and security against XSS attacks.</li> </ul> <p>This class manages messages in a web application, allowing you to add, display, and control various types of messages (e.g., error, warning, info). It uses PHP sessions to store message data.</p> <p>Use the class by including <code>/_framework/classes/x_class_eventbox.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0\u20137.4  </li> <li>PHP 8.0\u20138.4  </li> </ul> <p>PHP-Modules</p> <ul> <li><code>session</code>: PHP sessions must be enabled and started before CSRF protection can function correctly.</li> </ul>"},{"location":"classes/x_class_eventbox.html#properties","title":"Properties","text":"Property Type Description <code>cookie</code> string A string used to prefix session variable names for isolation."},{"location":"classes/x_class_eventbox.html#methods","title":"Methods","text":""},{"location":"classes/x_class_eventbox.html#__construct","title":"<code>__construct</code>","text":"Parameter Type Description <code>$cookie</code> string Optional. A prefix for session variables (default is an empty string). <ul> <li>Description: Initializes the <code>x_class_eventbox</code> object. Starts a PHP session if not already active and sets up session variables for storing messages.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#ok","title":"<code>ok</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <ul> <li>Description: Adds a message of type \"ok\" to the messages array. Calls the <code>add()</code> method.</li> <li>Returns: Result of the <code>add()</code> method.</li> </ul>"},{"location":"classes/x_class_eventbox.html#warning","title":"<code>warning</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <ul> <li>Description: Adds a message of type \"warning\" to the messages array. Calls the <code>add()</code> method.</li> <li>Returns: Result of the <code>add()</code> method.</li> </ul>"},{"location":"classes/x_class_eventbox.html#error","title":"<code>error</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <ul> <li>Description: Adds a message of type \"error\" to the messages array. Calls the <code>add()</code> method.</li> <li>Returns: Result of the <code>add()</code> method.</li> </ul>"},{"location":"classes/x_class_eventbox.html#info","title":"<code>info</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <ul> <li>Description: Adds a message of type \"info\" to the messages array. Calls the <code>add()</code> method.</li> <li>Returns: Result of the <code>add()</code> method.</li> </ul>"},{"location":"classes/x_class_eventbox.html#add","title":"<code>add</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <code>$type</code> string The type of message (e.g., \"ok\", \"warning\", \"error\", \"info\"). <ul> <li>Description: Adds a message to the session's messages array with the specified type.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#get","title":"<code>get</code>","text":"Parameter Type Description None None Retrieves the current messages array from the session. <ul> <li>Returns: An array of messages from the session.</li> </ul>"},{"location":"classes/x_class_eventbox.html#override","title":"<code>override</code>","text":"Parameter Type Description <code>$text</code> string The message text to display. <code>$type</code> string The type of message (e.g., \"ok\", \"warning\", \"error\", \"info\"). <ul> <li>Description: Clears all current messages and sets a single message with the specified type.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#reset","title":"<code>reset</code>","text":"Parameter Type Description None None Resets all messages and skips the event box. <ul> <li>Description: Clears all messages from the session and sets the skip flag to <code>false</code>.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#skip","title":"<code>skip</code>","text":"Parameter Type Description None None Sets the skip flag to <code>true</code>. <ul> <li>Description: Sets a flag to skip displaying messages in the event box on the next show call.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#noskip","title":"<code>noskip</code>","text":"Parameter Type Description None None Sets the skip flag to <code>false</code>. <ul> <li>Description: Resets the skip flag to <code>false</code>, allowing messages to be displayed.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#show","title":"<code>show</code>","text":"Parameter Type Description <code>$closebutton</code> mixed Optional. HTML content or text for a close button (default is <code>false</code>). <code>$filter</code> bool Optional. If <code>true</code>, HTML special characters will be escaped (default is <code>false</code>). <ul> <li>Description: Displays the event box with the current messages. Optionally includes a close button and applies HTML escaping if required.</li> <li>Returns: <code>true</code> if messages are shown; otherwise, <code>false</code>.</li> </ul>"},{"location":"classes/x_class_hitcounter.html","title":"x_class_hitcounter","text":""},{"location":"classes/x_class_hitcounter.html#php-class-x_class_hitcounter","title":"PHP Class: <code>x_class_hitcounter</code>","text":""},{"location":"classes/x_class_hitcounter.html#introduction","title":"Introduction","text":"<p>The <code>x_class_hitcounter</code> class is designed to track and manage hits on specific URLs within a section of a website. It counts both unique \"arrivals\" (first visits by a user) and \"switches\" (subsequent hits to the same URL during a session). The class relies on MySQL for data storage and can dynamically create its own table if it doesn't exist.</p> <ul> <li>Session Management: The class relies on PHP sessions to track arrivals and switches, ensuring unique hits within a session.</li> <li>URL Cleaning: The <code>prepareUrl</code> method ensures URLs are stored consistently by removing protocol, subdomain, and GET parameters when configured to do so.</li> <li>Switches vs. Arrivals: Switches refer to repeated hits on the same URL during a session, while arrivals count the first visit.</li> </ul> <p>This class handles the counting and tracking of page hits and switches in a web application, storing the data in a MySQL database.</p> <p>Use the class by including <code>/_framework/classes/x_class_hitcounter.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> <li><code>session</code>: PHP sessions must be enabled and started before CSRF protection can function correctly.</li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_hitcounter.html#mysql-table","title":"MySQL Table","text":"<p>This section explains the table structure that will be automatically created by the hit counter class to log site visits. The table captures detailed information about each visit, including the URL, visit counts, and associated sections. Below is a summary of the columns and keys used in the table, along with their intended purpose.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each visit log entry. <code>full_url</code> <code>varchar(512)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> The full URL of the site being tracked, associated with the visit. <code>switches</code> <code>int(10)</code> <code>DEFAULT '0'</code> The number of changes or switches made to the site during the session. <code>arrivals</code> <code>int(10)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> The number of arrivals at the site for the given URL. <code>section</code> <code>varchar(128)</code> <code>NOT NULL</code>, <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>summarized</code> <code>int(10)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> The total number of hits for the specific URL, summarizing all visits. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the visit record was created. Automatically set when a new entry is added. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification to the visit record. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures each log entry is uniquely identifiable. <code>x_class_hitcounter</code> Unique <code>full_url</code>, <code>section</code> Ensures that each unique URL and section combination is only logged once, avoiding duplicate entries."},{"location":"classes/x_class_hitcounter.html#methods","title":"Methods","text":""},{"location":"classes/x_class_hitcounter.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes the hit counter instance. This method starts the session, stores key information, and ensures the MySQL table exists.</p> Parameter Type Description <code>$thecon</code> Object The MySQL connection object. <code>$table</code> String Name of the table to store hit counter data. <code>$precookie</code> String Prefix for session cookies to avoid collisions. <code>$section</code> String Section name to differentiate URLs by context."},{"location":"classes/x_class_hitcounter.html#enabled","title":"<code>enabled</code>","text":"<p>Enables or disables the hit counter. If disabled, no hits or switches are counted.</p> Parameter Type Description <code>$bool</code> Boolean Whether to enable the counter."},{"location":"classes/x_class_hitcounter.html#clearget","title":"<code>clearget</code>","text":"<p>Configures the behavior to remove GET parameters from the URL before processing. If enabled, the URL is cleaned for consistent storage and comparison.</p> Parameter Type Description <code>$bool</code> Boolean Whether to clean GET parameters from the URL before processing."},{"location":"classes/x_class_hitcounter.html#get_array","title":"<code>get_array</code>","text":"<p>Returns all records in the hit counter table as an array.</p> Parameter Type Description None N/A Returns an array of data."},{"location":"classes/x_class_hitcounter.html#refresh_counters","title":"<code>refresh_counters</code>","text":"<p>Refreshes the internal counters (<code>$switches</code>, <code>$arrivals</code>, <code>$summarized</code>) for the current URL and section. It queries the database for existing records and updates the class properties.</p> Parameter Type Description None N/A Updates internal counters."},{"location":"classes/x_class_hitcounter.html#prepareurl","title":"<code>prepareUrl</code>","text":"<p>Cleans and standardizes a URL for consistent storage in the database.</p> Parameter Type Description <code>$tmpcode</code> String The raw URL to be cleaned and standardized."},{"location":"classes/x_class_hitcounter.html#execute","title":"<code>execute</code>","text":"<p>Performs the main hit counting and updating operations. This method manages session-based hit counting and ensures accurate tracking of unique arrivals and switches.</p> Parameter Type Description None N/A Tracks the hit or switch for the current session."},{"location":"classes/x_class_hitcounter.html#example","title":"Example","text":"<pre><code>// Initialize the MySQL connection and table\n$mysql = new MySQLWrapper();\n$hitcounter = new x_class_hitcounter($mysql, 'hitcounter_table');\n\n// Enable the counter and clean GET parameters from URLs\n$hitcounter-&gt;enabled(true);\n$hitcounter-&gt;clearget(true);\n\n// Execute the hit counting process\n$hitcounter-&gt;execute();\n\n// Retrieve the summarized data\n$switches = $hitcounter-&gt;switches;\n$arrivals = $hitcounter-&gt;arrivals;\n$totalHits = $hitcounter-&gt;summarized;\n</code></pre>"},{"location":"classes/x_class_ipbl.html","title":"x_class_ipbl","text":""},{"location":"classes/x_class_ipbl.html#php-class-x_class_ipbl","title":"PHP Class: <code>x_class_ipbl</code>","text":""},{"location":"classes/x_class_ipbl.html#introduction","title":"Introduction","text":"<p>The <code>x_class_ipbl</code> class is used for managing IP-based blocking and failure counters using a MySQL database. It allows you to track IP addresses that have failed specific criteria and manage their block status accordingly. The class includes methods for checking if an IP is blocked, retrieving and updating counters, and unblocking IP addresses.</p> <p>Use the class by including <code>/_framework/classes/x_class_ipbl.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_ipbl.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the structure of the table used for logging IP addresses that have been blacklisted due to failure counts. The table will be automatically created by the class if required by its functionality. Below is a summary of the columns and keys in the table, along with their usage.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each blacklisted IP entry. <code>fail</code> <code>int(10)</code> <code>DEFAULT '1'</code> The count of failures associated with the IP address. This value increases with each failure. <code>ip_adr</code> <code>varchar(256)</code> <code>NOT NULL</code> The IP address that is being blacklisted. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The date and time when the IP address was blacklisted. Automatically set upon insertion. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures each blacklisted IP entry is uniquely identifiable. <code>x_class_ipbl</code> Unique <code>ip_adr</code> Ensures that each IP address is only recorded once in the table, preventing duplicate entries."},{"location":"classes/x_class_ipbl.html#methods","title":"Methods","text":""},{"location":"classes/x_class_ipbl.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes the class with database connection, table name, and maximum allowed failures before IP is considered blocked.</p> Parameter Type Description Default <code>$mysql</code> object MySQL-like DB handler instance supporting <code>select</code>, <code>query</code>, etc. None <code>$tablename</code> string Name of the table used to store IP data None <code>$maxvalue</code> int Maximum allowed failure count before block <code>50000</code> Return Value When does this return value occur? <code>void</code> Constructor does not return a value."},{"location":"classes/x_class_ipbl.html#blocked-banned-isbanned-isblocked","title":"<code>blocked</code>, <code>banned</code>, <code>isbanned</code>, <code>isblocked</code>","text":"<p>Checks if the current IP is blocked. All four methods behave identically.</p> Parameter Type Description Default <code>$renew</code> boolean If <code>true</code>, re-checks DB to refresh status. <code>false</code> Return Value When does this return value occur? <code>true</code> If the current IP's failure count exceeds threshold. <code>false</code> If not blocked."},{"location":"classes/x_class_ipbl.html#get_array","title":"<code>get_array</code>","text":"<p>Returns the entire contents of the IP block table as an array.</p> Parameter Type Description Default None \u2014 \u2014 \u2014 Return Value When does this return value occur? <code>array</code> Always returns array of all IPs in the block list"},{"location":"classes/x_class_ipbl.html#unblock","title":"<code>unblock</code>","text":"<p>Removes an IP address from the block list.</p> Parameter Type Description Default <code>$ip</code> string IP address to be unblocked. None Return Value When does this return value occur? <code>void</code> Always"},{"location":"classes/x_class_ipbl.html#get_counter-counter","title":"<code>get_counter</code>, <code>counter</code>","text":"<p>Returns the failure counter for the current IP. If <code>$renew</code> is <code>true</code>, the value is refreshed from the database.</p> Parameter Type Description Default <code>$renew</code> boolean If <code>true</code>, updates the local counter. <code>false</code> Return Value When does this return value occur? <code>int</code> Failure count of current IP, 0 if not found."},{"location":"classes/x_class_ipbl.html#ip_counter","title":"<code>ip_counter</code>","text":"<p>Gets the failure counter for the specified IP address.</p> Parameter Type Description Default <code>$ip</code> string IP address to fetch failure count for None Return Value When does this return value occur? <code>int</code> Number of failures for the specified IP."},{"location":"classes/x_class_ipbl.html#raise-increase","title":"<code>raise</code>, <code>increase</code>","text":"<p>Increments the failure counter for the current IP by a given value.</p> Parameter Type Description Default <code>$value</code> int Amount to increase failure counter by <code>1</code> Return Value When does this return value occur? <code>int</code> New failure counter after the increase."},{"location":"classes/x_class_ipbl.html#example","title":"Example","text":"<pre><code>&lt;?php\n// Mock DB class or your real DB connection instance\n$db = new x_class_mysql(...); \n$ipBlocker = new x_class_ipbl($db, 'blocked_ips', 10);\n\n// Raise the counter\n$ipBlocker-&gt;raise(); \n\n// Check if the current IP is blocked\nif ($ipBlocker-&gt;blocked()) {\n    echo \"Your IP is currently blocked.\";\n} else {\n    echo \"You're safe... for now.\";\n}\n\n// Get all blocked entries\n$allBlocked = $ipBlocker-&gt;get_array();\nprint_r($allBlocked);\n\n// Unblock a specific IP\n$ipBlocker-&gt;unblock('192.168.1.100');\n\n// Check counter for a given IP\necho \"Failures for IP: \" . $ipBlocker-&gt;ip_counter('192.168.1.100');\n?&gt;\n</code></pre>"},{"location":"classes/x_class_lang.html","title":"x_class_lang","text":""},{"location":"classes/x_class_lang.html#php-class-x_class_lang","title":"PHP Class: <code>x_class_lang</code>","text":""},{"location":"classes/x_class_lang.html#introduction","title":"Introduction","text":"<p>The <code>x_class_lang</code> class manages language translations for a multi-language system using either a MySQL database table or a flat file. It provides methods to add, delete, and retrieve translation strings keyed by identifiers, supporting language-specific and section-specific translations. The class can load translations from a database or from a file and allows translation string substitution and extension at runtime.</p> <p>Use the class by including <code>/_framework/classes/x_class_lang.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-8.4</li> <li>PHP <code>mysqli</code> or compatible MySQL handler extension</li> <li>Requires an instance of a MySQL-like database class (<code>x_class_mysql</code> or similar) for DB operations</li> </ul>"},{"location":"classes/x_class_lang.html#mysql-table","title":"MySQL Table","text":"<p>The class uses a MySQL table to store translation entries. This table will be automatically created if missing.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(9)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> Unique identifier for each translation entry <code>identificator</code> <code>varchar(512)</code> <code>NOT NULL</code> Unique key or identifier for the translation string <code>lang</code> <code>varchar(16)</code> <code>NOT NULL</code> Language code of the translation <code>translation</code> <code>text</code> Translated text corresponding to the identifier <code>section</code> <code>varchar(128)</code> <code>DEFAULT ''</code> Section or context this translation belongs to <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Timestamp when the entry was created <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> Timestamp updated when the entry is modified Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Unique identifier primary key <code>x_class_lang_unique</code> Unique <code>identificator</code>, <code>lang</code>, <code>section</code> Ensures a unique translation per identifier/language/section"},{"location":"classes/x_class_lang.html#methods","title":"Methods","text":""},{"location":"classes/x_class_lang.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes the class for translations with MySQL or file mode.</p> Parameter Type Description Default <code>$mysql</code> object MySQL handler instance for DB operations <code>false</code> <code>$table</code> string Table name for storing translations <code>false</code> <code>$lang</code> string Language code to load/manage translations <code>\"none\"</code> <code>$section</code> string Section identifier to scope translations <code>\"none\"</code> <code>$file_name</code> string Optional filename to load translations from a flat file <code>false</code> Return Value When does this occur? <code>int</code> 0 If initialized with no DB operations needed"},{"location":"classes/x_class_lang.html#create_table","title":"<code>create_table</code>","text":"<p>Creates the translation table if not existing.</p> Parameters None Return Value <code>boolean</code> true on successful table creation, false otherwise"},{"location":"classes/x_class_lang.html#init","title":"<code>init</code>","text":"<p>Loads all translations for the current language and section into an array for fast access.</p> Parameters None Return Value <code>void</code> or <code>false</code> if in file mode"},{"location":"classes/x_class_lang.html#delete","title":"<code>delete</code>","text":"<p>Deletes a translation key from the current or specified language and section.</p> Parameter Type Description Default <code>$key</code> string Translation key to delete None <code>$lang</code> string Optional language code, defaults to loaded language <code>false</code> Return Value <code>boolean</code> success or failure of deletion"},{"location":"classes/x_class_lang.html#add","title":"<code>add</code>","text":"<p>Adds a new translation entry or overrides existing for the current or specified language and section.</p> Parameter Type Description Default <code>$key</code> string Translation key None <code>$text</code> string Translation text None <code>$lang</code> string Optional language code <code>false</code> Return Value <code>boolean</code> success or failure of insert"},{"location":"classes/x_class_lang.html#translate","title":"<code>translate</code>","text":"<p>Retrieves the translation for a given key for the loaded language and substitutes placeholders if provided.</p> Parameter Type Description Default <code>$key</code> string Translation key to fetch None <code>$substitution</code> array null Optional array of substitution values Return Value <code>string</code> Translated and substituted string or key if not found"},{"location":"classes/x_class_lang.html#extend","title":"<code>extend</code>","text":"<p>Modifies or adds a key/value pair in the loaded translation array at runtime.</p> Parameter Type Description Default <code>$key</code> string Translation key None <code>$value</code> string Translation value None <code>$overwrite</code> boolean Overwrite existing value if <code>true</code> <code>true</code> Return Value <code>void</code>"},{"location":"classes/x_class_lang.html#example","title":"Example","text":"<pre><code>&lt;?php\n// Using MySQL instance for DB-backed translations\n$db = new x_class_mysql(...);\n$lang = new x_class_lang($db, 'translations', 'en', 'website');\n\n// Add a translation\n$lang-&gt;add('greeting', 'Hello, world!');\n\n// Retrieve a translation\necho $lang-&gt;translate('greeting'); // Outputs: Hello, world!\n\n// Substitute placeholders in translations\n$lang-&gt;add('welcome_user', 'Welcome, %repsub%!');\necho $lang-&gt;translate('welcome_user', ['Alice']); // Outputs: Welcome, Alice!\n\n// Delete a translation entry\n$lang-&gt;delete('greeting');\n\n// Extend translation dynamically\n$lang-&gt;extend('farewell', 'Goodbye!', true);\necho $lang-&gt;translate('farewell'); // Outputs: Goodbye!\n?&gt;\n</code></pre>"},{"location":"classes/x_class_log.html","title":"x_class_log","text":""},{"location":"classes/x_class_log.html#php-class-x_class_log","title":"PHP Class: <code>x_class_log</code>","text":""},{"location":"classes/x_class_log.html#introduction","title":"Introduction","text":"<p>The <code>x_class_log</code> class provides functionality for logging messages to a database table. It supports various log levels (such as errors, warnings, and notifications) and includes methods for retrieving, posting, and managing log entries.</p> <ul> <li>Table Management: The class ensures that the log table exists and is created if necessary. This includes managing the table schema and auto-increment settings.</li> <li>Alias Methods: Methods like <code>post()</code>, <code>send()</code>, and <code>write()</code> are aliases for <code>message()</code>, providing various ways to log messages with different naming conventions.</li> <li>Logging Levels: The class supports different log levels (error, warning, notification) which are defined by integer values. The <code>type</code> parameter in <code>message()</code> and its aliases determines the log level.  </li> <li>Error Handling: The class does not explicitly handle errors or exceptions; it relies on the underlying MySQL connection to manage errors.  </li> </ul> <p>This class manages log entries in a MySQL database, allowing you to create, retrieve, and delete log messages categorized by type.</p> <p>Use the class by including <code>/_framework/classes/x_class_log.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> <li><code>session</code>: PHP sessions must be enabled and started before CSRF protection can function correctly.</li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_log.html#mysql-table","title":"MySQL Table","text":"<p>This section details the structure of the table used by the logging class to record various activities, such as errors, warnings, and notifications. The table is automatically created by the class if needed for functionality. Below is a summary of the columns and keys in the table, along with their intended use.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each log entry, ensuring that each activity is individually trackable. <code>type</code> <code>int(10)</code> <code>DEFAULT '0'</code> Indicates the type of log entry: <code>0</code> - Unspecified, <code>1</code> - Error, <code>2</code> - Warning, <code>3</code> - Notification. <code>message</code> <code>text</code> Contains the main text of the log message, providing details about the logged activity. <code>ref</code> <code>text</code> Includes any reference related to the message, such as a file name or error code, for additional context. <code>section</code> <code>varchar(128)</code> <code>NULL</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Records the timestamp when the log entry was created, allowing for chronological tracking. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each log entry is uniquely identifiable."},{"location":"classes/x_class_log.html#properties","title":"Properties","text":""},{"location":"classes/x_class_log.html#mysql","title":"<code>mysql</code>","text":"Property Type Description <code>x_class_mysql</code> object An instance of a MySQL connection object, expected to have methods for querying and table management."},{"location":"classes/x_class_log.html#table","title":"<code>table</code>","text":"Property Type Description <code>table</code> string The name of the table used for storing log entries."},{"location":"classes/x_class_log.html#section","title":"<code>section</code>","text":"Property Type Description <code>section</code> string The section or category of logs."},{"location":"classes/x_class_log.html#methods","title":"Methods","text":""},{"location":"classes/x_class_log.html#__construct","title":"<code>__construct</code>","text":"Parameter Type Description <code>$x_class_mysql</code> object An instance of the x_class_mysql object. <code>$tablename</code> string The name of the table to store logs. <code>$section</code> string Optional. The section or category for the logs. <ul> <li>Description: Initializes the <code>x_class_log</code> object, sets up the table if it does not exist.</li> </ul>"},{"location":"classes/x_class_log.html#get_array","title":"<code>get_array</code>","text":"Parameter Type Description None None Retrieves all log entries as an array. <ul> <li>Returns: An array of log entries from the table.</li> </ul>"},{"location":"classes/x_class_log.html#post","title":"<code>post</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$type</code> int Optional. Type of log (default is 3 - Notification). <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts a log entry with the given message and type. Calls the <code>message()</code> method.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#send","title":"<code>send</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$type</code> int Optional. Type of log (default is 3 - Notification). <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>post()</code>. Inserts a log entry with the given message and type.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#write","title":"<code>write</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$type</code> int Optional. Type of log (default is 3 - Notification). <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>post()</code>. Inserts a log entry with the given message and type.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#message","title":"<code>message</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$type</code> int Type of log (1 - Error, 2 - Warning, 3 - Notification). <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts a log entry into the table with the specified type and reference.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#info","title":"<code>info</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>notify()</code>. Inserts a notification log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#notify","title":"<code>notify</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts a notification log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#warn","title":"<code>warn</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>warning()</code>. Inserts a warning log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#warning","title":"<code>warning</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts a warning log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#fail-failure-err","title":"<code>fail, failure, err</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>error()</code>. Inserts an error log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#error","title":"<code>error</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts an error log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#list_get","title":"<code>list_get</code>","text":"Parameter Type Description <code>$limit</code> int Optional. The number of log entries to retrieve (default is 50). <ul> <li>Description: Retrieves the most recent log entries from the table, limited by the <code>$limit</code> parameter.</li> <li>Returns: An array of log entries.</li> </ul>"},{"location":"classes/x_class_log.html#list_flush_section","title":"<code>list_flush_section</code>","text":"Parameter Type Description None None Deletes all log entries for the current section and resets the auto-increment value. <ul> <li>Description: Removes all entries for the current section and resets the table's auto-increment counter.</li> <li>Returns: <code>true</code> if successful.</li> </ul>"},{"location":"classes/x_class_log.html#list_flush","title":"<code>list_flush</code>","text":"Parameter Type Description None None Deletes all log entries and resets the auto-increment value. <ul> <li>Description: Removes all entries from the table and resets the table's auto-increment counter.</li> <li>Returns: <code>true</code> if successful.</li> </ul>"},{"location":"classes/x_class_mail.html","title":"x_class_mail","text":""},{"location":"classes/x_class_mail.html#php-class-x_class_mail","title":"PHP Class: <code>x_class_mail</code>","text":""},{"location":"classes/x_class_mail.html#introduction","title":"Introduction","text":"<p>The <code>x_class_mail</code> class provides an interface for sending emails using the PHPMailer library. It offers various configuration options and logging capabilities to manage email sending effectively. This class allows you to set up SMTP details, manage email content, handle attachments, and log email activities to a database.</p> <p>Use the class by including <code>/_framework/classes/x_class_mail.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> <li><code>x_class_mail_phpmailer</code>: The PHPMailer library is required for sending emails.  </li> <li><code>x_class_mysql</code>: Required for logging email activities if enabled.  </li> </ul>"},{"location":"classes/x_class_mail.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the table structure used by the mail class to log email sending activities, including both successful and failed attempts. The table is automatically created by the class if required for its functionality. Below is a summary of the columns and keys used in the table, along with their purposes.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each email log entry, ensuring that each record can be individually tracked. <code>receiver</code> <code>text</code> <code>DEFAULT NULL</code> Stores the serialized list of email recipients. <code>bcc</code> <code>text</code> <code>DEFAULT NULL</code> Stores the serialized list of BCC (blind carbon copy) recipients. <code>cc</code> <code>text</code> <code>DEFAULT NULL</code> Stores the serialized list of CC (carbon copy) recipients. <code>attach</code> <code>text</code> <code>DEFAULT NULL</code> Contains the serialized list of attachments sent with the email. <code>subject</code> <code>varchar(512)</code> <code>DEFAULT NULL</code> The subject line of the email. <code>msgtext</code> <code>text</code> The main body text of the email. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the email log entry was created. Automatically set when the record is added. <code>success</code> <code>tinyint(1)</code> <code>DEFAULT NULL</code> Indicates the result of the email sending attempt: <code>1</code> for success, <code>0</code> for failure, or <code>NULL</code> if not set. <code>debugmsg</code> <code>text</code> Contains any debug messages related to the email sending process, useful for troubleshooting. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each email log entry is uniquely identifiable."},{"location":"classes/x_class_mail.html#constructor","title":"Constructor","text":"Method Parameters Description <code>__construct</code> <code>host</code> (string), <code>port</code> (int, default 25), <code>auth_type</code> (string, default false), <code>user</code> (string, default false), <code>pass</code> (string, default false), <code>from_mail</code> (string, default false), <code>from_name</code> (string, default false) Initializes the mail settings including SMTP configuration and default sender information."},{"location":"classes/x_class_mail.html#public-methods","title":"Public Methods","text":"Method Parameters Description <code>keep_alive</code> <code>bool</code> (default false) Set whether to keep the SMTP connection alive. <code>encoding</code> <code>encode</code> (string, default 'base64') Set the encoding type for the email. <code>charset</code> <code>charset</code> (string, default 'UTF-8') Set the character set for the email. <code>allow_insecure_ssl_connections</code> <code>bool</code> (default false) Allow insecure SSL connections. <code>smtpdebuglevel</code> <code>int</code> (default 0) Set the SMTP debug level (0 - no debugging, 1 - client/server communication, 2 - server responses, 3 - detailed debugging). <code>all_default_html</code> <code>bool</code> (default false) Set whether all emails should default to HTML format. <code>change_default_template</code> <code>header</code> (string), <code>footer</code> (string) Set default header and footer templates for emails. <code>initFrom</code> <code>mail</code> (string), <code>name</code> (string, default false) Initialize the default 'From' address and name. <code>initReplyTo</code> <code>mail</code> (string), <code>name</code> (string, default false) Initialize the default 'Reply-To' address and name. <code>test_mode</code> <code>val</code> (string or bool) Set the test mode to a specific email address or disable it. <code>log_disable</code> - Disable logging of email activities. <code>log_enable</code> - Enable logging of email activities. <code>logging</code> <code>connection</code> (x_class_mysql object), <code>table</code> (string), <code>log_success_mail</code> (bool, default false), <code>section</code> (string, default \"\") Configure and enable logging of email activities. <code>last_info</code> - Retrieve the last recorded information or error message from the last email operation. <code>send</code> <code>to</code> (string or array), <code>toname</code> (string), <code>title</code> (string), <code>mailContent</code> (string), <code>ishtml</code> (bool, default false), <code>FOOTER</code> (string, default false), <code>HEADER</code> (string, default false), <code>attachments</code> (string or array, default false) Send an email with specified parameters including recipients, content, attachments, and optional HTML formatting. <code>mail</code> <code>subject</code> (string), <code>content</code> (string), <code>receiver</code> (array), <code>cc</code> (array), <code>bcc</code> (array), <code>attachment</code> (array), <code>settings</code> (array, default empty array) Send an email using the provided settings and parameters, allowing for advanced configuration and overriding of default settings. <code>object</code> - Create and return a new instance of <code>x_class_mail_item</code>, allowing further adjustments and sending of emails."},{"location":"classes/x_class_mail.html#private-methods","title":"Private Methods","text":"Method Parameters Description <code>log_execute</code> <code>subject</code> (string), <code>content</code> (string), <code>receiver</code> (array), <code>attachments</code> (array), <code>cc</code> (array), <code>bcc</code> (array), <code>success</code> (bool), <code>debug_message</code> (string), <code>settings</code> (array) Log the details of the email operation to the database if logging is enabled. <code>create_table</code> - Create the logging table in the database if it does not already exist."},{"location":"classes/x_class_mail.html#transmission-methods","title":"Transmission Methods","text":""},{"location":"classes/x_class_mail.html#send-method","title":"<code>send</code> Method","text":"<p>The <code>send</code> method in the <code>x_class_mail</code> class is used to send an email with specified parameters. It utilizes PHPMailer for sending emails and includes options for handling attachments, HTML content, and default templates.</p>"},{"location":"classes/x_class_mail.html#method-signature","title":"Method Signature","text":"<pre><code>public function send(\n    $to, \n    $toname, \n    $title, \n    $mailContent, \n    $ishtml = false, \n    $FOOTER = false, \n    $HEADER = false, \n    $attachments = false\n)\n</code></pre>"},{"location":"classes/x_class_mail.html#parameters","title":"Parameters","text":"Parameter Type Description <code>$to</code> <code>string</code> or <code>array</code> The recipient's email address. If an array, it should contain multiple recipient email addresses. <code>$toname</code> <code>string</code> The name of the recipient. <code>$title</code> <code>string</code> The subject line of the email. <code>$mailContent</code> <code>string</code> The body content of the email. <code>$ishtml</code> <code>bool</code> Indicates whether the email content is in HTML format. Defaults to <code>false</code> (plain text). <code>$FOOTER</code> <code>string</code> or <code>bool</code> Optional footer to append to the email content. If <code>false</code>, the class's default footer will be used. <code>$HEADER</code> <code>string</code> or <code>bool</code> Optional header to prepend to the email content. If <code>false</code>, the class's default header will be used. <code>$attachments</code> <code>string</code>, <code>array</code>, or <code>bool</code> Path(s) to file attachments. Can be a single path (string) or an array of paths. If <code>false</code>, no attachments are added."},{"location":"classes/x_class_mail.html#functionality","title":"Functionality","text":"<ol> <li>PHPMailer Initialization:</li> <li>Creates a new instance of <code>PHPMailer</code>.</li> <li> <p>Configures SMTP settings using the class properties.</p> </li> <li> <p>SMTP Configuration:</p> </li> <li>Sets the SMTP server details (<code>Host</code>, <code>SMTPAuth</code>, <code>Username</code>, <code>Password</code>, <code>SMTPSecure</code>, <code>Port</code>).</li> <li> <p>Configures additional options like keeping the SMTP connection alive and setting debug levels.</p> </li> <li> <p>HTML Content Handling:</p> </li> <li>Checks if <code>$ishtml</code> is <code>false</code> and <code>$this-&gt;html</code> is <code>true</code>. If so, it sets the email to be sent as HTML.</li> <li> <p>Uses <code>$ishtml</code> to decide if the email content is in HTML format or plain text.</p> </li> <li> <p>Insecure Connection Handling:</p> </li> <li> <p>If insecure SSL connections are allowed (<code>$this-&gt;allow_insecure_connection</code>), it configures SMTP options to ignore SSL certificate verification.</p> </li> <li> <p>Setting Sender and Reply-To:</p> </li> <li>Sets the 'From' address and name using <code>setFrom()</code>.</li> <li> <p>Sets the 'Reply-To' address and name using <code>addReplyTo()</code>.</p> </li> <li> <p>Recipient and Address Handling:</p> </li> <li>If <code>$this-&gt;test_mode</code> is set, it adds a test email address.</li> <li> <p>Adds recipients to the email using <code>addAddress()</code>. Handles both single and multiple recipients.</p> </li> <li> <p>Attachment Handling:</p> </li> <li> <p>Adds attachments if <code>$attachments</code> is provided. Supports both single and multiple attachments.</p> </li> <li> <p>Email Content Preparation:</p> </li> <li>Prepares the email body by combining the <code>$HEADER</code>, <code>$mailContent</code>, and <code>$FOOTER</code>.</li> <li> <p>Sets the email body using <code>Body</code>.</p> </li> <li> <p>Sending the Email:</p> </li> <li>Attempts to send the email using <code>send()</code>.</li> <li>Logs the outcome and updates the last information if logging is enabled.</li> </ol>"},{"location":"classes/x_class_mail.html#return-value","title":"Return Value","text":"<ul> <li>Returns <code>true</code> if the email is successfully sent.</li> <li>Returns <code>false</code> if there is an error sending the email.</li> </ul>"},{"location":"classes/x_class_mail.html#mail-method","title":"<code>mail</code> Method","text":"<p>The <code>mail</code> method provides more advanced email sending capabilities with the option to override default settings using a configuration array.</p>"},{"location":"classes/x_class_mail.html#method-signature_1","title":"Method Signature","text":"<pre><code>public function mail(\n    $subject, \n    $content, \n    $receiver, \n    $cc, \n    $bcc, \n    $attachment, \n    $settings = array()\n)\n</code></pre>"},{"location":"classes/x_class_mail.html#parameters_1","title":"Parameters","text":"Parameter Type Description <code>$subject</code> <code>string</code> The subject line of the email. <code>$content</code> <code>string</code> The body content of the email. <code>$receiver</code> <code>array</code> Recipients of the email. Format: <code>array(array(email, name), ...)</code>. <code>$cc</code> <code>array</code> CC recipients. Format: <code>array(array(email, name), ...)</code>. <code>$bcc</code> <code>array</code> BCC recipients. Format: <code>array(array(email, name), ...)</code>. <code>$attachment</code> <code>array</code> Attachments. Format: <code>array(array(path, name), ...)</code> or <code>array(path, ...)</code>. <code>$settings</code> <code>array</code> Configuration array to override default settings."},{"location":"classes/x_class_mail.html#functionality_1","title":"Functionality","text":"<ol> <li>PHPMailer Initialization:</li> <li>Creates a new instance of <code>PHPMailer</code>.</li> <li> <p>Configures SMTP settings based on the provided settings or defaults.</p> </li> <li> <p>SMTP Configuration:</p> </li> <li> <p>Overrides default SMTP settings if specified in <code>$settings</code>.</p> </li> <li> <p>HTML Content Handling:</p> </li> <li> <p>Configures HTML format based on <code>$settings</code> or defaults.</p> </li> <li> <p>Insecure Connection Handling:</p> </li> <li> <p>Configures SMTP options for insecure SSL connections based on <code>$settings</code>.</p> </li> <li> <p>Setting Sender and Reply-To:</p> </li> <li>Sets 'From' address and name using <code>setFrom()</code> from <code>$settings</code> or defaults.</li> <li> <p>Sets 'Reply-To' address and name using <code>addReplyTo()</code> from <code>$settings</code> or defaults.</p> </li> <li> <p>Recipient and Address Handling:</p> </li> <li> <p>Adds recipients to the email using <code>addAddress()</code>, <code>addCC()</code>, and <code>addBCC()</code>.</p> </li> <li> <p>Attachment Handling:</p> </li> <li> <p>Adds attachments using <code>addAttachment()</code> from <code>$settings</code>.</p> </li> <li> <p>Email Content Preparation:</p> </li> <li> <p>Prepares the email body by combining the <code>$HEADER</code>, <code>$content</code>, and <code>$FOOTER</code> from <code>$settings</code>.</p> </li> <li> <p>Sending the Email:</p> </li> <li>Attempts to send the email using <code>send()</code>.</li> <li>Logs the outcome and updates the last information if logging is enabled.</li> </ol>"},{"location":"classes/x_class_mail.html#return-value_1","title":"Return Value","text":"<ul> <li>Returns <code>true</code> if the email is successfully sent.</li> <li>Returns <code>false</code> if there is an error sending the email.</li> </ul>"},{"location":"classes/x_class_mail.html#summary","title":"Summary","text":"<ul> <li><code>send</code> Method: A straightforward method for sending emails with specific parameters and default settings. Ideal for most common email-sending scenarios.</li> <li><code>mail</code> Method: Provides advanced email-sending capabilities with customizable settings through a configuration array. Useful for scenarios requiring detailed customization or different settings for individual emails.</li> </ul> <p>Both methods leverage PHPMailer for email sending and include robust handling for various email features, ensuring flexibility and control over email dispatching.</p>"},{"location":"classes/x_class_mail_item.html","title":"x_class_mail_item","text":""},{"location":"classes/x_class_mail_item.html#php-class-x_class_mail_item","title":"PHP Class: <code>x_class_mail_item</code>","text":""},{"location":"classes/x_class_mail_item.html#introduction","title":"Introduction","text":"<p>The <code>x_class_mail_item</code> class provides a structured way to prepare and send emails with customizable parameters such as recipients, attachments, and settings. It integrates with an external mail handling class (<code>x_class_mail</code>) to actually send the email.</p> <p>Use the class by including <code>/_framework/classes/x_class_mail_item.php</code>.</p> <p>PHP-Classes</p> <ul> <li><code>x_class_mail</code>: Class and all dependencies required.</li> </ul>"},{"location":"classes/x_class_mail_item.html#methods","title":"Methods","text":""},{"location":"classes/x_class_mail_item.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Description: Initializes the <code>x_class_mail_item</code> instance with an <code>x_class_mail</code> object, which is used to send emails.</p> Parameter Type Description <code>x_class_mail</code> <code>x_class_mail</code> An instance of the <code>x_class_mail</code> class, responsible for sending the email. <p>Returns: - <code>void</code></p>"},{"location":"classes/x_class_mail_item.html#add_attachment","title":"<code>add_attachment(...)</code>","text":"<p>Description: Adds an attachment to the email. The attachment is specified by its path and a name.</p> Parameter Type Description <code>path</code> <code>string</code> The file path to the attachment. <code>name</code> <code>string</code> The name of the attachment as it will appear in the email. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_attachment('/path/to/file.pdf', 'file.pdf');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_attachment","title":"<code>get_attachment(...)</code>","text":"<p>Description: Returns an array of all attachments added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of attachments, each with its path and name. <p>Example Usage: </p><pre><code>$attachments = $mailItem-&gt;get_attachment();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_attachment","title":"<code>clear_attachment(...)</code>","text":"<p>Description: Clears all attachments from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_attachment();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#add_receiver","title":"<code>add_receiver(...)</code>","text":"<p>Description: Adds a recipient to the email.</p> Parameter Type Description <code>mail</code> <code>string</code> The recipient's email address. <code>name</code> <code>string</code> The recipient's name. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_receiver('recipient@example.com', 'Recipient Name');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_receiver","title":"<code>get_receiver(...)</code>","text":"<p>Description: Returns an array of all recipients added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of recipients, each with their email and name. <p>Example Usage: </p><pre><code>$receivers = $mailItem-&gt;get_receiver();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_receiver","title":"<code>clear_receiver(...)</code>","text":"<p>Description: Clears all recipients from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_receiver();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#add_cc","title":"<code>add_cc(...)</code>","text":"<p>Description: Adds a recipient to the CC (carbon copy) list.</p> Parameter Type Description <code>mail</code> <code>string</code> The CC recipient's email address. <code>name</code> <code>string</code> The CC recipient's name. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_cc('cc@example.com', 'CC Name');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_cc","title":"<code>get_cc(...)</code>","text":"<p>Description: Returns an array of all CC recipients added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of CC recipients, each with their email and name. <p>Example Usage: </p><pre><code>$cc = $mailItem-&gt;get_cc();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_cc","title":"<code>clear_cc(...)</code>","text":"<p>Description: Clears all CC recipients from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_cc();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#add_bcc","title":"<code>add_bcc(...)</code>","text":"<p>Description: Adds a recipient to the BCC (blind carbon copy) list.</p> Parameter Type Description <code>mail</code> <code>string</code> The BCC recipient's email address. <code>name</code> <code>string</code> The BCC recipient's name. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_bcc('bcc@example.com', 'BCC Name');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_bcc","title":"<code>get_bcc(...)</code>","text":"<p>Description: Returns an array of all BCC recipients added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of BCC recipients, each with their email and name. <p>Example Usage: </p><pre><code>$bcc = $mailItem-&gt;get_bcc();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_bcc","title":"<code>clear_bcc(...)</code>","text":"<p>Description: Clears all BCC recipients from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_bcc();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#add_setting","title":"<code>add_setting(...)</code>","text":"<p>Description: Adds a setting for the email, such as SMTP parameters or custom headers.</p> Parameter Type Description <code>name</code> <code>string</code> The name of the setting. <code>value</code> <code>mixed</code> The value of the setting. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_setting('smtp_server', 'smtp.example.com');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_setting","title":"<code>get_setting(...)</code>","text":"<p>Description: Returns an array of all settings added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of settings, each with a name and value. <p>Example Usage: </p><pre><code>$settings = $mailItem-&gt;get_setting();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_setting","title":"<code>clear_setting(...)</code>","text":"<p>Description: Clears all settings from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_setting();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#send","title":"<code>send(...)</code>","text":"<p>Description: Sends the email with the configured parameters, including subject, content, recipients, CC, BCC, attachments, and settings.</p> Parameter Type Description <code>subject</code> <code>string</code> The subject of the email. <code>content</code> <code>string</code> The content/body of the email. <p>Returns: - <code>mixed</code> - The return value depends on the <code>mail</code> method of the <code>x_class_mail</code> class. Typically, this might be a boolean indicating success or failure.</p> <p>Example Usage: </p><pre><code>$mailItem-&gt;send('Subject Here', 'Email body content.');\n</code></pre>"},{"location":"classes/x_class_mail_template.html","title":"x_class_mail_template","text":""},{"location":"classes/x_class_mail_template.html#php-class-x_class_mail_template","title":"PHP Class: <code>x_class_mail_template</code>","text":""},{"location":"classes/x_class_mail_template.html#introduction","title":"Introduction","text":"<p>The <code>x_class_mail_template</code> class manages email templates stored in a MySQL database. It supports creation, retrieval, modification, and deletion of email templates with multi-language and section support. Additionally, the class provides mechanisms for content and subject substitution, allowing dynamic customization of email content before sending. Templates can optionally include headers and footers, and the class can be integrated with mailing functionality (e.g., <code>x_class_mail</code>).</p> <p>Use the class by including the file containing it in your project.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-8.x</li> <li>PHP MySQLi or compatible DB wrapper for SQL execution</li> </ul> <p>PHP-Modules</p> <ul> <li>A MySQL-compatible PHP DB handler (custom or like <code>x_class_mysql</code>)</li> </ul>"},{"location":"classes/x_class_mail_template.html#mysql-table","title":"MySQL Table","text":"<p>This class automatically creates and manages a database table for storing email templates. Below is the description of the table structure.</p> <p>The table is automatically created in the constructor if it does not exist.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> Unique identifier for each template <code>name</code> <code>varchar(256)</code> <code>NOT NULL</code> Unique template identifier <code>subject</code> <code>text</code> <code>NULL</code> Template email subject <code>description</code> <code>text</code> <code>NULL</code> Optional description of the template <code>content</code> <code>text</code> <code>DEFAULT NULL</code> Email template body content <code>lang</code> <code>varchar(32)</code> <code>DEFAULT ''</code> Language code key for template variation <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> Logical section or grouping for templates <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Creation timestamp <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> Last modification timestamp, auto-updated Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Unique primary key <code>${table}_unique</code> Unique <code>name</code>, <code>lang</code>, <code>section</code> Ensures template uniqueness per name/lang/section"},{"location":"classes/x_class_mail_template.html#methods","title":"Methods","text":""},{"location":"classes/x_class_mail_template.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes the class with DB connection, table name, section, and language settings.</p> Parameter Type Description Default <code>$mysql</code> object MySQL-compatible DB handler None <code>$table</code> string Database table name for templates None <code>$section</code> string Section/grouping for template scope <code>\"\"</code> <code>$lang</code> string Language code for templates <code>\"\"</code> Return Value When does this return value occur? <code>void</code> Class instance constructed"},{"location":"classes/x_class_mail_template.html#set_header","title":"<code>set_header</code>","text":"<p>Sets global header content for emails.</p> Parameter Type Description <code>$header</code> string Header HTML/text content Return Value When does this return value occur? <code>void</code> Method does not return a value"},{"location":"classes/x_class_mail_template.html#set_footer","title":"<code>set_footer</code>","text":"<p>Sets global footer content for emails.</p> Parameter Type Description <code>$footer</code> string Footer HTML/text content Return Value When does this return value occur? <code>void</code> Method does not return a value"},{"location":"classes/x_class_mail_template.html#set_content","title":"<code>set_content</code>","text":"<p>Sets the full email content and subject, overwriting the current template content.</p> Parameter Type Description <code>$content</code> string Email body content <code>$subject</code> string Email subject line Return Value When does this return value occur? <code>void</code> Sets internal content and subject"},{"location":"classes/x_class_mail_template.html#set_template","title":"<code>set_template</code>","text":"<p>Loads a template by name from the database based on current section and language.</p> Parameter Type Description <code>$name</code> string Template identifier Return Value When does this return value occur? <code>bool</code> <code>true</code> if template found and loaded; otherwise <code>false</code>"},{"location":"classes/x_class_mail_template.html#setup","title":"<code>setup</code>","text":"<p>Creates or updates a mail template in the database.</p> Parameter Type Description Default <code>$name</code> string Unique template name None <code>$subject</code> string Subject text None <code>$content</code> string Email content None <code>$description</code> string Optional description of the template <code>\"\"</code> <code>$overwrite</code> bool Whether to overwrite existing template <code>false</code> <code>$lang</code> string Language override for this setup Current class language Return Value When does this return value occur? <code>int|void</code> Insert ID on new record, or void when updating"},{"location":"classes/x_class_mail_template.html#reset_substitution","title":"<code>reset_substitution</code>","text":"<p>Clears all added text substitutions.</p> Return Value When does this return value occur? <code>void</code> Always"},{"location":"classes/x_class_mail_template.html#add_substitution","title":"<code>add_substitution</code>","text":"<p>Adds a text substitution pair to be applied on email content or subject.</p> Parameter Type Description <code>$name</code> string Placeholder name or text to replace <code>$replace</code> string Replacement text Return Value When does this return value occur? <code>void</code> Always"},{"location":"classes/x_class_mail_template.html#do_substitute","title":"<code>do_substitute</code>","text":"<p>Applies all substitutions on given text.</p> Parameter Type Description <code>$text</code> string Text to process Return Value When does this return value occur? <code>string</code> Text after substitutions applied"},{"location":"classes/x_class_mail_template.html#get_content","title":"<code>get_content</code>","text":"<p>Returns the email content, optionally with substitutions applied.</p> Parameter Type Description Default <code>$substitute</code> bool Whether to apply substitutions <code>false</code> Return Value When does this return value occur? <code>string</code> Email content with or without substitutions"},{"location":"classes/x_class_mail_template.html#get_subject","title":"<code>get_subject</code>","text":"<p>Returns the email subject, optionally with substitutions applied.</p> Parameter Type Description Default <code>$substitute</code> bool Whether to apply substitutions <code>false</code> Return Value When does this return value occur? <code>string</code> Email subject with or without substitutions"},{"location":"classes/x_class_mail_template.html#change","title":"<code>change</code>","text":"<p>Updates an existing template identified by ID.</p> Parameter Type Description Default <code>$id</code> int Template database ID None <code>$name</code> string New name for the template None <code>$subject</code> string New subject text None <code>$content</code> string New email content None <code>$description</code> string Optional description <code>\"\"</code> Return Value When does this return value occur? <code>void|false</code> <code>false</code> if invalid ID, else void"},{"location":"classes/x_class_mail_template.html#name_exists","title":"<code>name_exists</code>","text":"<p>Checks if a template with given name exists in current section and language.</p> Parameter Type Description <code>$name</code> string Template name Return Value When does this return value occur? <code>int|false</code> Returns template ID if exists, else <code>false</code>"},{"location":"classes/x_class_mail_template.html#get_name_by_id","title":"<code>get_name_by_id</code>","text":"<p>Retrieves template name by ID.</p> Parameter Type Description <code>$id</code> int Template ID Return Value When does this return value occur? <code>string|false</code> Template name or <code>false</code> if not found"},{"location":"classes/x_class_mail_template.html#id_exists","title":"<code>id_exists</code>","text":"<p>Checks if a template ID exists in current section and language.</p> Parameter Type Description <code>$id</code> int Template ID Return Value When does this return value occur? <code>bool</code> <code>true</code> if exists, else <code>false</code>"},{"location":"classes/x_class_mail_template.html#id_delete","title":"<code>id_delete</code>","text":"<p>Deletes a template by ID.</p> Parameter Type Description <code>$id</code> int Template ID Return Value When does this return value occur? <code>bool|false</code> Query success or <code>false</code> if invalid ID"},{"location":"classes/x_class_mail_template.html#name_delete","title":"<code>name_delete</code>","text":"<p>Deletes a template by name.</p> Parameter Type Description <code>$name</code> string Template name Return Value When does this return value occur? <code>bool</code> Query success"},{"location":"classes/x_class_mail_template.html#get_full","title":"<code>get_full</code>","text":"<p>Retrieves all information for a template by ID.</p> Parameter Type Description <code>$id</code> int Template ID Return Value When does this return value occur? <code>array|false</code> Associative array of template data or <code>false</code> if not found"},{"location":"classes/x_class_mail_template.html#example","title":"Example","text":"<pre><code>&lt;?php\n// Assuming $db is a MySQL DB wrapper instance\n$mailTemplates = new x_class_mail_template($db, 'mail_templates', 'notifications', 'en');\n\n// Create or update a template\n$mailTemplates-&gt;setup('welcome_email', 'Welcome!', '&lt;p&gt;Hello {{name}}, welcome!&lt;/p&gt;', 'Welcome email template', true);\n\n// Load a template\nif ($mailTemplates-&gt;set_template('welcome_email')) {\n    // Add substitutions\n    $mailTemplates-&gt;add_substitution('{{name}}', 'John Doe');\n\n    // Get processed content\n    $content = $mailTemplates-&gt;get_content(true);\n    $subject = $mailTemplates-&gt;get_subject(true);\n\n    // Use $content and $subject for sending email...\n    echo $subject;\n    echo $content;\n} else {\n    echo \"Template not found.\";\n}\n?&gt;\n</code></pre>"},{"location":"classes/x_class_mysql.html","title":"x_class_mysql","text":""},{"location":"classes/x_class_mysql.html#php-class-x_class_mysql","title":"PHP Class: <code>x_class_mysql</code>","text":""},{"location":"classes/x_class_mysql.html#introduction","title":"Introduction","text":"<p>The <code>x_class_mysql</code> class provides an interface for interacting with a MySQL database. It encapsulates common database operations and includes additional features for error handling and logging.</p> <ul> <li>Error Handling: Errors are managed by the <code>handler</code> method which updates internal error states and logs errors if configured.  </li> <li>Benchmarking: Provides a simple benchmarking system to count operations.  </li> <li>Logging: Allows configuration of logging to both the database and log files, with options to control logging behavior.  </li> <li>Parameter Binding: When using prepared statements, ensure that <code>bindarray</code> is correctly formatted. The <code>type</code> key in each array element specifies the type of data being bound.  </li> </ul> <p>Use the class by including <code>/_framework/classes/x_class_mysql.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> <li><code>session</code>: Required for Benchmarking.</li> </ul>"},{"location":"classes/x_class_mysql.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the table structure used by the MySQL class to log failures if logging is activated. The table is automatically created by the class if necessary. Below is a summary of the columns and keys used in the table, along with their purposes.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each log entry, ensuring that each record can be individually tracked. <code>url</code> <code>varchar(256)</code> <code>DEFAULT NULL</code> Stores the URL related to the log entry, providing context for where the failure occurred. <code>init</code> <code>text</code> <code>NULL</code> Contains initialization data, if available, that might provide additional context about the failure. <code>exception</code> <code>text</code> <code>NULL</code> Logs the text of any exception that was thrown, useful for diagnosing issues. <code>sqlerror</code> <code>text</code> <code>NULL</code> Records the MySQL error message if there was an SQL error, aiding in troubleshooting. <code>output</code> <code>text</code> <code>NULL</code> Stores the output related to the error, which can provide additional details about the failure. <code>success</code> <code>int(1)</code> <code>NULL</code> Indicates the result of the query: <code>1</code> for success, <code>2</code> for error, or <code>NULL</code> if not applicable. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Records the timestamp when the log entry was created, allowing for chronological tracking. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each log entry is uniquely identifiable."},{"location":"classes/x_class_mysql.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_mysql.html#constructors","title":"Constructors","text":"Method/Function Parameters Description <code>__construct</code> <code>($hostname, $username, $password, $database, $port)</code> Initializes a new MySQL connection using the provided credentials and database information. <code>construct</code> - Returns a new instance of <code>x_class_mysql</code> with the same connection parameters. <code>construct_copy</code> - Returns the current instance of <code>x_class_mysql</code>."},{"location":"classes/x_class_mysql.html#status-and-errors","title":"Status and Errors","text":"Method/Function Parameters Description <code>status</code> - Alias for <code>ping()</code>. Checks if the database connection is alive. <code>con</code> - Returns the MySQLi connection object. <code>lastError</code> - Returns the last error that occurred during database operations. <code>fullError</code> - Returns detailed error information. <code>ping</code> - Checks if the MySQL server is reachable. Uses <code>mysqli_ping()</code>. <code>inject</code> <code>$mysqli</code> Injects an external MySQLi connection object. <code>displayError</code> <code>$exit = true, $response_code = 503</code> Displays an error message and optionally exits the script."},{"location":"classes/x_class_mysql.html#benchmarking","title":"Benchmarking","text":"Method/Function Parameters Description <code>benchmark_get</code> - Retrieves the current benchmark count. <code>benchmark_raise</code> <code>$raise = 1</code> Increments the benchmark counter. <code>benchmark_config</code> <code>$bool = false, $preecookie = \"\"</code> Configures benchmarking and session cookie prefix."},{"location":"classes/x_class_mysql.html#logging","title":"Logging","text":"Method/Function Parameters Description <code>logfile_messages</code> <code>$bool = false</code> Enables or disables logging of error messages to a file. <code>log_disable</code> - Disables logging. <code>log_status</code> - Returns whether logging is active. <code>log_enable</code> - Enables logging if the logging table is configured. <code>log_config</code> <code>$table = \"mysqllogging\", $section = \"\", $logall = false</code> Configures logging settings including table name, section, and whether to log all messages. <code>stop_on_error</code> <code>$bool = false</code> Configures whether to stop execution on error. <code>display_on_error</code> <code>$bool = false</code> Configures whether to display errors."},{"location":"classes/x_class_mysql.html#table-functions","title":"Table Functions","text":"Method Name Description Parameters Return Value <code>table_exists</code> Checks if a table exists in the database by trying to select from it. - <code>$tablename</code>: Name of the table to check. Returns the result of the query. <code>true</code> if the table exists, <code>false</code> otherwise. <code>table_delete</code> Deletes (drops) a specified table from the database. - <code>$tablename</code>: Name of the table to delete. Executes the <code>DROP TABLE</code> query and returns the result of the operation. <code>table_create</code> Creates a table with the given name. - <code>$tablename</code>: Name of the table to create. Executes the <code>CREATE TABLE</code> query and returns the result of the operation. <code>auto_increment</code> Sets the auto-increment value for a specified table. - <code>$table</code>: Name of the table.  - <code>$value</code>: The new auto-increment value. Executes the <code>ALTER TABLE</code> query to set auto-increment and returns the result of the operation. <code>table_backup</code> Backs up the structure and optionally the data of a specified table, saving it to a file if provided. - <code>$table</code>: Name of the table to back up.  - <code>$filepath</code> (optional): Path to save the backup file.  - <code>$withdata</code> (optional): Boolean to include table data (default: <code>true</code>).  - <code>$dropstate</code> (optional): Boolean to include <code>DROP TABLE IF EXISTS</code> in backup (default: <code>false</code>). Returns the table structure and data as a string. Optionally writes the backup to a file if <code>$filepath</code> is provided."},{"location":"classes/x_class_mysql.html#database-functions","title":"Database Functions","text":"Method Name Description Parameters Return Value <code>database_delete</code> Deletes (drops) a specified database. - <code>$database</code>: The name of the database to delete. Executes the <code>DROP DATABASE</code> query and returns the result of the operation. <code>database_create</code> Creates a new database with the given name. - <code>$database</code>: The name of the database to create. Executes the <code>CREATE DATABASE</code> query and returns the result of the operation. <code>database_select</code> Selects a specific database for subsequent queries. - <code>$database</code>: The name of the database to select. Returns <code>true</code> if the database is selected successfully, or handles errors and returns <code>false</code> on failure."},{"location":"classes/x_class_mysql.html#transactions","title":"Transactions","text":"Method Name Description Parameters Return Value <code>transaction</code> Starts a database transaction if none is already running. Optionally disables auto-commit. - <code>$autocommit</code>: Boolean flag to set whether auto-commit is enabled (default: <code>false</code>). Returns <code>true</code> if the transaction starts successfully, <code>false</code> if already running, or handles exceptions gracefully. <code>rollback</code> Rolls back the current transaction if one is running. N/A Returns <code>true</code> if rollback is successful, <code>false</code> if no transaction is running, or handles exceptions. <code>transactionStatus</code> Checks whether a transaction is currently active. N/A Returns <code>true</code> if a transaction is running, <code>false</code> otherwise. <code>commit</code> Commits the current transaction if one is running. N/A Returns <code>true</code> if commit is successful, <code>false</code> if no transaction is running, or handles exceptions."},{"location":"classes/x_class_mysql.html#alias-functions","title":"Alias Functions","text":"Method Name Description Parameters Return Value <code>__destruct</code> Destructor method that closes the connection or performs cleanup when the object is destroyed. N/A No return value. The function doesn't perform any operations but is defined to properly destroy the object. <code>escape</code> Escapes a variable to make it safe for use in an SQL query. Handles both simple values and arrays/objects. - <code>$val</code>: The value to escape. Can be a string, object, or array. Returns the escaped string using <code>mysqli_real_escape_string()</code> or serialized object/array (escaped). <code>next_result</code> Advances the result pointer to the next result in a multi-query execution. N/A Returns the result of <code>mysqli_next_result()</code>, or <code>false</code> if an error occurs. <code>store_result</code> Stores the result set from the last query in the multi-query execution. N/A Returns the result set from <code>mysqli_store_result()</code>, or <code>false</code> on failure. <code>more_results</code> Checks if there are more results available in the multi-query execution. N/A Returns the result of <code>mysqli_more_results()</code>, or <code>false</code> on failure. <code>fetch_array</code> Fetches a result row as an associative array, numeric array, or both. - <code>$result</code>: The result set resource returned from a query. Returns the result row as an array, or <code>false</code> if an error occurs. <code>fetch_object</code> Fetches a result row as an object. - <code>$result</code>: The result set resource returned from a query. Returns the result row as an object, or <code>false</code> on failure. <code>free_result</code> Frees the memory associated with a result set. - <code>$result</code>: The result set resource to free. Returns <code>true</code> on success, or <code>false</code> on failure. <code>use_result</code> Initiates retrieval of a result set from a query that is to be retrieved row by row. N/A Returns the result of <code>mysqli_use_result()</code>, or <code>false</code> on failure. <code>free_all</code> Frees all result sets and fetches the remaining results in a multi-query execution. N/A Returns an array of all results fetched from the multi-query execution."},{"location":"classes/x_class_mysql.html#multi-query","title":"Multi Query","text":"Method Name Description Parameters Return Value <code>multi_query</code> Executes a multi-query SQL string. Allows executing multiple SQL statements in a single query. - <code>$query</code>: The SQL query string containing multiple statements. Returns the result of <code>multi_query()</code> or, if an exception occurs, handles it and returns <code>false</code>. <code>multi_query_file</code> Executes a multi-query SQL from a file. Reads an SQL file and runs the queries contained within it. - <code>$file</code>: The path to the file containing the SQL queries. Returns the result of the <code>multi_query()</code> operation on the SQL file's content or <code>false</code> if the file doesn't exist."},{"location":"classes/x_class_mysql.html#row-functions","title":"Row Functions","text":"Method Name Description Parameters Return Value <code>row_element_increase</code> Increases a numeric field in a specified table by a given value (defaults to 1). - <code>$table</code>: The table name.  - <code>$nameidfield</code>: The column name used for identifying the row.  - <code>$id</code>: The identifier value for the row.  - <code>$increasefield</code>: The field to increase.  - <code>$increasevalue</code>: Amount to add. Returns <code>false</code> if <code>$id</code> or <code>$increasevalue</code> is not numeric; otherwise, it returns the result of the SQL <code>UPDATE</code> query. <code>row_element_decrease</code> Decreases a numeric field in a specified table by a given value (defaults to 1). - <code>$table</code>: The table name.  - <code>$nameidfield</code>: The column name used for identifying the row.  - <code>$id</code>: The identifier value for the row.  - <code>$decreasefield</code>: The field to decrease.  - <code>$decreasevalue</code>: Amount to subtract. Returns <code>false</code> if <code>$id</code> or <code>$decreasevalue</code> is not numeric; otherwise, it returns the result of the SQL <code>UPDATE</code> query. <code>row_get</code> Retrieves an entire row from a specified table based on the row ID. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$row</code>: The column name used to locate the row (default is <code>\"id\"</code>). Returns the row data as an array. <code>row_element_get</code> Retrieves a specific element from a row in the table. If the element is not found, it returns a fallback value. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$elementrow</code>: The column from which to fetch the value.  - <code>$fallback</code>: The value to return if the element isn't found.  - <code>$row</code>: Identifier column (default: <code>\"id\"</code>). Returns the value of the specified column or <code>$fallback</code> if not found. <code>row_element_change</code> Changes the value of a specific column in a row. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$element</code>: The new value to set.  - <code>$elementrow</code>: The column to change.  - <code>$row</code>: Identifier column (default: <code>\"id\"</code>). Returns the result of the SQL <code>UPDATE</code> query. <code>row_exist</code> Checks if a row with a specific ID exists in the table. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$row</code>: The column to match for existence (default: <code>\"id\"</code>). Returns <code>true</code> if the row exists, otherwise <code>false</code>. <code>rows_get</code> Retrieves multiple rows from the table where the column matches the specified value. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the rows.  - <code>$row</code>: The column name used for filtering rows (default: <code>\"id\"</code>). Returns an array of rows that match the condition. <code>row_del</code> Deletes a row in the specified table based on the row's ID. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$row</code>: The column to identify the row (default: <code>\"id\"</code>). Returns the result of the SQL <code>DELETE</code> query."},{"location":"classes/x_class_mysql.html#private-methods","title":"Private Methods","text":"Method/Function Parameters Description <code>log</code> <code>$output, $sqlerror, $exception, $init, $boolsuccess, $nolog = false</code> Logs the error details to the database or file if logging is enabled. <code>handler</code> <code>$excecution, $exception, $init, $nolog = false</code> Handles the execution and error logging."},{"location":"classes/x_class_mysql.html#primary","title":"Primary","text":""},{"location":"classes/x_class_mysql.html#select","title":"<code>select(...)</code>","text":"<p>Retrieves data from the database based on the provided query. It supports fetching single or multiple rows.</p> Method <code>select</code> Parameters <code>string $query</code>  SQL query to execute  <code>bool $multiple</code>  Whether to fetch multiple rows (default: <code>false</code>)  <code>mixed $bindarray</code>  Array of binding parameters or <code>false</code> for direct query  <code>int $fetch_type</code>  Type of result array (e.g., <code>MYSQLI_ASSOC</code>, <code>MYSQLI_NUM</code>) Return Value Returns an array of results if successful; <code>false</code> if failed"},{"location":"classes/x_class_mysql.html#query","title":"<code>query(...)</code>","text":"<p>Executes a general query (e.g., INSERT, DELETE, etc.) and returns the result set.</p> Method <code>query</code> Parameters <code>string $query</code>  SQL query to execute  <code>mixed $bindarray</code>  Array of binding parameters or <code>false</code> for direct query Return Value Returns the result set object if successful; <code>false</code> if failed"},{"location":"classes/x_class_mysql.html#update","title":"<code>update(...)</code>","text":"<p>Executes an update statement and returns the number of affected rows.</p> Method <code>update</code> Parameters <code>string $query</code>  SQL query to execute  <code>mixed $bindarray</code>  Array of binding parameters or <code>false</code> for direct query Return Value Number of affected rows if successful; <code>false</code> if failed"},{"location":"classes/x_class_mysql.html#insert","title":"<code>insert(...)</code>","text":"<p>Inserts a new record into a specified table and returns the ID of the inserted record.</p> Method <code>insert</code> Parameters <code>string $table</code>  Name of the table  <code>array $array</code>  Associative array of field names and values  <code>mixed $bindarray</code>  Array of binding parameters or <code>false</code> for direct query Return Value Inserted ID if successful; <code>false</code> if failed"},{"location":"classes/x_class_mysql.html#binding-information","title":"Binding Information","text":"<p>If <code>$bindarray</code> is provided for secure data transmission via mysql buffer:</p> <code>bindarray</code> Format Description <code>Array[X][\"value\"]</code> Value to be bound to the query <code>Array[X][\"type\"]</code> Data type of the value (<code>s</code> = string, <code>i</code> = integer, <code>d</code> = double, <code>b</code> = blob)"},{"location":"classes/x_class_mysql_item.html","title":"x_class_mysql_item","text":""},{"location":"classes/x_class_mysql_item.html#php-class-x_class_mysql_item","title":"PHP Class: <code>x_class_mysql_item</code>","text":""},{"location":"classes/x_class_mysql_item.html#introduction","title":"Introduction","text":"<p>The <code>x_class_mysql_item</code> class is designed to manage database records efficiently. It provides a convenient way to interact with a single database item by abstracting common operations such as retrieving, updating, and deleting records based on a specified primary key. This class simplifies CRUD (Create, Read, Update, Delete) operations, especially when dealing with single-row queries in a MySQL database.</p> <ul> <li>Parameter Binding: The <code>update()</code> method uses parameter binding to prevent SQL injection, making it a secure option for dynamic queries.  </li> <li>Flexible ID Field: The class allows for the use of custom ID fields through the <code>$id_field</code> parameter, enabling interaction with tables that use non-standard primary keys.</li> </ul> <p>Use the class by including <code>/_framework/classes/x_class_mysql_item.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_mysql_item.html#methods","title":"Methods","text":""},{"location":"classes/x_class_mysql_item.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Default Description <code>$mysql</code> Object MySQLi connection object. <code>$tablename</code> String The name of the table to interact with. <code>$id</code> Mixed The ID of the current item (can be numeric or string). <code>$id_field</code> String <code>\"id\"</code> The name of the ID field in the table. <p>Description: This constructor initializes the <code>x_class_mysql_item</code> object with a MySQL connection, the table name, the ID of the item, and the ID field name. The ID field defaults to <code>\"id\"</code> but can be customized as needed.</p>"},{"location":"classes/x_class_mysql_item.html#get","title":"<code>get(...)</code>","text":"Parameter Type Description <code>$field</code> String The name of the field to retrieve. Return Type Description Mixed Returns the value of the specified field or <code>false</code> if the field does not exist. <p>Description: Fetches the value of a specific field for the current item based on the provided ID. If the item or field does not exist, it returns <code>false</code>.</p>"},{"location":"classes/x_class_mysql_item.html#get_array","title":"<code>get_array(...)</code>","text":"Return Type Description Array Returns an associative array of the current item's fields and values. <p>Description: Retrieves the entire row for the current item as an associative array, with the field names as keys and their corresponding values as the array values. If the item is not found, it returns <code>false</code>.</p>"},{"location":"classes/x_class_mysql_item.html#update","title":"<code>update(...)</code>","text":"Parameter Type Description <code>$field</code> String The field to update. <code>$value</code> Mixed The new value to set for the field. Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Updates a specific field of the current item with a new value. This method uses parameter binding to protect against SQL injection.</p>"},{"location":"classes/x_class_mysql_item.html#update_null","title":"<code>update_null(...)</code>","text":"Parameter Type Description <code>$field</code> String The field to set to <code>NULL</code>. Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Sets a specific field of the current item to <code>NULL</code>. This operation is useful for resetting fields that may need to have their values removed.</p>"},{"location":"classes/x_class_mysql_item.html#delete","title":"<code>delete(...)</code>","text":"Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Deletes the current item from the database based on its ID. This method removes the row corresponding to the ID in the specified table.</p>"},{"location":"classes/x_class_mysql_item.html#clone","title":"<code>clone(...)</code>","text":"Parameter Type Description <code>$id</code> Mixed The ID of the item to clone. Return Type Description Object Returns a new <code>x_class_mysql_item</code> instance for the specified ID. <p>Description: Creates and returns a new <code>x_class_mysql_item</code> object that references another item in the same table but with a different ID. This allows for easy manipulation of different items without needing to reinitialize the class.</p>"},{"location":"classes/x_class_perm.html","title":"x_class_perm","text":""},{"location":"classes/x_class_perm.html#php-class-x_class_perm","title":"PHP Class: <code>x_class_perm</code>","text":""},{"location":"classes/x_class_perm.html#introduction","title":"Introduction","text":"<p>The <code>x_class_perm</code> class provides a comprehensive system for managing permissions associated with references in a database. It supports creating tables, retrieving, adding, and removing permissions for specific references.</p> <p>Use the class by including <code>/_framework/classes/x_class_perm.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_perm.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the table structure used by the Permissions class to store permissions for various objects. The table is automatically created by the class if required for its functionality. Below is a summary of the columns and keys used in the table, along with their purposes.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each permission entry, ensuring that each record can be individually tracked. <code>ref</code> <code>int(10)</code> <code>NOT NULL</code> A reference number associated with the permission, used to link the permission to a specific object or entity. <code>content</code> <code>text</code> <code>NOT NULL</code> Contains the permission data in serialized or structured format, defining the access rights. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the permission entry was created. Automatically set upon insertion. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification to the permission entry. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each permission entry is uniquely identifiable. <code>x_class_perm</code> Unique <code>ref</code>, <code>section</code> Ensures that each combination of reference and section is unique, preventing duplicate permissions for the same section."},{"location":"classes/x_class_perm.html#methods","title":"Methods","text":""},{"location":"classes/x_class_perm.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Initializes an instance of the <code>x_class_perm</code> class and creates the table if it does not exist.</p> Parameter Type Description <code>$mysql</code> <code>object</code> An instance of the MySQL class used for database operations. <code>$tablename</code> <code>string</code> The name of the table where permissions are stored. <code>$section</code> <code>string</code> Optional section identifier for permissions. Default is an empty string."},{"location":"classes/x_class_perm.html#create_table","title":"<code>create_table(...)</code>","text":"<p>Creates the permissions table if it does not exist.</p> Parameter Type Description None - Creates a table with columns for ID, reference, content, section, creation, and modification timestamps."},{"location":"classes/x_class_perm.html#get_perm","title":"<code>get_perm(...)</code>","text":"<p>Retrieves permissions for a specific reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to get permissions for. <p>Returns: <code>array</code> - An array of permissions associated with the reference.</p>"},{"location":"classes/x_class_perm.html#has_perm","title":"<code>has_perm(...)</code>","text":"<p>Checks if a specific permission is assigned to a reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to check permissions for. <code>$permname</code> <code>string</code> The name of the permission to check. <p>Returns: <code>bool</code> - <code>true</code> if the permission exists, <code>false</code> otherwise.</p>"},{"location":"classes/x_class_perm.html#add_perm","title":"<code>add_perm(...)</code>","text":"<p>Adds a new permission to a reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to add a permission to. <code>$permname</code> <code>string</code> The name of the permission to add. <p>Returns: <code>bool</code> - Always returns <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#check_perm","title":"<code>check_perm(...)</code>","text":"<p>Checks if a reference has multiple permissions.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to check permissions for. <code>$array</code> <code>array</code> Array of permission names to check. <code>$or</code> <code>bool</code> Optional. If <code>true</code>, checks if any permission matches; if <code>false</code>, checks if all match. Default is <code>false</code>. <p>Returns: <code>bool</code> - <code>true</code> if the condition is met based on the <code>$or</code> parameter.</p>"},{"location":"classes/x_class_perm.html#set_perm","title":"<code>set_perm(...)</code>","text":"<p>Sets permissions for a specific reference. </p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to set permissions for. <code>$array</code> <code>array</code> The array of permissions to set. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#remove_perm","title":"<code>remove_perm(...)</code>","text":"<p>Removes a specific permission from a reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to remove a permission from. <code>$permname</code> <code>string</code> The name of the permission to remove. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#remove_perms","title":"<code>remove_perms(...)</code>","text":"<p>Removes all permissions for a specific reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to remove all permissions for. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#delete_ref","title":"<code>delete_ref(...)</code>","text":"<p>Deletes a reference and its associated permissions from the table.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to delete from the table. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#item","title":"<code>item(...)</code>","text":"<p>Gets an instance of <code>x_class_perm_item</code> for a specific reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier for which to get an item. <p>Returns: <code>x_class_perm_item</code> - An instance of the <code>x_class_perm_item</code> class with permissions for the specified reference.</p>"},{"location":"classes/x_class_perm_item.html","title":"x_class_perm_item","text":""},{"location":"classes/x_class_perm_item.html#php-class-x_class_perm_item","title":"PHP Class: <code>x_class_perm_item</code>","text":""},{"location":"classes/x_class_perm_item.html#introduction","title":"Introduction","text":"<p>The <code>x_class_perm_item</code> class provides functionality for managing permissions associated with a reference in a database table. It supports operations such as adding, removing, checking permissions, and managing the permissions of a specific reference.</p> <p>Use the class by including <code>/_framework/classes/x_class_perm_item.php</code>.</p> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> <li><code>x_class_perm</code>: Parent Class.</li> </ul>"},{"location":"classes/x_class_perm_item.html#methods","title":"Methods","text":""},{"location":"classes/x_class_perm_item.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Initializes an instance of the <code>x_class_perm_item</code> class.</p> Parameter Type Description <code>$mysql</code> <code>object</code> An instance of the MySQL class used for database operations. <code>$tablename</code> <code>string</code> The name of the table where permissions are stored. <code>$section</code> <code>string</code> The section identifier for permissions. <code>$ref</code> <code>string</code> The reference identifier for which permissions are managed. <code>$permissions</code> <code>array</code> Optional array of initial permissions. Default is an empty array."},{"location":"classes/x_class_perm_item.html#refresh","title":"<code>refresh(...)</code>","text":"<p>Updates the local permissions array by fetching data from the database.</p> Parameter Type Description None - Fetches permissions from the database and updates the local <code>permissions</code> array."},{"location":"classes/x_class_perm_item.html#has_perm","title":"<code>has_perm(...)</code>","text":"<p>Checks if a specific permission is present in the current permissions.</p> Parameter Type Description <code>$permname</code> <code>string</code> The name of the permission to check. <p>Returns: <code>bool</code> - <code>true</code> if the permission exists, <code>false</code> otherwise.</p>"},{"location":"classes/x_class_perm_item.html#add_perm","title":"<code>add_perm(...)</code>","text":"<p>Adds a new permission to the current set of permissions.</p> Parameter Type Description <code>$permname</code> <code>string</code> The name of the permission to add. <p>Returns: <code>bool</code> - Always returns <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm_item.html#check_perm","title":"<code>check_perm(...)</code>","text":"<p>Checks if the current permissions satisfy a set of conditions.</p> Parameter Type Description <code>$array</code> <code>array</code> Array of permission names to check. <code>$or</code> <code>bool</code> Optional. If <code>true</code>, checks if any permission matches; if <code>false</code>, checks if all match. Default is <code>false</code>. <p>Returns: <code>bool</code> - <code>true</code> if the condition is met based on the <code>$or</code> parameter.</p>"},{"location":"classes/x_class_perm_item.html#remove_perm","title":"<code>remove_perm(...)</code>","text":"<p>Removes a specific permission from the current set of permissions.</p> Parameter Type Description <code>$permname</code> <code>string</code> The name of the permission to remove. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm_item.html#set_perm","title":"<code>set_perm(...)</code>","text":"<p>Updates or inserts permissions for the reference in the database.</p> Parameter Type Description <code>$ref</code> <code>string</code> The reference identifier. <code>$array</code> <code>array</code> The array of permissions to set. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm_item.html#remove_perms","title":"<code>remove_perms(...)</code>","text":"<p>Removes all permissions associated with the reference.</p> Parameter Type Description None - Removes all permissions for the current reference. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm_item.html#delete_ref","title":"<code>delete_ref(...)</code>","text":"<p>Deletes the reference and its associated permissions from the database.</p> Parameter Type Description None - Deletes the record for the current reference. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_redis.html","title":"x_class_redis","text":""},{"location":"classes/x_class_redis.html#php-class-x_class_redis","title":"PHP Class: <code>x_class_redis</code>","text":""},{"location":"classes/x_class_redis.html#introduction","title":"Introduction","text":"<p>The <code>x_class_redis</code> class is a wrapper for working with a Redis database, providing methods to connect, check the connection, and perform operations like storing and retrieving strings and lists. It logs errors to the PHP error log if the connection fails and supports optional key prefixing with <code>$pre</code> to prevent collisions. Redis methods such as <code>set</code>, <code>get</code>, <code>lpush</code>, and <code>lrange</code> are called directly on the Redis instance, so the Redis extension must support them.</p> <p>Use the class by including <code>/_framework/classes/x_class_redis.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>Redis</code>: The PHP Redis extension must be installed and enabled.                     </li> </ul>"},{"location":"classes/x_class_redis.html#methods","title":"Methods","text":""},{"location":"classes/x_class_redis.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes a new Redis connection using the specified host and port, with an optional prefix for keys.</p> Parameter Type Description Default <code>$host</code> string The Redis server host address. None <code>$port</code> int The Redis server port. None <code>$pre</code> string Optional prefix for Redis keys. \"\" Return Value When does this return value occur? <code>void</code> This is a constructor and does not return a value."},{"location":"classes/x_class_redis.html#valid","title":"<code>valid</code>","text":"<p>Checks if the Redis connection is valid.</p> Parameter Type Description Default None \u2014 This method takes no parameters. \u2014 Return Value When does this return value occur? <code>true</code> When the Redis connection is valid. <code>false</code> When the Redis connection is invalid."},{"location":"classes/x_class_redis.html#redis","title":"<code>redis</code>","text":"<p>Returns the Redis connection instance if valid, otherwise returns <code>false</code>.</p> Parameter Type Description Default None \u2014 This method takes no parameters. \u2014 Return Value When does this return value occur? <code>Redis</code> Returns the Redis connection instance when the connection is valid. <code>false</code> Returns <code>false</code> when the Redis connection is invalid."},{"location":"classes/x_class_redis.html#ping","title":"<code>ping</code>","text":"<p>Pings the Redis server to check if the connection is still alive.</p> Parameter Type Description Default None \u2014 This method takes no parameters. \u2014 Return Value When does this return value occur? <code>string</code> Returns the server's response to the ping command when the connection is valid. <code>false</code> Returns <code>false</code> when the Redis connection is invalid."},{"location":"classes/x_class_redis.html#keys","title":"<code>keys</code>","text":"<p>Retrieves keys from Redis that match a given prefix and suffix.</p> Parameter Type Description Default <code>$pre</code> string The prefix to filter keys. <code>false</code> <code>$after</code> string The suffix to filter keys. \"\" Return Value When does this return value occur? <code>array</code> Returns an array of matching keys from Redis when the connection is valid. <code>false</code> Returns <code>false</code> if the Redis connection is invalid or the parameters are incorrect."},{"location":"classes/x_class_redis.html#add_string","title":"<code>add_string</code>","text":"<p>Adds a string value to Redis with the specified name.</p> Parameter Type Description Default <code>$name</code> string The name (key) of the string to be added to Redis. None <code>$value</code> string The value (string) to be stored in Redis. None Return Value When does this return value occur? <code>bool</code> Returns <code>true</code> if the string is successfully added to Redis. <code>false</code> Returns <code>false</code> if the Redis connection is invalid or the parameters are incorrect."},{"location":"classes/x_class_redis.html#add_list","title":"<code>add_list</code>","text":"<p>Adds a list of values to Redis under the specified name.</p> Parameter Type Description Default <code>$name</code> string The name (key) of the list to be added to Redis. None <code>$value</code> array An array of values to be added to the list in Redis. None Return Value When does this return value occur? <code>bool</code> Returns <code>true</code> if the values are successfully added to Redis. <code>false</code> Returns <code>false</code> if the Redis connection is invalid or the parameters are incorrect."},{"location":"classes/x_class_redis.html#get_string","title":"<code>get_string</code>","text":"<p>Retrieves a string value from Redis based on the given name.</p> Parameter Type Description Default <code>$name</code> string The name (key) of the string to be retrieved from Redis. None Return Value When does this return value occur? <code>string</code> Returns the stored string value from Redis when the connection is valid. <code>false</code> Returns <code>false</code> if the Redis connection is invalid or the parameter is incorrect."},{"location":"classes/x_class_redis.html#get_list","title":"<code>get_list</code>","text":"<p>Retrieves a range of values from a Redis list based on the specified name, start, and end indexes.</p> Parameter Type Description Default <code>$name</code> string The name (key) of the list to be retrieved from Redis. None <code>$start</code> int The starting index of the range to retrieve. None <code>$end</code> int The ending index of the range to retrieve. None Return Value When does this return value occur? <code>array</code> Returns an array of values from the specified range in the list if the connection is valid. <code>false</code> Returns <code>false</code> if the Redis connection is invalid or the parameters are incorrect."},{"location":"classes/x_class_redis.html#example","title":"Example","text":"<pre><code>&lt;?php\n// Example usage of the x_class_redis class\n\n// Step 1: Initialize the x_class_redis class with Redis server details\n$host = '127.0.0.1'; // Redis server host\n$port = 6379;         // Redis server port\n$redisClient = new x_class_redis($host, $port);\n\n// Step 2: Check if the Redis connection is valid\nif ($redisClient-&gt;valid()) {\n    echo \"Redis connection is valid.\\n\";\n} else {\n    echo \"Failed to connect to Redis.\\n\";\n}\n\n// Step 3: Add a string value to Redis\n$redisClient-&gt;add_string('username', 'john_doe');\necho \"Added string 'username' =&gt; 'john_doe' to Redis.\\n\";\n\n// Step 4: Retrieve the string value from Redis\n$username = $redisClient-&gt;get_string('username');\necho \"Retrieved 'username' from Redis: \" . $username . \"\\n\";\n\n// Step 5: Add a list of values to Redis\n$redisClient-&gt;add_list('user_list', ['alice', 'bob', 'charlie']);\necho \"Added values to the 'user_list' in Redis.\\n\";\n\n// Step 6: Retrieve a range of values from the Redis list\n$userList = $redisClient-&gt;get_list('user_list', 0, -1); // Get all values from the list\necho \"Retrieved 'user_list' from Redis: \" . implode(', ', $userList) . \"\\n\";\n\n// Step 7: Ping the Redis server to check if the connection is alive\n$pingResponse = $redisClient-&gt;ping();\necho \"Redis server ping response: \" . $pingResponse . \"\\n\";\n\n// Step 8: Retrieve keys from Redis based on a prefix\n$keys = $redisClient-&gt;keys('user_*'); // Get all keys starting with \"user_\"\necho \"Keys with 'user_' prefix in Redis: \" . implode(', ', $keys) . \"\\n\";\n?&gt;\n</code></pre>"},{"location":"classes/x_class_referer.html","title":"x_class_referer","text":""},{"location":"classes/x_class_referer.html#php-class-x_class_referer","title":"PHP Class: <code>x_class_referer</code>","text":""},{"location":"classes/x_class_referer.html#introduction","title":"Introduction","text":"<p>The <code>x_class_referer</code> class is designed to manage and track referer URLs for websites. It interacts with a MySQL database to store and update information about incoming traffic, including the referer URL, site URL, and associated metadata.</p> <ul> <li>URL Preparation: The method <code>prepareUrl()</code> is used internally to clean up the referer URL by removing query parameters, protocols (<code>http://</code>, <code>https://</code>), and <code>www.</code> prefix.  </li> <li>Database Table: The <code>create_table()</code> method ensures the database table structure is set up with columns for referer URL, site URL, hit count, and metadata.  </li> </ul> <p>The class assumes that the <code>x_class_mysql</code> class handles errors related to database operations. Ensure that appropriate error handling is implemented in the <code>x_class_mysql</code> class.</p> <p>Use the class by including <code>/_framework/classes/x_class_referer.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_referer.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the table structure used by the Referer class to log referer information. The table is automatically created by the class if needed. Below is a summary of the columns and keys used in the table, along with their purposes.</p> <p>The table will be automatically installed upon constructor execution.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each referer log entry, ensuring that each record can be individually tracked. <code>full_url</code> <code>varchar(256)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> Stores the full URL of the referer, identifying the source of the traffic. <code>site_url</code> <code>varchar(256)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> Contains the URL of the site where the referer is located, providing context to the referer. <code>hits</code> <code>int(10)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> Records the number of hits or visits from the referer URL, useful for tracking traffic volume. <code>section</code> <code>varchar(128)</code> <code>NOT NULL</code>, <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Captures the date and time when the referer log entry was created. Automatically set upon insertion. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> Logs the date and time of the last modification to the entry. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each referer log entry is uniquely identifiable. <code>x_class_referer</code> Unique <code>full_url</code>, <code>section</code>, <code>site_url</code> Ensures that each combination of <code>full_url</code>, <code>section</code>, and <code>site_url</code> is unique, preventing duplicate entries for the same referer."},{"location":"classes/x_class_referer.html#methods","title":"Methods","text":""},{"location":"classes/x_class_referer.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$mysql</code> Object An instance of the MySQL class for database operations. <code>$table</code> String The name of the MySQL table to use. <code>$refurlnowww</code> String The URL to exclude from tracking. <p>Description: Initializes the class with the given MySQL instance, table name, and referer URL. It also checks if the table exists and creates it if necessary.</p>"},{"location":"classes/x_class_referer.html#enabled","title":"<code>enabled(...)</code>","text":"Parameter Type Default Description <code>$bool</code> Bool <code>true</code> Whether referer tracking is enabled or disabled. <p>Description: Enables or disables the referer tracking based on the boolean value provided.</p>"},{"location":"classes/x_class_referer.html#get_array","title":"<code>get_array(...)</code>","text":"Return Type Description Array An associative array containing all rows from the database table. <p>Description: Fetches all records from the MySQL table as an associative array.</p>"},{"location":"classes/x_class_referer.html#execute","title":"<code>execute(...)</code>","text":"Parameter Type Default Description <code>$section</code> String <code>\"\"</code> The section to categorize the referer URL. <p>Description: Processes the current HTTP referer. If the referer is not the same as the excluded URL and not empty, it updates the hit count or inserts a new record into the database. It also checks if the referer URL contains query parameters and cleans it before storing.</p> <p>Return Value: Returns <code>true</code> upon successful execution.</p>"},{"location":"classes/x_class_table.html","title":"x_class_table","text":""},{"location":"classes/x_class_table.html#php-class-x_class_table","title":"PHP Class: <code>x_class_table</code>","text":""},{"location":"classes/x_class_table.html#introduction","title":"Introduction","text":"<p>The <code>x_class_table</code> class is a PHP utility designed for easy manipulation and management of database tables. It facilitates creating, editing, deleting, and displaying records through a straightforward API. The class is intended for developers who need to handle these operations consistently and securely, incorporating CSRF protection.</p> <ul> <li>CSRF Handling: All <code>exec_*</code> methods incorporate CSRF protection using <code>x_class_csrf</code>.  </li> <li>Array Configurations: Fields must be configured properly in the <code>$create</code> and <code>$edit</code> arrays using <code>config_array()</code>.  </li> </ul> <p>The <code>x_class_table</code> class provides methods to create, edit, delete, and display data from a MySQL table. It includes automatic CSRF protection and a flexible structure for handling different types of data inputs.</p> <p>Use the class by including <code>/_framework/classes/x_class_table.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> <li><code>x_class_csrf</code>: Handles CSRF protection.</li> </ul>"},{"location":"classes/x_class_table.html#constructor","title":"Constructor","text":"<pre><code>function __construct($mysql, $table_name, $id = false, $id_field = \"id\")\n</code></pre> Parameter Type Description <code>$mysql</code> object MySQL connection object (e.g., MySQLi instance). <code>$table_name</code> string The name of the database table to operate on. <code>$id</code> mixed (Optional) The ID of the current record (default: <code>false</code>). <code>$id_field</code> string (Optional) The name of the ID field in the table (default: <code>\"id\"</code>). <p>Special Notes: - If <code>$id</code> is provided, the class will load an existing record. Otherwise, it operates on new records. - The CSRF protection is initialized for each instance with a unique identifier.</p>"},{"location":"classes/x_class_table.html#methods","title":"Methods","text":""},{"location":"classes/x_class_table.html#exec_delete","title":"<code>exec_delete(...)</code>","text":"<p>Deletes a record from the table based on the submitted form data.</p> Parameter Type Description <code>$ovr_csrf</code> boolean Whether to override CSRF protection (default: <code>false</code>). <p>Returns: <code>\"deleted\"</code> if the record is successfully deleted, <code>\"csrf\"</code> if CSRF validation fails.</p>"},{"location":"classes/x_class_table.html#config_rel_url","title":"<code>config_rel_url(...)</code>","text":"<p>Configures the relative URL used in forms for this instance.</p> Parameter Type Description <code>$rel_url</code> string The URL to which forms will be submitted."},{"location":"classes/x_class_table.html#config_array","title":"<code>config_array(...)</code>","text":"<p>Sets up the creation and editing arrays used in forms.</p> Parameter Type Description <code>$create</code> array The array defining the fields for creation. <code>$edit</code> array The array defining the fields for editing."},{"location":"classes/x_class_table.html#exec_edit","title":"<code>exec_edit(...)</code>","text":"<p>Processes and updates a record based on the edit form submission.</p> <p>Returns: <code>\"edited\"</code> if the record is successfully edited, <code>\"csrf\"</code> if CSRF validation fails.</p>"},{"location":"classes/x_class_table.html#exec_create","title":"<code>exec_create(...)</code>","text":"<p>Creates a new record based on the submitted form data.</p> <p>Returns: <code>\"created\"</code> if the record is successfully created, <code>\"csrf\"</code> if CSRF validation fails.</p>"},{"location":"classes/x_class_table.html#spawn_return","title":"<code>spawn_return(...)</code>","text":"<p>Displays a message box indicating the result of the last operation.</p> Parameter Type Description <code>$deleted</code> string Message to display if a record was deleted. <code>$csrf</code> string Message to display if CSRF validation fails. <code>$edited</code> string Message to display if a record was edited. <code>$created</code> string Message to display if a record was created."},{"location":"classes/x_class_table.html#spawn_create","title":"<code>spawn_create(...)</code>","text":"<p>Generates a form for creating a new record.</p> Parameter Type Description <code>$button_name</code> string Text for the submit button (default: <code>\"Create Item\"</code>). <code>$button_class</code> string CSS classes for the submit button (default: <code>\"\"</code>). <code>$add_info</code> array Additional information for customizing the form."},{"location":"classes/x_class_table.html#spawn_edit","title":"<code>spawn_edit(...)</code>","text":"<p>Generates a form for editing an existing record.</p> Parameter Type Description <code>$button_name</code> string Text for the submit button (default: <code>\"Edit Item\"</code>). <code>$button_class</code> string CSS classes for the submit button (default: <code>\"\"</code>). <code>$add_info</code> array Additional information for customizing the form."},{"location":"classes/x_class_table.html#spawn_table","title":"<code>spawn_table(...)</code>","text":"<p>Displays a table with data from the database.</p> Parameter Type Description <code>$title_array</code> array Column headers for the table. <code>$value_array</code> array Data rows to be displayed. <code>$editing</code> mixed Enables edit buttons if set (default: <code>false</code>). <code>$deleting</code> mixed Enables delete buttons if set (default: <code>false</code>). <code>$creating</code> mixed Displays a \"Create New\" button if set (default: <code>false</code>). <code>$action_column</code> string Text for the action column header (default: <code>\"Action\"</code>). <code>$classes</code> string CSS classes for styling the table. <code>$add_info</code> array Additional information for customizing the table."},{"location":"classes/x_class_user.html","title":"x_class_user","text":""},{"location":"classes/x_class_user.html#php-class-x_class_user","title":"PHP Class: <code>x_class_user</code>","text":""},{"location":"classes/x_class_user.html#introduction","title":"Introduction","text":"<p>The <code>x_class_user</code> PHP class is a versatile and robust solution designed for seamless integration of user management into web projects. As a core component of the Bugfish Framework, it offers essential features for managing user sessions, authentication, and profile customization.</p> <p>Use the class by including <code>/_framework/classes/x_class_user.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.  </li> <li><code>session</code>: PHP sessions must be enabled and started before CSRF protection can function correctly.</li> <li><code>openssl</code>: Used for cryptographic functions, such as token generation.  </li> <li><code>mbstring</code>: Required for handling multibyte character encodings.  </li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_user.html#key-features","title":"Key Features","text":"Category Features User Registration and Authentication - Secure password hashing and persistent authentication via cookies- Efficient session management for consistent user experience Profile Customization - Supports user groups and additional profile fields- Manages user-specific settings Session Management - Integrates PHP sessions with MySQL for reliable session handling Security Measures - Protects against SQL injection (not a full security guarantee) User Activity Management - Handles account activation via email codes- Supports password recovery and secure login procedures Multi-Login Control and Login Flexibility - Option to enable or disable multi-login per user- Configurable login using either username or email Reference Management - Manages and resets internal references for clean user operations"},{"location":"classes/x_class_user.html#table-structure","title":"Table Structure","text":"<p>Tables will be installed automatically upon initialization.</p> <p>Users Table</p> Column Name Data Type Nullable Default Value Comment id int No AUTO_INCREMENT Unique ID user_name varchar(512) Yes 'undefined' User login name user_initial int(1) Yes 0 1 if this user is the initial created user user_pass varchar(512) Yes NULL User password user_mail varchar(512) Yes NULL User email user_2fa text Yes NULL User 2FA secret key user_shadow varchar(512) Yes NULL Store for email renewals user_rank int(9) Yes NULL User rank user_confirmed tinyint(1) Yes 0 User activation status req_activation datetime Yes NULL Date of activation request last_activation datetime Yes NULL Date of last activation user_disabled int(1) Yes 0 1 if user is disabled last_login datetime Yes NULL Date of last login user_blocked tinyint(1) Yes 0 User blocked status block_reset int(1) Yes NULL Number of block resets block_auto int(1) Yes 0 Automatic block status block_activation int(1) Yes NULL Block activation status block_mail_edit datetime Yes NULL Date of last mail edit block fails_in_a_row int(10) Yes 1 Failed login attempts last_block datetime Yes NULL Date of last block user_lang varchar(24) Yes NULL User default language user_color varchar(24) Yes NULL User default color user_theme varchar(24) Yes NULL User default theme user_theme_sub varchar(24) Yes NULL User default sub-theme extradata TEXT Yes NULL Additional data hive_extradata TEXT Yes NULL Additional data for HIVE system req_reset datetime Yes NULL Date of reset request last_reset datetime Yes NULL Date of last reset req_mail_edit datetime Yes NULL Date of last mail edit request last_mail_edit datetime Yes NULL Date of last mail edit last_activity datetime Yes NULL Last site activity created_date datetime Yes CURRENT_TIMESTAMP Creation date modify_date datetime Yes CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP Modification date Primary Key (id) <p>Sessions Table</p> Column Name Data Type Nullable Default Value Comment id int(10) No AUTO_INCREMENT Unique Session ID fk_user int(10) No Related User ID key_type tinyint(1) Yes 0 Session type (1 - activate, 2 - session, etc.) creation datetime Yes CURRENT_TIMESTAMP Session creation date modification datetime Yes CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP Session modification date refresh_date datetime Yes NULL Last session use date session_key varchar(128) Yes Session authentication token is_active tinyint(1) Yes 0 1 - Active, 0 - Expired request_ip varchar(128) Yes NULL IP at session creation (if enabled) execute_ip varchar(128) Yes NULL IP at session invalidation (if enabled) Primary Key (id) <p>Group Table</p> Column Name Data Type Nullable Default Value Comment id int(10) No AUTO_INCREMENT Unique Group ID group_name varchar(255) No Group name group_description TEXT Yes NULL Group description creation datetime Yes CURRENT_TIMESTAMP Creation date modification datetime Yes CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP Modification date Primary Key (id) <p>Group Relation Table</p> Column Name Data Type Nullable Default Value Comment id int(10) No AUTO_INCREMENT Unique Link ID fk_user int(10) No Related User ID fk_group int(10) No Related Group ID creation datetime Yes CURRENT_TIMESTAMP Creation date Primary Key (id) Unique Constraint UNIQUE (fk_user, fk_group) Unique combination of user and group <p>Extrafield Table</p> Column Name Data Type Nullable Default Value Comment id int(10) No AUTO_INCREMENT Unique Extrafield ID fk_user int(10) No Related User ID ... ... ... ... User-defined fields creation datetime Yes CURRENT_TIMESTAMP Creation date modification datetime Yes CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP Modification date Primary Key (id)"},{"location":"classes/x_class_user.html#class-parameters","title":"Class Parameters","text":""},{"location":"classes/x_class_user.html#user-related","title":"User Related","text":"<p>These parameters are only set if a user is logged in:</p> Parameter Name Description <code>user_name</code>, <code>name</code> Contains the user name as set in the database. <code>user_mail</code>, <code>mail</code> Contains the user email as set in the database. <code>theme</code>, <code>user_theme</code> Contains the user theme as set in the database. <code>lang</code>, <code>user_lang</code> Contains the user language as set in the database. <code>loggedIn</code>, <code>loggedin</code>, <code>user_loggedin</code>, <code>user_loggedIn</code> Indicates if the user is logged in (true) or not (false). <code>user()</code> Array with all fields from the database related to the user (excluding extra fields or group tables). <code>user_id</code>, <code>id</code> Contains the user ID as set in the database. <code>user_rank</code>, <code>rank</code> Contains the user rank as set in the database."},{"location":"classes/x_class_user.html#reference-returns","title":"Reference Returns","text":"<p>These variables are set if main operation functions (e.g., login, recover) are triggered, providing quick access to relevant data:</p> Reference Return Variables Description <code>$mail_ref_user</code> References the involved user ID after a major operation. <code>$mail_ref_token</code> References the user token for activation after a major operation. <code>$mail_ref_receiver</code> References the involved user email after a major operation. <code>$ref</code> References the involved user after a major operation."},{"location":"classes/x_class_user.html#operation-returns","title":"Operation Returns","text":"<p>These variables are set after major functions (e.g., mail change, recovery) are triggered and reflect the result of these operations:</p> Operation Functions Return Vars Description <code>$login_request_code</code> Return code from login functions. <code>$rec_request_code</code> Return code from recover functions. <code>$act_request_code</code> Return code from activation functions. <code>$mc_request_code</code> Return code from mail change functions."},{"location":"classes/x_class_user.html#class-constructor","title":"Class Constructor","text":"Constructor Function Description <code>__construct($x_class_mysql, $table_users, $table_sessions, $preecokie = \"xusers\", $initial_ref = false, $initial_pass = false, $initial_rank = false)</code> Initializes with <code>x_class_mysql</code> object and table names (auto-generated). Optional initial username, password, and rank can be set. Used for creating tables and initial user setup if required. $mysqlcon -&gt; <code>x_class_mysql</code> object$table_users -&gt; Table name for users$table_sessions -&gt; Table name for sessions$preecokie -&gt; Precookie for multi-login$initial_ref -&gt; Initial admin username/user email$initial_pass -&gt; Initial password$initial_rank -&gt; Initial user rank"},{"location":"classes/x_class_user.html#configuration-methods","title":"Configuration Methods","text":"<p>Run these functions before <code>init()</code> to adjust login class settings for your site:</p>"},{"location":"classes/x_class_user.html#initial-configuration","title":"Initial Configuration","text":"General Login Class Config Function Description <code>multi_login($bool = false)</code> Allows multi-login. If <code>false</code>, users will be logged out in the first session if they log in elsewhere. If <code>true</code>, users can log in multiple times in different browsers. <code>login_recover_drop($bool = false)</code> Deactivates password reset tokens on successful login. If <code>true</code>, reset tokens will be disabled if the user logs in successfully. <code>login_field_manual($string)</code> Specifies a custom login field that should be unique (e.g., \"user_name\", \"user_mail\"). <code>login_field_user()</code> Sets the primary login field to <code>user_name</code> if <code>true</code>. <code>login_field_mail()</code> Sets the primary login field to <code>user_mail</code> if <code>true</code>. <code>mail_unique($bool = false)</code> Ensures emails are unique if <code>true</code>. If <code>false</code>, emails are not unique but may be overwritten if <code>user_mail</code> is the default login option. <code>user_unique($bool = false)</code> Ensures usernames are unique if <code>true</code>. If <code>false</code>, usernames are not unique but may be overwritten if <code>user_name</code> is the default login option. <code>ip_spoof_check(bool = true)</code> Enables or disables IP spoofing checks during login. Parameters: <code>bool</code> - If true, IP spoofing checks are performed during login."},{"location":"classes/x_class_user.html#logging-configuration","title":"Logging Configuration","text":"Config: Log Functions Description <code>log_ip($bool = false)</code> Logs IP addresses in the database for sessions. <code>true</code> to enable, <code>false</code> to disable. <code>log_activation($bool = false)</code> Logs activation sessions. If <code>false</code>, used keys will be deleted. If <code>true</code>, they will be preserved. <code>log_session($bool = false)</code> Logs session data. If <code>false</code>, used keys will be deleted. If <code>true</code>, they will be preserved. <code>log_recover($bool = false)</code> Logs recovery actions. If <code>false</code>, used keys will be deleted. If <code>true</code>, they will be preserved. <code>log_mail_edit($bool = false)</code> Logs email edits. If <code>false</code>, used keys will be deleted. If <code>true</code>, they will be preserved."},{"location":"classes/x_class_user.html#interval-configuration","title":"Interval Configuration","text":"Config: Operation Delay Interval Functions Description <code>wait_activation_min($int = 6)</code> Time in minutes that users need to wait between activation operations to prevent flooding. <code>wait_recover_min($int = 6)</code> Time in minutes that users need to wait between recovery operations to prevent flooding. <code>wait_mail_edit_min($int = 6)</code> Time in minutes that users need to wait between mail changes with activation operations to prevent flooding."},{"location":"classes/x_class_user.html#expiry-configuration","title":"Expiry Configuration","text":"Config: Token Expire Functions Description <code>min_activation($int = 6)</code> Activation token expiry time in minutes. <code>min_recover($int = 6)</code> Recovery token expiry time in minutes. <code>min_mail_edit($int = 6)</code> Mail edit token expiry time in minutes."},{"location":"classes/x_class_user.html#autoblock-configuration","title":"Autoblock Configuration","text":"Config: Autoblock Functions Description <code>autoblock($int = false)</code> Activates auto-blocking of users after X failed logins. <code>false</code> to deactivate."},{"location":"classes/x_class_user.html#session-configuration","title":"Session Configuration","text":"Config: Session Functions Description <code>sessions_days($int = 7)</code> Defines the maximum number of days a session is valid."},{"location":"classes/x_class_user.html#cookie-configuration","title":"Cookie Configuration","text":"Config: Cookie Functions Description <code>cookies_use($bool = true)</code> Allows the use of cookies for \"remember me\" functionality. <code>false</code> to disable. <code>cookies_days($int = 7)</code> Defines the number of days cookies are valid if not refreshed."},{"location":"classes/x_class_user.html#token-configuration","title":"Token Configuration","text":"Token Config Functions Description <code>token_charset($charset = \"0123456789\")</code> Sets the character set for generated tokens. <code>token_length($length = 24)</code> Sets the length of generated tokens. <code>session_length($length = 24)</code> Sets the length of generated session tokens. <code>session_charset($charset = \"0123456789\")</code> Sets the character set for session tokens."},{"location":"classes/x_class_user.html#operation-methods","title":"Operation Methods","text":"<p>Internal used Methods for this class or additional categories of function which does not fit in any other category.</p>"},{"location":"classes/x_class_user.html#user-table-functions","title":"User Table Functions","text":"User Extrafield Functions Description <code>user_add_field($addstring)</code> Adds a field to the users table. The field is added with the provided column string. <code>user_del_field($fieldname)</code> Deletes a field from the users table. Note: This action deletes data."},{"location":"classes/x_class_user.html#usergroup-functions","title":"Usergroup Functions","text":"Group Functions Description <code>groups($table_group, $table_group_link)</code> Enables user groups functionality and sets the table names for groups and relations. <code>group_add($name, $description = \"\")</code> Creates a group with the specified name and optional description. <code>group_del($id)</code> Deletes a group with the specified ID. <code>group_users($groupid)</code> Retrieves all users in a group as an array representing the relations table fields. <code>user_groups($userid)</code> Retrieves all groups for a user as an array representing the user group fields. <code>group_adduser($groupid, $userid)</code> Adds a user to a group with the specified group and user IDs. <code>group_deluser($groupid, $userid)</code> Removes a user from a group with the specified group and user IDs. <code>groups_del_field($fieldname)</code> Deletes a field from the group table by specifying the column name. <code>groups_add_field($fieldstring)</code> Adds a field to the group table with the provided column string."},{"location":"classes/x_class_user.html#password-filtering-functions","title":"Password Filtering Functions","text":"Password Filter Function Description <code>passfilter($signs = 6, $capitals = 0, $small = 0, $special = 0, $number = 0)</code> Setup Password Filter Check Variable; the parameters represent the required minimum of needed characters, such as numbers, special characters, and capital letters. <code>passfilter_check($passclear)</code> Check if the string conforms to the password filters set by <code>passfilter()</code>."},{"location":"classes/x_class_user.html#password-functions","title":"Password Functions","text":"Password Functions Description <code>password_gen($len = 12, $comb = \"abcde12345\")</code> Generate a key with charset (combination string) and length. Useful for generating passwords or random strings. <code>password_crypt($var, $hash = PASSWORD_BCRYPT)</code> Encrypt a cleartext password into a hashed password. By default, all passwords are hashed using Bcrypt. <code>password_check($cleartext, $crypted)</code> Check the validity of a crypted password by comparing it with a cleartext password using Bcrypt."},{"location":"classes/x_class_user.html#extrafield-functions","title":"Extrafield Functions","text":"Extrafield Functions Description <code>extrafields($table_ext)</code> Activate extrafield functionality by providing a table name, which will be generated and installed automatically. <code>extrafield_del_field($fieldname)</code> Delete an extrafield table column by providing the column name. <code>extrafield_add_field($fieldstring)</code> Add a column to the extrafield table with the specified column string. <code>extrafield_get($id)</code> Get the extrafield array for a user."},{"location":"classes/x_class_user.html#token-validation-time-functions","title":"Token Validation Time Functions","text":"Get Expire Time for Request Functions in Seconds (Interval) Description <code>activation_request_time($user)</code> Get the time until the next activation request is possible with user ID. <code>recover_request_time($user)</code> Get the time until the next recovery request is possible with user ID. <code>mail_edit_request_time($user)</code> Get the time until the next mail edit request is possible with user ID."},{"location":"classes/x_class_user.html#token-validation-functions","title":"Token Validation Functions","text":"Check Token Validation Functions Description <code>activation_token_valid($user, $token)</code> Check if the activation token is valid by providing the user ID and the token. <code>recover_token_valid($user, $token)</code> Check if the recovery token is valid by providing the user ID and the token. <code>mail_edit_token_valid($user, $token)</code> Check if the mail edit token is valid by providing the user ID and the token. <code>session_token_valid($user, $token)</code> Check if the session token is valid by providing the user ID and the token."},{"location":"classes/x_class_user.html#user-operations","title":"User Operations","text":"<p>If you do not provide an ID here, the actual logged-in executing user will be handled as the ID. In cases where the ID is optional, this will be the handling for that kind of execution or trigger of the functions listed below.</p>"},{"location":"classes/x_class_user.html#general-operations","title":"General Operations","text":"User Operation Functions Description <code>get($id = false)</code> Get user information from the table as an array. <code>exists($id = false)</code> Check if a user with the specified ID exists. <code>delete($id = false)</code> Delete a user. <code>disable_user_session($id = false)</code> Disable a user's session. <code>delete_user_session($id = false)</code> Delete a user's session. <code>logout_all()</code> Logout all users."},{"location":"classes/x_class_user.html#confirmation-functions","title":"Confirmation Functions","text":"User Operation Functions Description <code>confirmed_user($id = false)</code> Check if the user account is confirmed; returns \"true\" if confirmed. <code>confirm_user($id = false)</code> Confirm the User if not confirmed, this will prevent auto-delete as the user is non-provisioned for primary functions till confirmation!"},{"location":"classes/x_class_user.html#registration-functions","title":"Registration Functions","text":"User Operation Functions Description <code>addUser($nameref, $mail, $password = false, $rank = false, $activated = false)</code> Add a new user to the database. If <code>$activated</code> is true, the user will not need additional activation. You can define the user's rank, password, mail, and user reference. add_user(<code>nameref</code>, <code>mail</code>, <code>password = false</code>, <code>rank = false</code>, <code>activated = false</code>) Adds a new user to the system. Parameters: <code>nameref</code> - The username reference. <code>mail</code> - The user's email. <code>password</code> - The user's password (optional). <code>rank</code> - The user's rank (optional). <code>activated</code> - Whether the user is activated (optional)."},{"location":"classes/x_class_user.html#function-purpose","title":"Function Purpose","text":"<p>The <code>addUser</code> function in the <code>x_class_user</code> class is designed to add a new user to the database while performing necessary checks, handling unconfirmed email changes, and preparing data. The function prevents duplicate accounts, manages email verification, and ensures proper user data is stored.</p>"},{"location":"classes/x_class_user.html#function-parameters","title":"Function Parameters","text":"<ol> <li>$nameref: The username or another reference field, depending on the configuration.</li> <li>$mail: The user's email address.</li> <li>$password: The user's password (optional, defaults to <code>false</code>).</li> <li>$rank: The user's rank or role (optional, defaults to <code>false</code>).</li> <li>$activated: Whether the user is activated or not (optional, defaults to <code>false</code>).</li> </ol>"},{"location":"classes/x_class_user.html#function-workflow","title":"Function Workflow","text":"<p>Determine Reference Field: The function decides whether to use the email (<code>$mail</code>) or the <code>nameref</code> (username) as the reference, based on the configuration (<code>$this-&gt;login_field</code>).</p> <p>Check for Existing Confirmed User: The function checks if there is an existing confirmed user (<code>user_confirmed = 1</code>) in the database with the same reference (email or username). If a confirmed user is found, the function returns <code>false</code> to prevent duplicate confirmed accounts.</p> <p>Set Activation Status: The <code>$activated</code> parameter is converted to either <code>1</code> (activated) or <code>0</code> (not activated).</p> <p>Set User Rank: If a <code>$rank</code> is not provided, it defaults to <code>0</code>.</p> <p>Prepare Password: If a password is not provided or is empty, the function sets the password to <code>\"NULL\"</code>. Otherwise, the password is encrypted using the <code>password_crypt</code> method.</p> <p>Insert the New User: The function inserts the new user into the database with the provided <code>nameref</code>, <code>mail</code>, encrypted <code>password</code>, rank, and activation status.</p> <p>Return Success: If the user is successfully added, the function returns <code>true</code>.</p>"},{"location":"classes/x_class_user.html#block-functions","title":"Block Functions","text":"User Block Functions Description <code>blocked_user($id = false)</code> Check if the user is blocked; returns <code>true</code> if blocked, <code>false</code> otherwise. <code>block_user($id = false)</code> Block a user. <code>unblock_user($id = false)</code> Unblock a user."},{"location":"classes/x_class_user.html#enabledisable-functions","title":"Enable/Disable Functions","text":"User Disable Functions Description <code>disabled_user($id = false)</code> Check if the user is disabled; returns <code>true</code> if disabled, <code>false</code> otherwise. <code>disable_user($id = false)</code> Disable a user. <code>enable_user($id = false)</code> Enable a user."},{"location":"classes/x_class_user.html#change-user-functions","title":"Change User Functions","text":"User Change Functions Description <code>change_pass($id = false, $new = false)</code> Change the user password. <code>change_password($id = false, $new = false)</code> Change the user password. <code>changeUserPass($id = false, $new = false)</code> Change the user password. <code>change_rank($id = false, $new = false)</code> Change the user rank. <code>changeUserShadowMail($id = false, $new)</code> Change a user's shadow mail (mail not activated yet but user registered and awaits activation). change_shadow(<code>id</code>, <code>new = false</code>) Changes the shadow email of a specific user. Parameters: <code>id</code> - The user's ID. <code>new</code> - The new shadow email (optional). changeUserShadowMail(id<code>,</code>new = false) Alias for <code>change_shadow</code>. Parameters: Same as <code>change_shadow</code>."},{"location":"classes/x_class_user.html#change-user-mail-functions","title":"Change User Mail Functions","text":"User Change Functions Description <code>changeUserMail($id = false, $new)</code> Change a user's mail. If the mail is unique, this deletes never-used, registered accounts with that mail. <code>change_mail($id = false, $new)</code> Change a user's mail. If the mail is unique, this deletes never-used, registered accounts with that mail."},{"location":"classes/x_class_user.html#function-purpose_1","title":"Function Purpose","text":"<p>The <code>changeUserMail</code> function in the <code>x_class_user</code> class is designed to update a user's email address in the database, handling both cases where email uniqueness must be enforced and where it does not. Here is a detailed explanation of its functionality:</p>"},{"location":"classes/x_class_user.html#function-parameters_1","title":"Function Parameters","text":"<ol> <li>$id: The ID of the user whose email address is to be changed. Defaults to <code>\"undefined_framework_var\"</code>.</li> <li>$new: The new email address to be set. Defaults to <code>false</code>.</li> </ol>"},{"location":"classes/x_class_user.html#function-workflow_1","title":"Function Workflow","text":"<p>Check for Valid New Email: The function first checks if a new email address (<code>$new</code>) is provided. If not, it returns <code>false</code>, indicating that no change will occur.</p> <p>Prepare New Email for Database: The new email address is trimmed of extra spaces and converted to lowercase. It is then prepared for binding in the SQL query.</p> <p>Validate User ID: The function checks if the provided <code>$id</code> is valid using the <code>int_opid</code> method. If <code>int_opid</code> returns a false value, the function returns <code>false</code>, indicating an invalid ID. The <code>$id</code> is then processed by <code>int_opid</code> to ensure it is an integer.</p> <p>Check New Email Validity: The function verifies that the new email address is not an empty string. If it is empty, the function returns <code>false</code>.</p> <p>Update Non-Unique Mail: If <code>$this-&gt;mail_unique</code> is <code>false</code>, the function directly updates the email address in the database for the user with the specified ID. It uses a prepared statement to prevent SQL injection.</p> <p>Update Unique Mail: If <code>$this-&gt;mail_unique</code> is <code>true</code>, the function performs additional checks:  </p> <ol> <li>It queries the database to fetch the current email address of the user with the given ID.  </li> <li>If the current email address is the same as the new email address (ignoring case), the function returns <code>true</code>, indicating no update is necessary.  </li> <li>If the current email address is different, the function checks if the new email address already exists and is confirmed using the <code>mailExistsActive</code> method. If it does exist, the function returns <code>false</code> to avoid duplication.  </li> <li>If the new email address does not already exist, the function:  <ul> <li>Deletes any unconfirmed user accounts (<code>user_confirmed = 0</code>) with the same email address from the database.  </li> <li>Updates any accounts with <code>user_shadow</code> (representing unconfirmed email changes) to clear the shadow status.  </li> <li>Updates the email address for the user with the specified ID.  </li> <li>Returns <code>true</code> upon successful update.  </li> </ul> </li> </ol> <p>Return Failure: If none of the above conditions are met or if any checks fail, the function returns <code>false</code>.  </p>"},{"location":"classes/x_class_user.html#change-user-name-functions","title":"Change User Name Functions","text":"User Change Functions Description <code>change_name($id = false, $new)</code> Change the user name. <code>changeUserName($id = false, $new)</code> Change the user name."},{"location":"classes/x_class_user.html#function-purpose_2","title":"Function Purpose","text":"<p>The <code>changeUserName</code> function in the <code>x_class_user</code> class is designed to update a user's username in the database. Here\u2019s a detailed explanation of its workings:</p>"},{"location":"classes/x_class_user.html#function-parameters_2","title":"Function Parameters","text":"<ol> <li>$id: The ID of the user whose username is to be changed. Defaults to <code>\"undefined_framework_var\"</code>.</li> <li>$new: The new username to be set. Defaults to <code>false</code>.</li> </ol>"},{"location":"classes/x_class_user.html#function-workflow_2","title":"Function Workflow","text":"<p>Check for Valid New Username: The function first checks if a new username is provided (<code>$new</code>). If not, it returns <code>false</code> immediately, indicating that no change will occur.  </p> <p>Prepare New Username for Database: The new username is trimmed of extra spaces and prepared for binding in the SQL query.  </p> <p>Validate User ID: The function checks if the provided <code>$id</code> is valid using the <code>int_opid</code> method. If <code>int_opid</code> returns a false value, the function returns <code>false</code>, indicating an invalid ID. The <code>$id</code> is then processed by <code>int_opid</code> to ensure it is an integer.  </p> <p>Check New Username Validity: The function verifies that the new username is not an empty string. If it is empty, the function returns <code>false</code>.  </p> <p>Update Non-Unique Username: If <code>$this-&gt;user_unique</code> is <code>false</code>, the function directly updates the username in the database for the user with the specified ID. It uses a prepared statement to prevent SQL injection.  </p> <p>Update Unique Username: If <code>$this-&gt;user_unique</code> is <code>true</code>, the function performs the following additional steps:  </p> <ol> <li>It queries the database to fetch the current username of the user with the given ID.  </li> <li>If the current username is the same as the new username (ignoring case), the function returns <code>true</code> because no update is necessary.  </li> <li>If the current username is different, the function checks if the new username already exists and is confirmed using the <code>usernameExistsActive</code> method. If it does exist, the function returns <code>false</code> to avoid duplication.  </li> <li>If the new username does not already exist, the function proceeds to update the username in the database and returns <code>true</code> upon successful update.  </li> </ol> <p>Return Failure: If none of the above conditions are met or if any checks fail, the function returns <code>false</code>.  </p>"},{"location":"classes/x_class_user.html#duplicate-check-functions","title":"Duplicate Check Functions","text":"Reference Existence Checks Description <code>refExists($ref)</code> Check if the reference exists. <code>refExistsActive($ref)</code> Check if the reference exists for a confirmed user. <code>usernameExists($ref)</code> Check if the username exists. <code>usernameExistsActive($ref)</code> Check if the username exists for a confirmed user. <code>mailExists($ref)</code> Check if the mail exists. <code>mailExistsActive($ref)</code> Check if the mail exists for a confirmed user."},{"location":"classes/x_class_user.html#extra-data-functions","title":"Extra Data Functions","text":"Extra Data Functions Description <code>get_extra($id= false)</code> Get extra data as an array from the user. (You can store your own data in an array if needed.) <code>set_extra($id= false, $array)</code> Set extra data from an array for the user. (You can store your own data in an array if needed.)"},{"location":"classes/x_class_user.html#login-as-functions","title":"Login As Functions","text":"Login As Functions Description <code>login_as($id)</code> Login as a user with the specified ID. Multi-login with the user logged in at the same time is normally possible. <code>login_as_return()</code> Return to normal state after <code>login_as()</code> has been successfully executed. <code>login_as_is()</code> Returns <code>true</code> if the current user is logged in as another user with <code>login_as()</code>; otherwise, returns <code>false</code>."},{"location":"classes/x_class_user.html#primary-functions","title":"Primary Functions","text":""},{"location":"classes/x_class_user.html#init-functions","title":"Init Functions","text":"Primary Functions Description <code>logout()</code> Logout the current logged-in user. <code>init()</code> Initialize the login with all configurations. Have to run once after configuration changes. Creates all needed sessions and restores login if already logged in."},{"location":"classes/x_class_user.html#login-functions","title":"Login Functions","text":"Primary Functions Description <code>login_request($ref, $pass, $cookies = false)</code> Request login with reference, password, and an option to stay online with cookies. Returns codes for login success or failure."},{"location":"classes/x_class_user.html#function-purpose_3","title":"Function Purpose","text":"<p>The <code>login_request</code> function in the <code>x_class_user</code> class handles the user login process, including authentication, session management, and handling various login errors. Here\u2019s a detailed breakdown of its functionality and the return codes it uses:</p>"},{"location":"classes/x_class_user.html#function-parameters_3","title":"Function Parameters","text":"<ol> <li>$ref: The username or email address of the user attempting to log in.</li> <li>$password: The password provided by the user.</li> <li>$stayLoggedIn: A boolean indicating whether the user wants to stay logged in across sessions (optional, defaults to <code>false</code>).</li> </ol>"},{"location":"classes/x_class_user.html#return-codes","title":"Return Codes","text":"<ul> <li>1: Successful login.</li> <li>2: User not found (invalid reference).</li> <li>3: Incorrect password.</li> <li>4: User is blocked.</li> <li>5: User is not confirmed.</li> <li>6: User is auto-blocked due to multiple failed login attempts.</li> <li>7: User is disabled.</li> </ul>"},{"location":"classes/x_class_user.html#activation-functions","title":"Activation Functions","text":"Activation Functions Description <code>activation_request_id($id)</code> Request activation for a user by ID without interval limits. Returns success or error codes. <code>activation_request($ref)</code> Request activation for an account with a reference. Returns success or error codes based on various conditions. <code>activation_confirm($userid, $token, $newpass = false)</code> Confirm activation with user ID and a valid token. Returns success or error codes based on various conditions."},{"location":"classes/x_class_user.html#activation-request-id","title":"Activation Request ID","text":"<p>Here you can see return values of the function: <code>activation_request_id</code> Requests an activation token for a user by their user ID if the user is not already confirmed.</p> Return Code Meaning 1 Activation request successful. 2 User ID is not numeric or user not found. 3 User is already confirmed."},{"location":"classes/x_class_user.html#activation-request","title":"Activation Request","text":"<p>Here you can see return values of the function: <code>activation_request</code> Requests a new activation token for a user by their username or email, checking various conditions such as user status and request timing.</p> Return Code Meaning 1 Activation request successful. 2 User not found. 3 Activation request too soon (interval not reached). 4 User is already confirmed. 5 Activation is blocked for this user. 6 User is disabled."},{"location":"classes/x_class_user.html#activation-confirm","title":"Activation Confirm","text":"<p>Here you can see return values of the function: <code>activation_confirm</code> Confirms the activation for a user using a provided token and optionally updates the user\u2019s password.</p> Return Code Meaning 1 Activation confirmed successfully. 2 User ID is not numeric or token not found. 3 Activation token is invalid or expired. 4 Activation is blocked for this user."},{"location":"classes/x_class_user.html#recover-functions","title":"Recover Functions","text":"Reset Functions Description <code>recover_request_id($id)</code> Request account recovery by ID. Returns success or error codes. <code>recover_request($ref)</code> Request account recovery by reference. Returns success or error codes based on various conditions. <code>recover_confirm($userid, $token, $newpass)</code> Confirm account recovery with user ID, token, and new password. Returns success or error codes."},{"location":"classes/x_class_user.html#recover-request-id","title":"Recover Request ID","text":"<p>Here you can see return values of the function: <code>recover_request_id</code> Requests a password recovery token for a user identified by their user ID.</p> Return Code Description 1 Token creation successful. 2 Invalid user ID or user not found."},{"location":"classes/x_class_user.html#recover-request","title":"Recover Request","text":"<p>Here you can see return values of the function: <code>recover_request</code> Requests a password recovery token for a user identified by their username or email.</p> Return Code Description 1 Token creation successful. 2 User not found. 3 Recovery request made too soon (interval not reached). 4 Recovery is blocked for this user. 5 User is disabled."},{"location":"classes/x_class_user.html#recover-confirm","title":"Recover Confirm","text":"<p>Here you can see return values of the function: <code>recover_confirm</code> Confirms a password recovery request using a token and updates the user\u2019s password.</p> Return Code Description 1 Recovery confirmed and password updated. 2 Invalid user ID or token not found. 3 Recovery token is invalid or expired. 4 Password recovery is blocked for this user."},{"location":"classes/x_class_user.html#mail-change-functions","title":"Mail Change Functions","text":"Mail Edit Functions Description <code>mail_edit($id, $newmail, $nointervall = false)</code> Create a new shadow mail. Returns success or error codes. <code>mail_edit_confirm($userid, $token, $run = true)</code> Confirm mail edit with user ID, token, and an optional flag to run the mail edit process. Returns success or error codes."},{"location":"classes/x_class_user.html#mail-edit-returns","title":"Mail Edit Returns","text":"<p>Here you can see return values of the function: <code>mail_edit</code> Initiates a request to change a user's email address. The function first validates the user ID and new email address, checks whether the user is disabled or if email changes are blocked. If an interval is specified, it ensures the required wait time has passed. It then generates a token for confirming the email change and stores the new email in a \"shadow\" state until confirmed. The function also handles logging and cleanup tasks related to the email change process.</p> Return Code Description 1 Email change request processed successfully. 2 User ID is invalid or user not found. 3 Email change request made too soon (interval not reached). 4 New email already exists for another active user. 5 Email change blocked for this user. 6 User is disabled."},{"location":"classes/x_class_user.html#mail-edit-confirm","title":"Mail Edit Confirm","text":"<p>Here you can see return values of the function: <code>mail_edit_confirm</code> Confirms the email change request by verifying the provided token. It checks whether the token is valid and whether the user is allowed to make the change. If valid, it updates the user's email address, handles any conflicts with existing emails (e.g., if the new email is already in use by another account), and logs the changes. If the email address was previously set as a shadow (temporary), it ensures proper cleanup or handling based on the email uniqueness settings.</p> Return Code Description 1 Email change confirmed successfully. 2 User ID is invalid or token not found. 3 Email change token is invalid or expired. 4 New email address is already in use. 5 Email change blocked for this user. 6 Failure to change the user\u2019s email."},{"location":"classes/x_class_user.html#display-login-function","title":"Display Login Function","text":"Function Description <code>display_login</code> This function displays a login form with various customizable options such as registration and password reset buttons, captcha validation, and CSRF protection. It processes the login request and handles errors related to captcha and CSRF tokens."},{"location":"classes/x_class_user.html#parameters","title":"Parameters","text":"Parameter Type Description Default Value <code>spawn_register_button</code> <code>array</code> Configures the \"Register Now\" button with <code>url</code> and <code>label</code> options. <code>array(\"url\" =&gt; \"\", \"label\" =&gt; \"Register Now\")</code> <code>spawn_cookie_checkbox</code> <code>string</code> Label for the \"Stay Logged In?\" checkbox. <code>\"Stay Logged In?\"</code> <code>spawn_reset_button</code> <code>array</code> Configures the \"Reset Account\" button with <code>url</code> and <code>label</code> options. <code>array(\"url\" =&gt; \"\", \"label\" =&gt; \"Reset Account\")</code> <code>login_button_label</code> <code>string</code> Label for the login button. <code>\"Login\"</code> <code>label</code> <code>array</code> Labels and placeholders for email and password fields. Options: <code>ref_placeholder</code>, <code>ref_label</code>, <code>pass_label</code>, <code>pass_placeholder</code>. <code>array(\"ref_placeholder\" =&gt; \"Please enter your E-Mail\", \"ref_label\" =&gt; \"E-Mail\", \"pass_label\" =&gt; \"Password\", \"pass_placeholder\" =&gt; \"Please enter your password!\")</code> <code>captcha</code> <code>array</code> Configures captcha image and expected code for validation. <code>array(\"url\" =&gt; \"captcha.jpg\", \"code\" =&gt; \"243fsdfsfds\")</code>"},{"location":"classes/x_class_user.html#functionality","title":"Functionality","text":"Step Description 1. CSRF Token Generation Generates a CSRF token and stores it in the session for validation. 2. Form Submission Check Checks if the login form has been submitted. 3. CSRF Validation Validates the submitted CSRF token against the one stored in the session. 4. Captcha Validation Validates the captcha code if captcha is enabled. 5. Login Request Processes the login request by calling the <code>login_request</code> method with the submitted credentials. 6. Error Handling Sets <code>display_return_code</code> based on the result of the login request or encountered errors (captcha or CSRF error). 7. HTML Output Outputs the login form with all configured options, including the captcha image, labels, and buttons."},{"location":"classes/x_class_user.html#return-values","title":"Return Values","text":"Value Description <code>display_return_code</code> Stores the result of the login process or error codes (<code>captcha_error</code>, <code>csrf_error</code>). <p>The function sets the display_return_code property based on the outcome of the login process. This property can hold various values, including the result of a successful login or specific error codes such as captcha_error or csrf_error. These return codes are used to inform the user or the system about the status of the login attempt, enabling appropriate responses or error handling</p>"},{"location":"classes/x_class_var.html","title":"x_class_var","text":""},{"location":"classes/x_class_var.html#php-class-x_class_var","title":"PHP Class: <code>x_class_var</code>","text":""},{"location":"classes/x_class_var.html#introduction","title":"Introduction","text":"<p>The <code>x_class_var</code> class provides a way to manage and persist configuration variables or constants in a MySQL database table. It supports automatic table creation and allows storing variables with descriptors, values, descriptions, and multi-site section identifiers. Variables can be loaded as PHP constants or retrieved as arrays. It also supports updating and deleting variables and includes helper methods for secure web form integration to edit values.</p> <p>Use the class by including <code>/_framework/classes/x_class_var.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: The PHP MySQLi extension must be installed and enabled.</li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_var.html#mysql-table","title":"MySQL Table","text":"<p>This section describes the structure of the table used for storing variables managed by <code>x_class_var</code>. The table will be automatically created by the class if it does not exist.</p> <p>The table will be automatically created upon constructor execution if it does not exist.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(9)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> Unique identifier for each variable entry. <code>descriptor</code> <code>varchar(256)</code> <code>NOT NULL</code> The variable name or key descriptor. <code>value</code> <code>text</code> The stored value for the variable. Serialized if array or object. <code>description</code> <code>text</code> Optional descriptive text about the variable. <code>section</code> <code>varchar(128)</code> <code>DEFAULT ''</code> Section or namespace for the variable, suitable for multi-site or multi-context separation. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Timestamp when the entry was created. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> on update Automatically updates timestamp when the entry is modified. Key Name Key Type Columns Usage <code>PRIMARY</code> Primary <code>id</code> Ensures each row is uniquely identifiable. <code>unique_key</code> Unique <code>section, descriptor</code> Enforces unique variable names per section, preventing duplicates."},{"location":"classes/x_class_var.html#methods","title":"Methods","text":""},{"location":"classes/x_class_var.html#__construct","title":"<code>__construct</code>","text":"<p>Initializes the class with the database connection, table name, and section (namespace) for variable segregation.</p> Parameter Type Description Default <code>$mysql</code> object Database connection supporting typical query/select operations. None <code>$tablename</code> string Table name to store variables. None <code>$section</code> string Section name to scope variables (for multi-site or context). None <code>$descriptor</code> string Column name for descriptor (variable name/key). <code>\"descriptor\"</code> <code>$value</code> string Column name for variable value. <code>\"value\"</code> <code>$description</code> string Column name for descriptions. <code>\"description\"</code> <code>$sectionfield</code> string Column name for section. <code>\"section\"</code> <code>$idfield</code> string Column name for primary ID. <code>\"id\"</code> Return Value When does this return value occur? <code>void</code> Constructor does not return a value. It creates the table if it does not exist."},{"location":"classes/x_class_var.html#init_constant","title":"<code>init_constant</code>","text":"<p>Defines the stored variables as PHP constants in the current script for the current section.</p> Parameter Type Description Default <code>$unserialize_arrays</code> boolean Automatically unserialize values if they are serializations of arrays or objects. <code>true</code> Return Value When does this return value occur? <code>true</code> Always returns <code>true</code> after defining constants."},{"location":"classes/x_class_var.html#get_array","title":"<code>get_array</code>","text":"<p>Retrieves all variables as an array of key-value pairs for the current section.</p> Parameter Type Description Default None \u2014 \u2014 \u2014 Return Value When does this return value occur? <code>array</code> Array of variables with descriptor and value pairs."},{"location":"classes/x_class_var.html#get_array_full","title":"<code>get_array_full</code>","text":"<p>Retrieves all variable records including metadata for the current section.</p> Parameter Type Description Default None \u2014 \u2014 \u2014 Return Value When does this return value occur? <code>array</code> Array of full records including descriptor, value, description, section, creation date, modification date."},{"location":"classes/x_class_var.html#get_full","title":"<code>get_full</code>","text":"<p>Retrieves full record details of a single variable by descriptor.</p> Parameter Type Description Default <code>$name</code> string Variable descriptor to fetch. None Return Value When does this return value occur? <code>array|false</code> Full variable record array if found, otherwise <code>false</code>."},{"location":"classes/x_class_var.html#exists","title":"<code>exists</code>","text":"<p>Checks existence of a variable by descriptor in the current section.</p> Parameter Type Description Default <code>$name</code> string Variable descriptor to check. None Return Value When does this return value occur? <code>boolean</code> <code>true</code> if variable exists, <code>false</code> otherwise."},{"location":"classes/x_class_var.html#get","title":"<code>get</code>","text":"<p>Retrieves the value of a variable by descriptor.</p> Parameter Type Description Default <code>$name</code> string Variable descriptor to retrieve. None Return Value When does this return value occur? <code>mixed|false</code> Variable value if found, otherwise <code>false</code>."},{"location":"classes/x_class_var.html#del","title":"<code>del</code>","text":"<p>Deletes a variable record by descriptor.</p> Parameter Type Description Default <code>$name</code> string Variable descriptor to delete. None Return Value When does this return value occur? <code>boolean</code> <code>true</code> if deletion succeeded, <code>false</code> otherwise."},{"location":"classes/x_class_var.html#setup","title":"<code>setup</code>","text":"<p>Adds a new variable only if it does not already exist.</p> Parameter Type Description Default <code>$name</code> string Variable descriptor to add. None <code>$value</code> mixed Value of the variable. None <code>$description</code> string Optional description. <code>\"\"</code> Return Value When does this return value occur? <code>boolean</code> <code>true</code> if added, <code>false</code> if variable already exists."},{"location":"classes/x_class_var.html#add","title":"<code>add</code>","text":"<p>Adds or updates a variable.</p> Parameter Type Description Default <code>$name</code> string Variable descriptor to add/update. None <code>$value</code> mixed Value for the variable. None <code>$description</code> string Optional description. <code>\"\"</code> <code>$overwrite</code> boolean Whether to overwrite existing variable. <code>false</code> Return Value When does this return value occur? <code>boolean</code> <code>true</code> if operation succeeded, otherwise <code>false</code>."},{"location":"classes/x_class_var.html#set","title":"<code>set</code>","text":"<p>Internal method to add or update variables with control over overwrite behavior.</p> Parameter Type Description Default <code>$name</code> string Variable descriptor. None <code>$value</code> mixed Value to set, serialized if array/object. None <code>$description</code> string Optional description. <code>false</code> <code>$add</code> boolean Whether to add new entry if not existing. <code>true</code> <code>$overwrite</code> boolean Whether to overwrite existing entry. <code>true</code> Return Value When does this return value occur? <code>boolean</code> <code>true</code> if successful, <code>false</code> otherwise."},{"location":"classes/x_class_var.html#form_start","title":"<code>form_start</code>","text":"<p>Starts a web form session with CSRF token generation for secure editing.</p> Parameter Type Description Default <code>$precookie</code> string Prefix for session variables to allow multiple form instances. <code>\"\"</code> Return Value When does this return value occur? <code>void</code> Always."},{"location":"classes/x_class_var.html#form_end","title":"<code>form_end</code>","text":"<p>Ends a web form session updating CSRF tokens.</p> Parameter Type Description Default <code>$precookie</code> string Prefix for session variables. <code>\"\"</code> Return Value When does this return value occur? <code>void</code> Always."},{"location":"classes/x_class_var.html#form","title":"<code>form</code>","text":"<p>Generates and processes an HTML form to edit a stored variable with various input types and CSRF protection.</p> Parameter Type Description Default <code>$varname</code> string Variable descriptor to edit. None <code>$type</code> string Form input type (<code>int</code>, <code>text</code>, <code>string</code>, <code>select</code>). <code>\"int\"</code> <code>$selectarray</code> array For select inputs, list of options to show. <code>array()</code> <code>$precookie</code> string Prefix for session and form element names to isolate forms. <code>\"\"</code> <code>$button_class</code> string CSS class for submit button styling. <code>\"btn btn-warning waves-effect waves-light\"</code> <code>$itemclass</code> string CSS class for form input styling. <code>\"form-control\"</code> <code>$editbuttonname</code> string Text for submit button. <code>\"Edit\"</code> Return Value When does this return value occur? <code>int</code> Always returns <code>0</code>."},{"location":"classes/x_class_var.html#example","title":"Example","text":"<pre><code>&lt;?php\n// Example usage:\n\n// Use your MySQL DB connection object compatible with x_class_mysql\n$db = new x_class_mysql(...);\n\n// Initialize variable manager with section \"SiteConfig\"\n$varManager = new x_class_var($db, 'configuration_table', 'SiteConfig');\n\n// Add or update a variable\n$varManager-&gt;add('MAX_USERS', 100, 'Maximum allowed users', true);\n\n// Check if a variable exists\nif ($varManager-&gt;exists('MAX_USERS')) {\n    echo 'Max users: ' . $varManager-&gt;get('MAX_USERS');\n}\n\n// Define all variables in section as constants\n$varManager-&gt;init_constant();\n\n// Render a form to edit a variable on a web page\necho $varManager-&gt;form('MAX_USERS', 'int');\n\n// Delete a variable\n$varManager-&gt;del('MAX_USERS');\n?&gt;\n</code></pre>"},{"location":"classes/x_class_version.html","title":"x_class_version","text":""},{"location":"classes/x_class_version.html#php-class-x_class_version","title":"PHP Class: <code>x_class_version</code>","text":""},{"location":"classes/x_class_version.html#introduction","title":"Introduction","text":"<p>The <code>x_class_version</code> class stores metadata about a software version, including details like the author, contact email, website, GitHub repository, and version number. Its properties are immutable, meaning they are set during instantiation or accessed directly without the ability to change them later. The class does not include any methods beyond storing and retrieving this information.</p> <p>Use the class by including <code>/_framework/classes/x_class_version.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <p>This class does not require any specific PHP modules.</p>"},{"location":"classes/x_class_version.html#properties","title":"Properties","text":"Property Type Visibility Description <code>author</code> string public readonly The name of the author of the software. <code>contact</code> string public readonly The contact email for support or inquiries. <code>website</code> string public readonly The official website for the software. <code>github</code> string public readonly The GitHub repository URL for the software. <code>version</code> string public readonly The current version number of the software. <code>documentation</code> string public readonly The Documentation URL for the software."},{"location":"classes/x_class_version.html#example","title":"Example","text":"<p>Here's a simple example of how to use the <code>x_class_version</code> class:</p> <pre><code>&lt;?php\n// Create an instance of the x_class_version class\n$versionInfo = new x_class_version();\n\n// Access version information\necho \"Author: \" . $versionInfo-&gt;author . \"\\n\";\necho \"Contact: \" . $versionInfo-&gt;contact . \"\\n\";\necho \"Website: \" . $versionInfo-&gt;website . \"\\n\";\necho \"GitHub: \" . $versionInfo-&gt;github . \"\\n\";\necho \"Documentation: \" . $versionInfo-&gt;documentation . \"\\n\";\necho \"Version: \" . $versionInfo-&gt;version . \"\\n\";\n?&gt;\n</code></pre>"},{"location":"classes/x_class_zip.html","title":"x_class_zip","text":""},{"location":"classes/x_class_zip.html#php-class-x_class_zip","title":"PHP Class: <code>x_class_zip</code>","text":""},{"location":"classes/x_class_zip.html#introduction","title":"Introduction","text":"<p>The <code>x_class_zip</code> class provides methods for compressing files and directories into ZIP archives and extracting them. It supports optional encryption and decryption of ZIP files using a provided encryption class. </p> <p>Use the class by including <code>/_framework/classes/x_class_zip.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>zip</code>: For ZIP file handling.  </li> <li><code>openssl</code>: For encryption and decryption, if x_class_crypt is used.</li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_crypt</code>: Optional; Required for encryption and decryption functionality.</li> </ul>"},{"location":"classes/x_class_zip.html#methods","title":"Methods","text":""},{"location":"classes/x_class_zip.html#zip","title":"<code>zip</code>","text":"<p>This method zips the provided file or directory into a destination ZIP file, with optional encryption.</p> Parameter Type Description Default <code>$file_source</code> string The path to the file or directory to zip. None <code>$file_destination_zip</code> string The path where the zip file should be saved. None <code>$x_class_crypt</code> object An optional encryption object to encrypt the zip file. false <code>$cryptokey</code> string The encryption key if encryption is applied. false <code>$tempfile</code> string Temporary file path used to store the zip file before encryption (if applicable). false Return Value When does this return value occur? <code>true</code> The zip operation is successful, and the file is created or encrypted. <code>false</code> An error occurs (e.g., the file to zip doesn\u2019t exist, destination already exists, etc.)."},{"location":"classes/x_class_zip.html#unzip","title":"<code>unzip</code>","text":"<p>This method extracts the contents of a ZIP file to the specified destination. It supports optional decryption.</p> Parameter Type Description Default <code>$from</code> string The path to the zip file to unzip. None <code>$to</code> string The destination path where the contents of the zip file will be extracted. None <code>$x_class_crypt</code> object An optional encryption object to decrypt the zip file. false <code>$cryptokey</code> string The decryption key if the file is encrypted. false <code>$tempfile</code> string Temporary file path used to store the decrypted content before extracting. false Return Value When does this return value occur? <code>true</code> The unzip operation is successful, and the contents are extracted. <code>false</code> An error occurs (e.g., invalid file, destination exists, or decryption fails)."},{"location":"classes/x_class_zip.html#example","title":"Example","text":"<pre><code>&lt;?php\n// Include the x_class_zip class file\nrequire_once 'x_class_zip.php';\n\n// Create an instance of the x_class_zip class\n$zipper = new x_class_zip();\n\n// Example 1: Zipping a file without encryption\n$file_source = 'path/to/your/file.txt';          // The file to zip\n$file_destination_zip = 'path/to/destination.zip'; // The destination zip file\n\n$zipper-&gt;zip($file_source, $file_destination_zip);\n\n// Example 2: Zipping a directory with encryption\n$file_source = 'path/to/your/directory';          // The directory to zip\n$file_destination_zip = 'path/to/destination_encrypted.zip'; // The destination encrypted zip file\n\n// Assuming you have a class for encryption like x_class_crypt\n$x_class_crypt = new YourEncryptionClass();\n$cryptokey = 'your-encryption-key';  // The encryption key\n\n$zipper-&gt;zip($file_source, $file_destination_zip, $x_class_crypt, $cryptokey);\n\n// Example 3: Unzipping a file with encryption\n$zip_file = 'path/to/encrypted.zip'; // The encrypted zip file\n$destination_folder = 'path/to/extracted_files'; // Destination folder to extract to\n\n$zipper-&gt;unzip($zip_file, $destination_folder, $x_class_crypt, $cryptokey);\n\n// Example 4: Unzipping a file without encryption\n$zip_file = 'path/to/your/zipfile.zip'; // The zip file\n$destination_folder = 'path/to/extracted_files'; // Destination folder to extract to\n\n$zipper-&gt;unzip($zip_file, $destination_folder);\n?&gt;\n</code></pre>"},{"location":"css/index.html","title":"xcss_xfpe.css","text":""},{"location":"css/index.html#css-classes","title":"CSS Classes","text":""},{"location":"css/index.html#introduction","title":"Introduction","text":"<p>Bugfish CSS Framework simplifies web design with a robust set of pre-built classes for fast, responsive layouts. Speed up development and create professional designs effortlessly. To use, include the <code>_framework/css/xcss_xfpe.css</code> file.</p> <p>General Notice</p> <p>Add _f to a class name to apply <code>!important</code> automatically. </p>"},{"location":"css/index.html#columnrows","title":"Column/Rows","text":"Class Description <code>.xfpe_row</code> Row Element (Put Col Elements in it to be placed next to each other) <code>.xfpe_col</code> Row Element without width configuration <code>.xfpe_col-1</code> Row Element 1/12 width <code>.xfpe_col-2</code> Row Element 2/12 width <code>.xfpe_col-3</code> Row Element 3/12 width <code>.xfpe_col-4</code> Row Element 4/12 width <code>.xfpe_col-5</code> Row Element 5/12 width <code>.xfpe_col-6</code> Row Element 6/12 width <code>.xfpe_col-7</code> Row Element 7/12 width <code>.xfpe_col-8</code> Row Element 8/12 width <code>.xfpe_col-9</code> Row Element 9/12 width <code>.xfpe_col-10</code> Row Element 10/12 width <code>.xfpe_col-11</code> Row Element 11/12 width <code>.xfpe_col-12</code> Row Element 12/12 width"},{"location":"css/index.html#background-colors","title":"Background Colors","text":"Class Description Possible Values <code>.xfpe_background*</code> Sets Background Color (Replace <code>*</code> with possible value) red, yellow, green, blue, orange, purple, pink, brown, black, white, gray, cyan, magenta, lime <code>.xfpe_background*_f</code> Forces Background Color (Replace <code>*</code> with possible value) red, yellow, green, blue, orange, purple, pink, brown, black, white, gray, cyan, magenta, lime"},{"location":"css/index.html#text-colors","title":"Text Colors","text":"Class Description Possible Values <code>.xfpe_color*</code> Sets Text Color (Replace <code>*</code> with possible value) red, yellow, green, blue, orange, purple, pink, brown, black, white, gray, cyan, magenta, lime <code>.xfpe_color*_f</code> Forces Text Color (Replace <code>*</code> with possible value) red, yellow, green, blue, orange, purple, pink, brown, black, white, gray, cyan, magenta, lime"},{"location":"css/index.html#margin-classes","title":"Margin Classes","text":"Padding / Margin Class Description Possible Values Max Value of N <code>.xfpe_paddingauto</code> Sets padding to \"auto\" for all sides <code>.xfpe_nopadding</code> Removes padding from all sides (sets to 0px) <code>.xfpe_nopaddingtop</code> Removes padding from the top (sets padding-top to 0px) <code>.xfpe_nopaddingbottom</code> Removes padding from the bottom (sets padding-bottom to 0px) <code>.xfpe_nopaddingleft</code> Removes padding from the left (sets padding-left to 0px) <code>.xfpe_nopaddingright</code> Removes padding from the right (sets padding-right to 0px) <code>.xfpe_paddingleft{N}px</code> Sets the left padding of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_paddingright{N}px</code> Sets the right padding of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_paddingleftm{N}px</code> Sets a negative left padding of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_paddingrightm{N}px</code> Sets a negative right padding of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_paddingbottom{N}px</code> Sets padding-bottom to a specific value in pixels (Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_paddingbottomm{N}px</code> Sets negative padding-bottom to a specific value in pixels (-Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_paddingtop{N}px</code> Sets padding-top to a specific value in pixels (Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_paddingtopm{N}px</code> Sets negative padding-top to a specific value in pixels (-Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_marginauto</code> Sets margin to \"auto\" for all sides <code>.xfpe_nomargin</code> Removes margin from all sides (sets to 0px) <code>.xfpe_nomargintop</code> Removes margin from the top (sets margin-top to 0px) <code>.xfpe_nomarginbottom</code> Removes margin from the bottom (sets margin-bottom to 0px) <code>.xfpe_nomarginleft</code> Removes margin from the left (sets margin-left to 0px) <code>.xfpe_nomarginright</code> Removes margin from the right (sets margin-right to 0px) <code>.xfpe_marginleft{N}px</code> Sets the left margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_marginright{N}px</code> Sets the right margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_marginleftm{N}px</code> Sets a negative left margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_marginrightm{N}px</code> Sets a negative right margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_margintop{N}px</code> Sets the top margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_margintopm{N}px</code> Sets negative margin-top to a specific value in pixels (-Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_marginbottom{N}px</code> Sets margin-bottom to a specific value in pixels (Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_marginbottomm{N}px</code> Sets negative margin-bottom to a specific value in pixels (-Xpx) N: 5, 10, 15, ... 150"},{"location":"css/index.html#widthheight-classes","title":"Width/Height Classes","text":"Width / Height Class Description Possible Values Max Value of N <code>.xfpe_width{N}px</code> Sets the element's width to N pixels. N: 25, 50, 75, 100, ... 1000 <code>.xfpe_height{N}px</code> Sets the element's height to N pixels. N: 25, 50, 75, 100, ... 1000 <code>.xfpe_width{N}pct</code> Sets the element's width to N percentage. N: 25, 50, 75, 100, ... 100 <code>.xfpe_height{N}pct</code> Sets the element's height to N percentage. N: 25, 50, 75, 100, ... 100 <code>.xfpe_maxwidth{N}pct</code> Sets the element's width to N percentage of parent. N: 25, 50, 100 100 <code>.xfpe_maxwidth{N}px</code> Sets the maximum width of the element to N pixels. N: 50, 100, 150, ... 1000 <code>.xfpe_minwidth{N}px</code> Sets the minimum width of the element to N pixels. N: 50, 100, 150, ... 1000 <code>.xfpe_minwidth{N}pct</code> Sets the minimum width of the element to N percentage of parent. N: 25, 50, 75, 100, ... 100"},{"location":"css/index.html#font-size","title":"Font Size","text":"Font Size Class Description Possible Values Max Value of N <code>.xfpe_fontsize{N}px</code> Sets font size to N pixels. N: 10, 20, 30, 40, 50, ... 100 <code>.xfpe_fontsize{N}pct</code> Sets font size to N percentage. N: 25, 50, 75, 100, ... 100"},{"location":"css/index.html#display","title":"Display","text":"Class Name Description <code>.xfpe_dispinlineblock</code> <code>display: inline-block;</code> <code>.xfpe_dispinline</code> <code>display: inline;</code> <code>.xfpe_dispblock</code> <code>display: block;</code> <code>.xfpe_dispnone</code> <code>display: none;</code> (Hides the element) <code>.xfpe_dispflex</code> <code>display: flex;</code> (Enables flexbox layout) <code>.xfpe_dispgrid</code> <code>display: grid;</code> (Enables grid layout) <code>.xfpe_dispinlineflex</code> <code>display: inline-flex;</code> (Inline flexbox layout) <code>.xfpe_dispinlinegrid</code> <code>display: inline-grid;</code> (Inline grid layout)"},{"location":"css/index.html#float","title":"Float","text":"Class Name Description <code>.xfpe_floatleft</code> <code>float: left;</code> <code>.xfpe_floatleft_f</code> <code>float: left !important;</code> <code>.xfpe_floatright</code> <code>float: right;</code> <code>.xfpe_floatright_f</code> <code>float: right !important;</code> <code>.xfpe_floatnone</code> <code>float: none;</code> (Clears any previous float) <code>.xfpe_floatinherit</code> <code>float: inherit;</code> (Inherits the float property) <code>.xfpe_floatinitial</code> <code>float: initial;</code> (Sets to default value) <code>.xfpe_floatunset</code> <code>float: unset;</code> (Resets to inherited value)"},{"location":"css/index.html#overflow","title":"Overflow","text":"Class Name Description <code>.xfpe_overflowhidden</code> <code>overflow: hidden;</code> <code>.xfpe_overflowhidden_f</code> <code>overflow: hidden !important;</code> <code>.xfpe_overflowscroll</code> <code>overflow: scroll;</code> <code>.xfpe_overflowscroll_f</code> <code>overflow: scroll !important;</code> <code>.xfpe_overflowvisible</code> <code>overflow: visible;</code> (Shows content overflowing) <code>.xfpe_overflowauto</code> <code>overflow: auto;</code> (Adds scrollbars if needed) <code>.xfpe_overflowxhidden</code> <code>overflow-x: hidden;</code> <code>.xfpe_overflowxhidden_f</code> <code>overflow-x: hidden !important;</code> <code>.xfpe_overflowxscroll</code> <code>overflow-x: scroll;</code> <code>.xfpe_overflowxscroll_f</code> <code>overflow-x: scroll !important;</code> <code>.xfpe_overflowyhidden</code> <code>overflow-y: hidden;</code> <code>.xfpe_overflowyhidden_f</code> <code>overflow-y: hidden !important;</code> <code>.xfpe_overflowyscroll</code> <code>overflow-y: scroll;</code> <code>.xfpe_overflowyscroll_f</code> <code>overflow-y: scroll !important;</code>"},{"location":"css/index.html#text-adjustments","title":"Text Adjustments","text":"Class Name Description <code>.xfpe_textbreakall</code> <code>white-space: pre; word-break: break-all;</code> <code>.xfpe_textbreakall_f</code> <code>white-space: pre !important; word-break: break-all !important;</code> <code>.xfpe_textnowrap</code> <code>white-space: nowrap;</code> <code>.xfpe_textnowrap_f</code> <code>white-space: nowrap !important;</code> <code>.xfpe_textuppercase</code> <code>text-transform: uppercase;</code> <code>.xfpe_textuppercase_f</code> <code>text-transform: uppercase !important;</code> <code>.xfpe_textlowercase</code> <code>text-transform: lowercase;</code> <code>.xfpe_textlowercase_f</code> <code>text-transform: lowercase !important;</code> <code>.xfpe_textcapitalize</code> <code>text-transform: capitalize;</code> <code>.xfpe_textcapitalize_f</code> <code>text-transform: capitalize !important;</code>"},{"location":"css/index.html#align-adjustments","title":"Align Adjustments","text":"Class Name Description <code>.xfpe_aligncenter</code> <code>text-align: center;</code> <code>.xfpe_aligncenter_f</code> <code>text-align: center !important;</code> <code>.xfpe_alignleft</code> <code>text-align: left;</code> <code>.xfpe_alignleft_f</code> <code>text-align: left !important;</code> <code>.xfpe_alignright</code> <code>text-align: right;</code> <code>.xfpe_alignright_f</code> <code>text-align: right !important;</code> <code>.xfpe_alignjustify</code> <code>text-align: justify;</code> <code>.xfpe_alignjustify_f</code> <code>text-align: justify !important;</code> <code>.xfpe_verticalalignmiddle</code> <code>vertical-align: middle;</code> <code>.xfpe_verticalalignmiddle_f</code> <code>vertical-align: middle !important;</code> <code>.xfpe_verticalaligntop</code> <code>vertical-align: top;</code> <code>.xfpe_verticalaligntop_f</code> <code>vertical-align: top !important;</code> <code>.xfpe_verticalalignbottom</code> <code>vertical-align: bottom;</code> <code>.xfpe_verticalalignbottom_f</code> <code>vertical-align: bottom !important;</code> <code>.xfpe_alignbaseline</code> <code>vertical-align: baseline;</code> <code>.xfpe_alignbaseline_f</code> <code>vertical-align: baseline !important;</code>"},{"location":"css/index.html#cursor","title":"Cursor","text":"Class Name Description <code>.xfpe_cursorpointer</code> <code>cursor: pointer;</code> <code>.xfpe_cursorpointer_f</code> <code>cursor: pointer !important;</code> <code>.xfpe_cursordefault</code> <code>cursor: default;</code> (Default cursor, usually an arrow) <code>.xfpe_cursorauto</code> <code>cursor: auto;</code> (Automatically sets cursor based on the element) <code>.xfpe_cursorcrosshair</code> <code>cursor: crosshair;</code> (Crosshair cursor) <code>.xfpe_cursorhelp</code> <code>cursor: help;</code> (Help cursor, usually a question mark) <code>.xfpe_cursormove</code> <code>cursor: move;</code> (Move cursor) <code>.xfpe_cursornotallowed</code> <code>cursor: not-allowed;</code> (Not-allowed cursor) <code>.xfpe_cursorprogress</code> <code>cursor: progress;</code> (Progress cursor) <code>.xfpe_cursortext</code> <code>cursor: text;</code> (Text cursor, usually an I-beam) <code>.xfpe_cursorwait</code> <code>cursor: wait;</code> (Wait cursor) <code>.xfpe_cursoralias</code> <code>cursor: alias;</code> (Alias cursor) <code>.xfpe_cursorcopy</code> <code>cursor: copy;</code> (Copy cursor) <code>.xfpe_cursorzoomin</code> <code>cursor: zoom-in;</code> (Zoom-in cursor) <code>.xfpe_cursorzoomout</code> <code>cursor: zoom-out;</code> (Zoom-out cursor) <code>.xfpe_cursorgrab</code> <code>cursor: grab;</code> (Grab cursor) <code>.xfpe_cursorgrabbing</code> <code>cursor: grabbing;</code> (Grabbing cursor)"},{"location":"css/index.html#border","title":"Border","text":"Class Name Description <code>.xfpe_bordernone</code> <code>border: none;</code> <code>.xfpe_bordernone_f</code> <code>border: none !important;</code> <code>.xfpe_outlinenone</code> <code>outline: none;</code> <code>.xfpe_outlinenone_f</code> <code>outline: none !important;</code>"},{"location":"css/index.html#position","title":"Position","text":"Class Name Description <code>.xfpe_absolute</code> <code>position: absolute;</code> <code>.xfpe_absolute_f</code> <code>position: absolute !important;</code> <code>.xfpe_fixed</code> <code>position: fixed;</code> <code>.xfpe_fixed_f</code> <code>position: fixed !important;</code> <code>.xfpe_relative</code> <code>position: relative;</code> <code>.xfpe_relative_f</code> <code>position: relative !important;</code> <code>.xfpe_static</code> <code>position: static;</code> <code>.xfpe_static_f</code> <code>position: static !important;</code> <code>.xfpe_sticky</code> <code>position: sticky;</code> <code>.xfpe_sticky_f</code> <code>position: sticky !important;</code>"},{"location":"css/index.html#optimization","title":"Optimization","text":"Class Name Description <code>.xfpe_t3d</code> <code>-webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0);</code> (Enables hardware acceleration) <code>.xfpe_t3d_f</code> <code>-webkit-transform: translate3d(0, 0, 0) !important; transform: translate3d(0, 0, 0) !important;</code> (Enables hardware acceleration with <code>!important</code>) <code>.xfpe_borderbox</code> <code>-webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;</code> (Includes padding and border in element's total width and height) <code>.xfpe_borderbox_f</code> <code>-webkit-box-sizing: border-box !important; -moz-box-sizing: border-box !important; box-sizing: border-box !important;</code> (Includes padding and border in element's total width and height with <code>!important</code>)"},{"location":"functions/x_button.html","title":"x_button.php","text":""},{"location":"functions/x_button.html#php-functions-buttons","title":"PHP Functions: Buttons","text":"<p>Use button-related functions by including <code>/_framework/functions/x_button.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mysqli</code>: If using <code>x_executionButton()</code> </li> </ul> Function Description Explanation <code>x_executionButton($db, $name, $url, $query, $get, $msgerr = \"Fehler!\", $msgok = \"Erfolgreich!\", $break = false, $style = \"\")</code> Creates an execution button that performs a database query when clicked and refreshes the page. The function constructs a URL with the specified <code>$get</code> parameter and generates an anchor tag (<code>&lt;a&gt;</code>) styled as a button. If the URL contains the query parameter <code>?</code>, it appends the <code>$get</code> parameter; otherwise, it adds it. If the button is clicked, it checks for the <code>$get</code> parameter in <code>$_GET</code>. If found, it executes the given SQL query using the database connection (<code>$db</code>). If successful, it refreshes the page with the updated URL after removing the <code>$get</code> parameter. <code>x_button($name, $url, $break = false, $style = \"\", $reacttourl = true)</code> Creates a simple button that links to a specified URL, optionally applying a different style if the current URL matches the link. The function generates an anchor tag (<code>&lt;a&gt;</code>) styled as a button, with the specified <code>$url</code> and <code>$name</code>. If <code>$reacttourl</code> is <code>true</code> and the current URL matches the <code>$url</code>, the button style is modified to indicate it as inactive. Optionally, the button can be followed by a line break if <code>$break</code> is <code>true</code>."},{"location":"functions/x_captcha.html","title":"x_captcha.php","text":""},{"location":"functions/x_captcha.html#php-functions-captchas","title":"PHP Functions: Captchas","text":"<p>Use captcha-related functions by including <code>/_framework/functions/x_captcha.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>gd</code>: The function uses GD functions like <code>imagecreatetruecolor()</code>, <code>imagecolorallocate()</code>, <code>imagefilledrectangle()</code>, <code>imageellipse()</code>, <code>imagefttext()</code>, and <code>imagejpeg()</code>.</li> <li><code>session</code>: The code uses PHP sessions <code>session_start()</code> and <code>$_SESSION</code> to store the CAPTCHA code. </li> </ul> Function Description Explanation <code>x_captcha($preecookie = \"\", $width = 550, $height = 250, $square_count = 5, $eclipse_count = 5, $color_ar = false, $font = \"\", $code = \"\")</code> Generates a CAPTCHA image with customizable dimensions, shapes, colors, and text. The function creates a CAPTCHA image for verification purposes. It initializes colors for squares, ellipses, background, and text. It then creates an image of specified dimensions and draws randomly placed squares and ellipses. The CAPTCHA code is stored in the session and rendered onto the image using a specified font. Headers are set to prevent caching of the image. The resulting image is output as JPEG. <code>x_captcha_key($preecookie = \"\")</code> Retrieves the CAPTCHA code stored in the session. This function returns the CAPTCHA code stored in the session variable specified by <code>$preecookie</code>. This allows for the comparison of user input against the generated CAPTCHA code to verify correctness."},{"location":"functions/x_cookiebanner.html","title":"x_cookiebanner.php","text":""},{"location":"functions/x_cookiebanner.html#php-functions-cookiebanner","title":"PHP Functions: Cookiebanner","text":"<p>Use cookie-banner-related functions by including <code>/_framework/functions/x_cookiebanner.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>session</code>: The code uses PHP sessions <code>session_start()</code> and <code>$_SESSION</code> to store the Cookiebanner Approval Boolean Value. </li> </ul> Function Description Explanation <code>x_cookieBanner_Pre($precookie = \"\", $redirect = true)</code> Prepares the cookie banner by setting a session variable if the banner is acknowledged, and optionally redirects to the current page. The function checks if a session is active; if not, it starts one. It then checks if the cookie banner has been acknowledged by looking for a specific session variable. If the banner is acknowledged (via POST or GET request), it sets this session variable and optionally redirects to the current page. This helps to prevent showing the banner repeatedly after acknowledgment. <code>x_cookieBanner($precookie = \"\", $use_post = false, $text = false, $url_cookies = \"\", $redirect_url = false, $button_text = \"I Agree\")</code> Displays a cookie consent banner with options for custom text, a redirect URL, and POST/GET submission handling. The function checks if a session is active; if not, it starts one. It determines whether to display the banner based on a session variable. If the banner is not acknowledged, it displays the banner with customizable text. The form can use GET or POST methods depending on the <code>$use_post</code> parameter. If a <code>$redirect_url</code> is provided, the form action will redirect to this URL upon submission. The <code>$button_text</code> parameter sets the button label."},{"location":"functions/x_curl.html","title":"x_curl.php","text":""},{"location":"functions/x_curl.html#php-functions-curl","title":"PHP Functions: Curl","text":"<p>Use curl-related functions by including <code>/_framework/functions/x_curl.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>curl</code>: The code heavily relies on the cURL library for making HTTP requests.</li> </ul> CURL Function Name Description <code>x_curl_getfile($file, $newFileName)</code> Download a file with Curl and save to <code>NewFileName</code>. <code>x_curl_gettext($url)</code> Get text content of a Curl request to URL."},{"location":"functions/x_eventbox.html","title":"x_eventbox.php","text":""},{"location":"functions/x_eventbox.html#php-functions-eventbox","title":"PHP Functions: Eventbox","text":"<p>Use eventbox-related functions by including <code>/_framework/functions/x_eventbox.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>session</code>: The code uses PHP sessions <code>session_start()</code> and <code>$_SESSION</code> to store the Eventbox Messages. </li> </ul> Function Description Explanation <code>x_eventBoxPrep($text, $type = \"x\", $precookie = \"\", $morecss = \"\", $buttontext = \"X\", $imgok = false, $imgfail = false, $imgwarn = false, $imgelse = false)</code> Prepares an event box with specified text, style, and optional images, saving it to a session variable for later display. The function creates an event box with a message (<code>$text</code>) and a specific type (<code>$type</code>), such as \"success\", \"warning\", or \"error\". It can include an image depending on the type. The event box's HTML and CSS are generated, including a close button (<code>$buttontext</code>). The generated content is stored in a session variable (<code>$_SESSION</code>) using the prefix <code>$precookie</code>. The box styling can be customized with the <code>$morecss</code> parameter. <code>x_eventBoxShow($precookie = \"\")</code> Displays the prepared event box by echoing the stored session variable, then clears the session variable. The function checks if the event box should be skipped (using a session variable). If not, it echoes the HTML stored in the session variable created by <code>x_eventBoxPrep()</code>, then unsets (deletes) the session variable to prevent repeated display. The <code>$precookie</code> parameter allows handling of multiple event boxes with different prefixes. <code>x_eventBoxSet($precookie = \"\")</code> Checks if an event box has been prepared and is stored in the session. The function checks if a session variable for an event box exists, returning <code>true</code> if it does and <code>false</code> otherwise. This can be used to determine if an event box has already been prepared. The <code>$precookie</code> parameter allows for checking different prefixed session variables. <code>x_eventBoxSkip($precookie = \"\")</code> Sets a session variable to skip displaying the event box. The function sets a session variable that prevents the event box from being displayed. This is useful if the event box should be temporarily skipped without clearing its content. The <code>$precookie</code> parameter allows this behavior to be controlled for specific prefixed event boxes."},{"location":"functions/x_folder.html","title":"x_folder.php","text":""},{"location":"functions/x_folder.html#php-functions-folders","title":"PHP Functions: Folders","text":"<p>Use functions described below by including <code>/_framework/functions/x_folder.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mbstring</code>: Required for preg_match functions.</li> </ul> Function Name Description Parameter <code>x_copy_directory($src, $dst)</code> Copy content of a folder recursively to another folder. - <code>src</code>: Folder Path (FULL) to Copy.- <code>dst</code>: Destination Folder Name to Copy to. <code>x_htaccess_secure($path)</code> Secure a folder by placing an <code>.htaccess</code> file to deny folder content. - <code>path</code>: Path where the <code>.htaccess</code> should be placed. <code>x_rmdir</code> Recursively delete a folder. - <code>dir</code>: Directory path to be deleted recursively."},{"location":"functions/x_library.html","title":"x_library.php","text":""},{"location":"functions/x_library.html#php-functions-library","title":"PHP Functions: Library","text":"<p>Use functions described below by including <code>/_framework/functions/x_library.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>sockets</code>: Required for the function <code>x_connection_check()</code>.</li> <li><code>mbstring</code>: Required for preg_match functions.</li> <li><code>exif</code>: For Thumbnail Functions.</li> <li><code>gd</code>: The function uses GD functions like <code>imagecreatetruecolor()</code>, <code>imagecolorallocate()</code>, <code>imagefilledrectangle()</code>, <code>imageellipse()</code>, <code>imagefttext()</code>, and <code>imagejpeg()</code>.</li> </ul> Function Name Description Parameter/Explanation <code>x_getRelativeFolderFromURL($url)</code> Extract relative path from full URL string. - <code>url</code>: The URL the relative folder should be extracted from. <code>x_firstimagetext</code> Get first image out of \"a\" tag from text string. - <code>text</code>: Input text containing HTML.- <code>all</code>: Whether to return all image tags or just the first one. <code>x_connection_check</code> Check a connection with <code>fsockopen</code>. - <code>host</code>: Hostname or IP address to check the connection to.- <code>port</code>: Port number to check.- <code>timeout</code>: Timeout duration in seconds. <code>x_inCLI</code> Check if the current script execution is handled via CGI and not in a web browser. Checks if the script is running in a Command Line Interface (CLI) environment and returns <code>true</code> if it is, <code>false</code> otherwise. <code>x_html_redirect</code> Spawn HTML redirect meta tag for simple HTML redirects. - <code>url</code>: URL to redirect to.- <code>seconds</code>: Number of seconds before the redirection occurs. <code>x_isset($val)</code> Checks if a value is not null and has a length greater than 0 after trimming. The function returns <code>true</code> if <code>$val</code> is set, is not empty after trimming, and has a length greater than 0. The <code>@</code> operator suppresses errors in case <code>$val</code> is undefined, and the null coalescing operator (<code>??</code>) ensures a fallback to an empty string if <code>$val</code> is null. <code>x_imgValid($url)</code> Validates if a string is a valid image URL by checking its existence and if it is an image. The function checks if <code>$url</code> is set and is a string with a length greater than 3. It then attempts to fetch the image size using <code>getimagesize()</code>, which confirms if the URL points to a valid image. If these conditions aren't met, it returns <code>false</code>. <code>x_hsc($string)</code> Safely encodes special characters in a string to HTML entities. The function uses <code>htmlspecialchars()</code> to convert special characters to HTML entities, helping to prevent XSS attacks. If <code>$string</code> is null or undefined, it defaults to an empty string. <code>x_het($string)</code> Converts all applicable characters in a string to HTML entities. The function uses <code>htmlentities()</code> to convert all applicable characters to HTML entities, ensuring that the string is safe for output in an HTML context. Similar to <code>x_hsc()</code>, it handles null or undefined values gracefully. <code>x_trim($string)</code> Trims whitespace from both sides of a string. The function uses <code>trim()</code> to remove whitespace from the beginning and end of the string. The <code>@</code> operator handles cases where <code>$string</code> might be undefined. <code>x_contains_cyrillic($val)</code> Checks if a string contains Cyrillic characters. The function uses a regular expression to check if <code>$val</code> contains any Cyrillic characters. If it does, it returns <code>true</code>; otherwise, it returns <code>false</code>. The regular expression pattern <code>[\\p{Cyrillic}]</code> matches any Cyrillic character. <code>x_contains_bad_word($val)</code> Checks if a string contains the word \"porn\" or \"Porn\". The function checks if the string contains \" porn \" or \" Porn \" (with spaces around). If either is found, the function returns <code>false</code> (indicating it's a \"bad\" word). If neither is found, it returns <code>true</code>. <code>x_contains_url($val)</code> Checks if a string contains an HTTP or HTTPS URL. The function looks for the substrings \"http://\" or \"https://\" within <code>$val</code>. If found, it returns <code>false</code> (indicating that a URL is present). If neither is found, it returns <code>true</code>. <code>x_getint($val)</code> Retrieves a value from the <code>$_GET</code> array if it's numeric. The function checks if the value associated with the key <code>$val</code> in the <code>$_GET</code> array is numeric. If it is, it returns the value; otherwise, it returns <code>false</code>. The <code>@</code> operator handles cases where the key does not exist. <code>x_postint($val)</code> Retrieves a value from the <code>$_POST</code> array if it's numeric. Similar to <code>x_getint()</code>, this function checks if the value associated with the key <code>$val</code> in the <code>$_POST</code> array is numeric. If so, it returns the value; otherwise, it returns <code>false</code>. The <code>@</code> operator handles cases where the key does not exist. <code>x_get($val)</code> Retrieves a value from the <code>$_GET</code> array if it exists. The function checks if the key <code>$val</code> exists in the <code>$_GET</code> array. If it does, it returns the corresponding value; otherwise, it returns <code>false</code>. The <code>@</code> operator handles undefined keys. <code>x_post($val)</code> Retrieves a value from the <code>$_POST</code> array if it exists. Similar to <code>x_get()</code>, this function checks if the key <code>$val</code> exists in the <code>$_POST</code> array. If it does, it returns the corresponding value; otherwise, it returns <code>false</code>. The <code>@</code> operator handles undefined keys. <code>x_datediff_before($d1, $d2, $length)</code> Checks if the difference between two dates is greater than a specified length (in days). The function calculates the difference between two dates (<code>$d1</code> and <code>$d2</code>) and returns <code>true</code> if the difference (in days) is greater than <code>$length</code>. If either date is <code>false</code>, it returns <code>false</code>. The <code>date_diff()</code> function is used to calculate the interval, and <code>format('%a')</code> returns the difference in days."},{"location":"functions/x_rss.html","title":"x_rss.php","text":""},{"location":"functions/x_rss.html#php-functions-rss","title":"PHP Functions: RSS","text":"<p>Use rss-related functions by including <code>/_framework/functions/x_rss.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>dom</code>: The DOMDocument class is used to parse and manipulate XML (RSS feeds in this case).</li> <li><code>mbstring</code>: Required for preg_match functions.</li> </ul> Function Description Explanation <code>x_rss_list($urltemp, $defaultcover, $limit = 25)</code> Fetches RSS feed items from a given URL, processes them, and displays them with a default cover image if needed. Limits the number of items displayed. The function loads the RSS feed from the provided URL (<code>$urltemp</code>) using <code>DOMDocument</code>. It extracts the title, link, publication date, and image URL from each feed item. It processes up to <code>$limit</code> items, ensuring that if no cover image is provided, a default image (<code>$defaultcover</code>) is used. It formats the date and displays each item as a clickable div with an image and title. If the image URL does not start with \"http\", it prepends \"https://\". <code>x_rss_array($urltemp)</code> Fetches RSS feed items from a given URL and returns them as an array. The function loads the RSS feed from the provided URL (<code>$urltemp</code>) using <code>DOMDocument</code>. It extracts the title, link, publication date, and image URL from each feed item and stores them in an associative array. The resulting array of feed items is returned. This array can be used for further processing or display."},{"location":"functions/x_search.html","title":"x_search.php","text":""},{"location":"functions/x_search.html#php-functions-search","title":"PHP Functions: Search","text":"<p>Use search-related function by including <code>/_framework/functions/x_search.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Classes</p> <ul> <li><code>x_class_mysql</code>: For database operations.</li> </ul>"},{"location":"functions/x_search.html#introduction","title":"Introduction","text":"<p>The <code>x_search</code> function provides a flexible, scoring-based full-text search capability for a MySQL table. It uses prepared statements for security, allows multi-word search queries, supports weighted search across multiple fields, and returns results sorted by relevance score.</p> <p>This function is designed to be used with a MySQL wrapper class that supports prepared statements and binding parameter arrays, such as the provided <code>x_class_mysql</code>.</p>"},{"location":"functions/x_search.html#function-signature","title":"Function Signature","text":"<pre><code>function x_search(\n    $mysql,               // MySQL database wrapper instance (object)\n    string $table,        // Table name to search (string)\n    array $search_fields = [], // Array of fields and weights to search - format: [ [\"field\", weight], ... ]\n    array $get_fields = [],    // Array of fields to retrieve from records\n    string $search_string = \"\",// The search input query string\n    string $uniqueref = \"id\"   // Unique identifier column name for records\n) : array|false\n</code></pre>"},{"location":"functions/x_search.html#parameters","title":"Parameters","text":"<ul> <li> <p>$mysql   The database access object instance that provides a <code>select</code> method supporting prepared statements with binding parameters. This object is used to execute the constructed SQL query securely.</p> </li> <li> <p>$table   The name of the database table to search in. The table should contain fields corresponding to those in <code>$search_fields</code>.</p> </li> <li> <p>$search_fields   An optional array defining which fields to search and how to weight matches in those fields for scoring.   Format: </p><pre><code>[\n  [\"field_name1\", weight1],\n  [\"field_name2\", weight2],\n  ...\n]\n</code></pre>   If empty, defaults to searching the fields:   </li> <li><code>title</code> with weight 3  </li> <li><code>text</code> with weight 1  </li> <li><code>category</code> with weight 2  </li> <li> <p><code>sec_category</code> with weight 2</p> </li> <li> <p>$get_fields   An optional array of fields to be retrieved in the search results. If empty, defaults to the list of searchable fields only. The unique identifier field <code>$uniqueref</code> is automatically included in results.</p> </li> <li> <p>$search_string   The search query text. Can be a single word or multiple words separated by spaces. The function treats each word individually and combines search clauses with AND logic, meaning all terms must appear.</p> </li> <li> <p>$uniqueref   The unique identifier column for records, typically a primary key like <code>id</code>. This field is always returned for each record.</p> </li> </ul>"},{"location":"functions/x_search.html#return-value","title":"Return Value","text":"<ul> <li>Returns an array of associative arrays representing database rows matching the search.   Each record contains the requested fields in <code>$get_fields</code> plus an additional <code>score</code> field indicating relevance.  </li> <li>Returns false if the search input string is empty or only whitespace.</li> </ul>"},{"location":"functions/x_search.html#behavior-and-algorithm","title":"Behavior and Algorithm","text":"<ol> <li> <p>Input Validation    The function immediately returns false if the search string is empty or whitespace only.</p> </li> <li> <p>Search Term Processing    Splits the <code>$search_string</code> into individual search terms based on spaces after normalizing multiple spaces to single spaces.</p> </li> <li> <p>Query Preparation    For each search term, constructs SQL <code>LIKE ?</code> conditions on each field specified in <code>$search_fields</code>. Multiple fields combined by <code>OR</code>, multiple terms combined by <code>AND</code>.</p> </li> <li> <p>Binding Parameters    Prepares a binding array for each search term per field with proper wildcarding (<code>%term%</code>) to protect against SQL injection.</p> </li> <li> <p>Field Selection    Builds the select clause based on requested <code>$get_fields</code>, ensuring the unique identifier field is included.</p> </li> <li> <p>Query Execution    The filtered records from the constructed query are fetched, or returns an empty array if no matches.</p> </li> <li> <p>Scoring    For each result row, counts the number of occurrences of each search term in each of the weighted fields (case-insensitive).    The counts are multiplied by respective weights and summed up to compute a relevance <code>score</code>.</p> </li> <li> <p>Sorting    The resulting array is sorted in descending order by the computed <code>score</code> to rank most relevant results first.</p> </li> </ol>"},{"location":"functions/x_search.html#usage-example","title":"Usage Example","text":"<pre><code>// Assume $mysql is an instance of x_class_mysql or compatible\n\n$search_fields = [\n    [\"title\", 5],\n    [\"description\", 3],\n    [\"tags\", 1],\n];\n\n$get_fields = [\"id\", \"title\", \"description\", \"tags\"];\n\n$search_string = \"open ai integration\";\n\n$results = x_search($mysql, \"projects\", $search_fields, $get_fields, $search_string, \"id\");\n\nif ($results === false) {\n    echo \"Empty search query.\";\n} elseif (empty($results)) {\n    echo \"No results found.\";\n} else {\n    foreach ($results as $row) {\n        echo \"Project: {$row['title']} (Score: {$row['score']})\\n\";\n    }\n}\n</code></pre>"},{"location":"functions/x_search.html#notes-and-recommendations","title":"Notes and Recommendations","text":"<ul> <li> <p>The function expects the <code>$mysql-&gt;select</code> method to accept a query string, a flag for multiple records, and an array of binding arrays where each binding array has <code>'type'</code> (e.g. <code>\"s\"</code>) and <code>'value'</code> keys for prepared statement parameters.</p> </li> <li> <p>The function assumes all field names provided are valid and sanitized to prevent SQL injection via field names. These should ideally be controlled or validated before usage.</p> </li> <li> <p>The scoring algorithm uses <code>substr_count</code> for simple substring occurrence count per field which performs well but may not account for advanced linguistic relevance.</p> </li> <li> <p>The function performs a case-insensitive search and scoring by normalizing strings with <code>mb_strtolower</code>.</p> </li> <li> <p>When customizing, adjust weights to reflect domain-specific significance of fields in relevance ranking.</p> </li> <li> <p>For very large tables consider adding full-text indexes or more advanced search solutions for performance.</p> </li> </ul>"},{"location":"functions/x_table.html","title":"x_table.php","text":""},{"location":"functions/x_table.html#php-functions-tables","title":"PHP Functions: Tables","text":"<p>Use table-related functions by including <code>/_framework/functions/x_table.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.1-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>mbstring</code>: Required for preg_match functions.</li> </ul> Function Description Explanation <code>x_table_div($array, $titlelist, $alignarray = false, $percentarray = false, $title = false)</code> Renders a styled table in a <code>div</code> container, with customizable column alignment, width percentages, and optional title. The function creates a <code>div</code> containing a table with column titles and rows of data. It starts by optionally displaying a title. Column titles are styled based on alignment (<code>$alignarray</code>) and width percentages (<code>$percentarray</code>). It then populates rows of the table using data from <code>$array</code>, alternating row colors. Each column's width and alignment are controlled by the given parameters. If no cover image is provided, a default image is used. <code>x_table_complex($array, $titlelist, $formid = \"\", $alignarray = false)</code> Generates a table with search functionality, allowing filtering of data through input fields in the table headers. This function creates an HTML form with a table that includes search input fields in the headers. Each input field corresponds to a column in the table and allows users to filter rows based on their input. The table displays rows from <code>$array</code> that match the search criteria. The <code>$formid</code> parameter helps generate a unique ID for the form. Data filtering is performed using POST requests and the search fields' values. <code>x_table_simple($array, $titlelist, $tableid = \"x_table_simple\", $alignarray = false)</code> Displays a simple table with specified column titles and alignment, and an optional ID for the table. The function generates a basic HTML table with headers and rows from <code>$array</code>. It allows for customizable column alignment through <code>$alignarray</code> and sets the table ID via <code>$tableid</code>. If <code>$array</code> is empty, a message indicating no data is shown. Each cell's text alignment is determined based on the provided alignment array or defaults to left, right, or center. The table displays data without additional styling or features."},{"location":"functions/x_thumbnail.html","title":"x_thumbnail.php","text":""},{"location":"functions/x_thumbnail.html#php-functions-thumbnail","title":"PHP Functions: Thumbnail","text":"<p>Use thumbnail-related functions by including <code>/_framework/functions/x_thumbnail.php</code>.</p> <p>Dependencies</p> <ul> <li>PHP 7.0-7.4</li> <li>PHP 8.0-8.4</li> </ul> <p>PHP-Modules</p> <ul> <li><code>gd</code>: Required for image creation, resizing, and saving functions.</li> <li><code>file_get_contents</code>: Required to read image data from URLs (usually enabled by default).</li> </ul> Function Name Description Parameters <code>x_thumbnail</code> Creates a JPEG thumbnail from an image URL and saves it to a file. Returns the image resource. <code>$url</code> (string): Source image URL<code>$filename</code> (string): Path to save the JPEG thumbnail<code>$width</code> (int): Thumbnail width (default 600)<code>$height</code> (int/bool): Thumbnail height. If <code>true</code>, height is auto-calculated to keep aspect ratio (default <code>true</code>) <code>x_thumbnail_save</code> Creates a PNG thumbnail from a PNG image file URL and saves it to a file (if given). Returns <code>true</code> after processing. <code>$url</code> (string): Source PNG image file URL<code>$save_path</code> (string/null): Path to save the PNG thumbnail (optional)<code>$width</code> (int): Thumbnail width (default 600)<code>$height</code> (int/bool): Thumbnail height passed directly; no auto-calculation (default <code>true</code>)"},{"location":"javascript/index.html","title":"xjs_library.js","text":""},{"location":"javascript/index.html#javascript-library","title":"Javascript Library","text":""},{"location":"javascript/index.html#introduction","title":"Introduction","text":"<p>Boost your web development efficiency with our library of reusable JavaScript functions, ideal for dynamic, interactive projects. Each function is fully documented for easy integration. To use, simply include the JavaScript file located at /<code>_framework/javascript/xjs_library.js</code>. Streamline your workflow and enhance performance with our pre-built modules.</p>"},{"location":"javascript/index.html#functions","title":"Functions","text":"Function Parameters Purpose How It Works (Summary) xjs_get <code>parameterName</code> \u2013 Name of the GET parameter to retrieve Get a URL GET parameter\u2019s value Splits query string into key-value pairs, decodes, and returns matching value. xjs_in_url <code>parameterName</code> \u2013 String to search for in the current page URL Check if a string exists in the URL Uses <code>window.location.href.includes()</code> to check presence. xjs_hide_id <code>id</code> \u2013 jQuery object representing the element to hide Hide an element by ID (using jQuery) Sets CSS style <code>display: none</code> on the given object. xjs_show_id <code>id</code> \u2013 jQuery object representing the element to show Show an element by ID (using jQuery) Sets CSS style <code>display: block</code> on the given object. xjs_toggle_id <code>id</code> \u2013 jQuery object representing the element to toggle visibility Toggle visibility of an element Checks current <code>display</code> style, changes between <code>none</code> and <code>block</code>. xjs_is_email <code>email</code> \u2013 String to validate as an email address Validate email format Uses regex <code>/\\S+@\\S+\\.\\S+/</code> to test for pattern match. xjs_popup <code>var_text</code> \u2013 HTML/text content to display inside popup<code>var_entrie</code> (optional) \u2013 Button label text Create a popup with close button Constructs HTML for popup, appends to <code>document.body</code>, adds remove action. xjs_genkey <code>length</code> (optional, default 12) \u2013 Number of characters<code>charset</code> (optional) \u2013 Allowed characters Generate random password/key Picks random characters from <code>charset</code> until reaching <code>length</code>. xjs_dropdown_sort_abc <code>idname</code> \u2013 ID of the <code>&lt;select&gt;</code> dropdown element Sort dropdown list alphabetically Converts options to array, sorts by <code>text</code>, rebuilds <code>&lt;select&gt;</code>. xjs_request_get <code>url</code> \u2013 Destination URL<code>params</code> \u2013 Object of query parameters<code>callback</code> \u2013 Function to handle response Make GET AJAX request Encodes params into query string, sends request, calls callback with data. xjs_request_post <code>url</code> \u2013 Destination URL<code>params</code> \u2013 Object of POST parameters<code>callback</code> \u2013 Function to handle response Make POST AJAX request Encodes params into URL-encoded string, sends request, calls callback."},{"location":"javascript/index.html#examples","title":"Examples","text":""},{"location":"javascript/index.html#xjs_get","title":"xjs_get","text":"<pre><code>/* ##################################################################\n   Function: xjs_get(parameterName)\n   Purpose:  Get the value of a GET parameter from the current URL\n   Example:\n   // URL: https://example.com?page=home\n   let page = xjs_get(\"page\");\n   console.log(page); // \"home\"\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_in_url","title":"xjs_in_url","text":"<pre><code>/* ##################################################################\n   Function: xjs_in_url(parameterName)\n   Purpose:  Check if a string exists in the current URL\n   Example:\n   if (xjs_in_url(\"profile\")) {\n     console.log(\"Profile section is active\");\n   }\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_hide_id","title":"xjs_hide_id","text":"<pre><code>/* ##################################################################\n   Function: xjs_hide_id(id)\n   Purpose:  Hide an element by its jQuery ID\n   Example:\n   xjs_hide_id($(\"#contentBox\"));\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_show_id","title":"xjs_show_id","text":"<pre><code>/* ##################################################################\n   Function: xjs_show_id(id)\n   Purpose:  Show a previously hidden element by its jQuery ID\n   Example:\n   xjs_show_id($(\"#contentBox\"));\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_toggle_id","title":"xjs_toggle_id","text":"<pre><code>/* ##################################################################\n   Function: xjs_toggle_id(id)\n   Purpose:  Toggle an element\u2019s visibility (show/hide)\n   Example:\n   xjs_toggle_id($(\"#sidebar\"));\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_is_email","title":"xjs_is_email","text":"<pre><code>/* ##################################################################\n   Function: xjs_is_email(email)\n   Purpose:  Validate if a string is a properly formatted email\n   Example:\n   console.log(xjs_is_email(\"hello@bugfish.de\")); // true\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_popup","title":"xjs_popup","text":"<pre><code>/* ##################################################################\n   Function: xjs_popup(var_text, var_entrie = \"Close\")\n   Purpose:  Create a popup dynamically with optional close button text\n   Example:\n   xjs_popup(\"Welcome to Bugfish Framework!\", \"Got it\");\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_genkey","title":"xjs_genkey","text":"<pre><code>/* ##################################################################\n   Function: xjs_genkey(length = 12, charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n   Purpose:  Generate a random password/key string\n   Example:\n   let key = xjs_genkey(16);\n   console.log(\"Generated key:\", key);\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_dropdown_sort_abc","title":"xjs_dropdown_sort_abc","text":"<pre><code>/* ##################################################################\n   Function: xjs_dropdown_sort_abc(idname)\n   Purpose:  Sort the options of a &lt;select&gt; dropdown alphabetically\n   Example:\n   xjs_dropdown_sort_abc(\"countryList\");\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_request_get","title":"xjs_request_get","text":"<pre><code>/* ##################################################################\n   Function: xjs_request_get(url, params, callback)\n   Purpose:  Send an asynchronous GET request with parameters\n   Example:\n   xjs_request_get(\"/api/user\", {id: 42}, function(response, status) {\n     console.log(\"Status:\", status);\n     console.log(\"Response:\", response);\n   });\n################################################################## */\n</code></pre>"},{"location":"javascript/index.html#xjs_request_post","title":"xjs_request_post","text":"<pre><code>/* ##################################################################\n   Function: xjs_request_post(url, params, callback)\n   Purpose:  Send an asynchronous POST request with parameters\n   Example:\n   xjs_request_post(\"/api/save\", {name: \"Jan\", role: \"Developer\"}, function(response, status) {\n     console.log(\"Saved:\", response);\n   });\n################################################################## */\n</code></pre>"}]}